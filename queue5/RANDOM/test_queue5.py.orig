# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import queue5 as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)


def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)


def test_case_3():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)


def test_case_4():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_5():
    queue_0 = module_0.Queue()


def test_case_6():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()


def test_case_7():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_8():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = queue_4.dequeue()


def test_case_9():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_4)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_5 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_5)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_10():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_2)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    node_4 = module_0.Node(node_3)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()


def test_case_11():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_12():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_1.dequeue()


def test_case_13():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_1.dequeue()


def test_case_14():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(node_2)
    var_2 = queue_0.enqueue(node_3)


def test_case_15():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(node_5)
    queue_6 = module_0.Queue()


def test_case_16():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_4)
    queue_3 = module_0.Queue()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_6 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_6)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_3 = True
    node_7 = module_0.Node(bool_3)


def test_case_17():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    none_type_4 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(var_0)


def test_case_18():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_3)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(none_type_4)


def test_case_19():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_20():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()


def test_case_21():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()


def test_case_22():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    var_3 = queue_3.dequeue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_5 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_23():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_3)
    var_3 = queue_2.dequeue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    none_type_5 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_5)
    none_type_6 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_7 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_7)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    node_6 = module_0.Node(node_5)
    queue_12 = module_0.Queue()
    var_8 = queue_6.dequeue()


def test_case_24():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()


def test_case_25():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()


def test_case_26():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_1 = module_0.Queue()
    none_type_3 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()


def test_case_27():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_5 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_5)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_5 = queue_10.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()


def test_case_28():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_29():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()


def test_case_30():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)


def test_case_31():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_3)
    var_4 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(node_2)
    none_type_6 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    node_5 = module_0.Node(node_4)
    none_type_8 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_8)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    var_9 = queue_15.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    var_10 = queue_10.enqueue(queue_5)


def test_case_32():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    var_2 = queue_0.enqueue(none_type_1)
    var_3 = queue_1.enqueue(var_2)


def test_case_33():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_4 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_4)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_5 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_5)
    var_5 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    none_type_6 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_6)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    var_7 = queue_11.dequeue()
    var_8 = queue_1.enqueue(none_type_6)


def test_case_34():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_35():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_2)


def test_case_36():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(node_5)
    none_type_5 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_5)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_6 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_6)
    var_5 = queue_7.dequeue()
    var_6 = queue_1.enqueue(var_5)


def test_case_37():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()


def test_case_38():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    var_3 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    node_2 = module_0.Node(node_1)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_6 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(node_6)
    queue_13 = module_0.Queue()
    none_type_8 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_8)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    none_type_9 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_9)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    var_10 = queue_19.dequeue()
    var_11 = queue_15.enqueue(var_10)


def test_case_39():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_4)
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(node_7)
    none_type_6 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_6)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_7 = None
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(none_type_7)
    var_9 = queue_15.dequeue()
    none_type_8 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_8)
    queue_19 = module_0.Queue()


def test_case_40():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_2)


def test_case_41():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_2)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_4 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(node_5)


def test_case_42():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()


def test_case_43():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_44():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_4)
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_3)


def test_case_45():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_2)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    node_3 = module_0.Node(node_2)


def test_case_46():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    var_3 = queue_3.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = queue_8.dequeue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_3)
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(none_type_4)
    queue_11 = module_0.Queue()
    none_type_5 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_5)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    var_10 = queue_2.enqueue(var_8)


def test_case_47():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(node_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_6 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_48():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_4 = queue_9.dequeue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    none_type_5 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_5)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    var_7 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_49():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = queue_9.dequeue()
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    none_type_6 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(node_6)
    queue_16 = module_0.Queue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    none_type_8 = None
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(none_type_8)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_8 = module_0.Node(var_4)


def test_case_50():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_51():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)


def test_case_52():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    none_type_4 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_4)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    var_4 = queue_5.dequeue()
    var_5 = queue_5.enqueue(none_type_3)


def test_case_53():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_5)
    queue_10 = module_0.Queue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    queue_11 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    var_6 = queue_5.enqueue(none_type_3)


def test_case_54():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    node_4 = module_0.Node(none_type_1)


def test_case_55():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_4.dequeue()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_4 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    node_6 = module_0.Node(node_5)
    none_type_6 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_6)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_7)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_8 = module_0.Node(queue_5)


def test_case_56():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_5 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_5)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(node_4)
    queue_16 = module_0.Queue()
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    queue_17 = module_0.Queue()


def test_case_57():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()


def test_case_58():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_3 = queue_6.dequeue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    node_8 = module_0.Node(node_7)
    queue_9 = module_0.Queue()


def test_case_59():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()


def test_case_60():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()


def test_case_61():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()


def test_case_62():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_2)
    queue_9 = module_0.Queue()
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_6 = queue_12.dequeue()
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_4)
    queue_14 = module_0.Queue()


def test_case_63():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(node_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_64():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    var_5 = queue_5.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_10 = queue_14.dequeue()
    var_11 = queue_15.dequeue()


def test_case_65():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_3)
    queue_4 = module_0.Queue()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_5 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    var_7 = queue_8.dequeue()


def test_case_66():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_3)
    var_4 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_4)
    node_3 = module_0.Node(bool_1)


def test_case_67():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(var_2)


def test_case_68():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_3)
    node_4 = module_0.Node(str_0)


def test_case_69():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_4)
    queue_9 = module_0.Queue()
    none_type_5 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_6 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_6)
    var_7 = queue_11.dequeue()
    queue_14 = module_0.Queue()
    none_type_7 = None
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(none_type_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    node_6 = module_0.Node(node_5)
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_10 = queue_16.dequeue()
    var_11 = queue_16.dequeue()


def test_case_70():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    node_1 = module_0.Node(queue_4)


def test_case_71():
    bool_0 = False
    node_0 = module_0.Node(bool_0)


def test_case_72():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = queue_5.dequeue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    node_4 = module_0.Node(queue_6)


def test_case_73():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_4)
    node_6 = module_0.Node(queue_5)


def test_case_74():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_2 = queue_3.dequeue()
    assert queue_3.head is None
    assert queue_3.tail is None


def test_case_75():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_1)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    node_4 = module_0.Node(node_3)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_12 = module_0.Queue()


def test_case_76():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    none_type_4 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_4)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_8 = module_0.Node(none_type_2)


def test_case_77():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    queue_4 = module_0.Queue()


def test_case_78():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_3 = module_0.Node(none_type_3)


def test_case_79():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_80():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_1.enqueue(var_3)


def test_case_81():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_11.dequeue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_3)
    queue_14 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(node_5)
    queue_16 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    var_9 = queue_7.enqueue(queue_10)


def test_case_82():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    var_3 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_1)
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_4)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_5 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_5)
    queue_15 = module_0.Queue()
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    queue_16 = module_0.Queue()
    var_8 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_9 = queue_15.dequeue()


def test_case_83():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_3)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(node_7)
    queue_6 = module_0.Queue()


def test_case_84():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_5)
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(node_7)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()


def test_case_85():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = queue_4.dequeue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_12 = module_0.Queue()


def test_case_86():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_3)
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_5)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    var_8 = queue_12.dequeue()
    assert queue_12.tail is None


def test_case_87():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_88():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = queue_3.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_3 = None
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(none_type_3)
    var_10 = queue_14.dequeue()
    var_11 = queue_4.dequeue()


def test_case_89():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_0)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_3)
    var_5 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    none_type_4 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    node_3 = module_0.Node(node_2)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(node_7)
    queue_16 = module_0.Queue()
    node_8 = module_0.Node(queue_6)


def test_case_90():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_3)
    var_4 = queue_5.dequeue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    node_3 = module_0.Node(node_0)


def test_case_91():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_2)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_4.dequeue()
    assert queue_4.head is None
    assert queue_4.tail is None
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "queue5.Node"
    assert var_4.data is None
    assert var_4.next is None


def test_case_92():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    list_1 = [queue_2, queue_3]
    node_3 = module_0.Node(list_1)


def test_case_93():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    queue_4 = module_0.Queue()


def test_case_94():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    node_3 = module_0.Node(var_3)


def test_case_95():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_4.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_3 = module_0.Node(none_type_0)


def test_case_96():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    none_type_4 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_4)
    queue_13 = module_0.Queue()


def test_case_97():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(node_4)
    var_4 = queue_5.dequeue()


def test_case_98():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_3)
    var_6 = queue_10.dequeue()
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    none_type_5 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_5)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_1)
    none_type_6 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_6)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_10 = queue_19.dequeue()
    queue_20 = module_0.Queue()


def test_case_99():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)


def test_case_100():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_2)
    var_5 = queue_2.enqueue(none_type_3)


def test_case_101():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(node_1)
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    node_4 = module_0.Node(node_3)
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(str_0)
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(var_7)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    var_9 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_10 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_7 = None
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(none_type_7)
    queue_15 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    none_type_8 = None
    node_8 = module_0.Node(none_type_8)
    queue_16 = module_0.Queue()
    var_12 = queue_16.enqueue(node_8)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_102():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()


def test_case_103():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    var_6 = queue_7.dequeue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(var_7)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()


def test_case_104():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None


def test_case_105():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    var_3 = queue_2.dequeue()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_106():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_14 = module_0.Queue()


def test_case_107():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_5)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_3)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()


def test_case_108():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    node_5 = module_0.Node(str_0)


def test_case_109():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_3)
    var_4 = queue_8.dequeue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_1)
    var_6 = queue_11.dequeue()
    assert queue_11.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_12.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(var_2)


def test_case_110():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_4 = queue_7.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_8 = module_0.Queue()


def test_case_111():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_3)
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_4)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_8 = queue_13.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    none_type_5 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_5)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_6 = module_0.Node(bool_2)


def test_case_112():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    var_3 = queue_4.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_4)
    var_6 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_8 = queue_9.dequeue()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    var_9 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_10 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_113():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_2)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_4)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    queue_14 = module_0.Queue()


def test_case_114():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)


def test_case_115():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    var_3 = queue_2.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_3.dequeue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_4)
    var_8 = queue_6.dequeue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_9 = queue_9.enqueue(str_1)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_5 = None
    queue_10 = module_0.Queue()
    var_10 = queue_10.enqueue(none_type_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_6 = None
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(none_type_6)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    var_12 = queue_15.dequeue()
    queue_16 = module_0.Queue()


def test_case_116():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_3 = module_0.Queue()


def test_case_117():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    var_7 = queue_5.enqueue(none_type_0)
    var_8 = queue_4.enqueue(var_7)


def test_case_118():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_119():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)


def test_case_120():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(none_type_1)


def test_case_121():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"


def test_case_122():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_3.enqueue(var_3)


def test_case_123():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_2)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_1, none_type_1: var_2}
    node_3 = module_0.Node(dict_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    var_5 = queue_5.enqueue(bool_3)


def test_case_124():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.dequeue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_4 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_4)
    var_7 = queue_11.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(node_4)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(node_6)
    bool_0 = False
    dict_0 = {none_type_6: none_type_6, node_6: bool_0, none_type_6: var_9}
    node_7 = module_0.Node(dict_0)
    queue_16 = module_0.Queue()


def test_case_125():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_11 = module_0.Queue()


def test_case_126():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(node_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(node_3)
    node_4 = module_0.Node(none_type_3)


def test_case_127():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = queue_4.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(node_7)
    node_8 = module_0.Node(var_4)


def test_case_128():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_0)
    var_4 = queue_10.dequeue()
    assert queue_10.tail is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_5 = queue_2.dequeue()


def test_case_129():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_3)
    var_6 = queue_9.dequeue()
    node_3 = module_0.Node(none_type_0)


def test_case_130():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == "~%25QZ3{"
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_2)
    var_6 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()


def test_case_131():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_2)
    var_4 = queue_5.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(node_0)


def test_case_132():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    node_2 = module_0.Node(queue_1)


def test_case_133():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()


def test_case_134():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_4)
    var_5 = queue_5.dequeue()
    none_type_5 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_5)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_135():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    node_2 = module_0.Node(node_1)
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    var_5 = queue_7.dequeue()
    assert var_5 == "~%25QZ3{"
    assert queue_7.head is None
    assert queue_7.tail is None
    node_3 = module_0.Node(var_5)
    assert node_3.data == "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_10 = queue_8.enqueue(var_8)


def test_case_136():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()


def test_case_137():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(none_type_3)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_7 = queue_16.dequeue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(queue_6)


def test_case_138():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(var_6)
    queue_10 = module_0.Queue()


def test_case_139():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_0)
    var_3 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_2)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_1)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_4.dequeue()


def test_case_140():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)


def test_case_141():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_1)
    var_6 = queue_9.dequeue()
    assert queue_9.tail is None
    node_2 = module_0.Node(var_6)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(var_8)
    queue_15 = module_0.Queue()


def test_case_142():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_3: str_0}
    node_3 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_7 = module_0.Node(bytes_0)
    queue_9 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_10 = module_0.Queue()


def test_case_143():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_1}
    node_2 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(node_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_2)
    var_6 = queue_11.dequeue()
    assert queue_11.tail is None
    node_6 = module_0.Node(var_6)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()


def test_case_144():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(node_2)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_0, none_type_1: var_3}
    node_3 = module_0.Node(dict_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_2)
    dict_1 = {var_5: node_4, node_4: str_1, str_1: str_2, queue_5: str_1}
    node_5 = module_0.Node(dict_1)
    var_6 = queue_0.dequeue()
    assert queue_0.head is None
    assert queue_0.tail is None


def test_case_145():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_2)
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_3)
    dict_0 = {var_5: node_3, node_3: str_2, str_2: str_3, queue_11: str_2}
    node_4 = module_0.Node(dict_0)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(str_4)
    var_9 = queue_17.dequeue()
    assert queue_17.tail is None
    none_type_4 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    node_7 = module_0.Node(node_6)
    none_type_6 = None
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(none_type_6)
    queue_20 = module_0.Queue()
    node_8 = module_0.Node(var_5)


def test_case_146():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    var_4 = queue_7.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_7.head is None
    assert queue_7.tail is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == "~%25QZ3{"
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_6)
    bool_2 = False
    dict_0 = {none_type_4: none_type_4, node_6: bool_2, none_type_4: var_7}
    node_7 = module_0.Node(dict_0)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    node_9 = module_0.Node(queue_8)


def test_case_147():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()


def test_case_148():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_1)
    var_6 = queue_11.dequeue()
    assert queue_11.tail is None
    node_2 = module_0.Node(var_6)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(node_3)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(none_type_3)


def test_case_149():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_2}
    node_2 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()


def test_case_150():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_151():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_2: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(var_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_4)
    queue_11 = module_0.Queue()


def test_case_152():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_3 = queue_4.dequeue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    var_6 = queue_3.dequeue()


def test_case_153():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_3.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_154():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_155():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_3)
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_156():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()


def test_case_157():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    var_6 = queue_1.dequeue()


def test_case_158():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(node_5)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_7)
    bool_2 = False
    dict_0 = {none_type_5: none_type_5, node_7: bool_2, none_type_5: var_4}
    node_8 = module_0.Node(dict_0)
    bool_3 = False
    node_9 = module_0.Node(bool_3)
    node_10 = module_0.Node(list_1)


def test_case_159():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()


def test_case_160():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(none_type_1)
    var_3 = queue_6.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_2)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_4)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_9 = queue_10.enqueue(queue_5)


def test_case_161():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_9.dequeue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_162():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    var_3 = queue_5.dequeue()
    assert queue_5.tail is None
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_7 = module_0.Node(bytes_0)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_4)
    queue_8 = module_0.Queue()
    var_6 = queue_1.enqueue(var_1)


def test_case_163():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_164():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    var_3 = queue_5.dequeue()
    queue_8 = module_0.Queue()


def test_case_165():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(str_1)
    var_9 = queue_10.dequeue()
    assert queue_10.tail is None
    node_4 = module_0.Node(var_9)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(str_3)
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    var_11 = queue_9.dequeue()


def test_case_166():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_3)
    dict_0 = {var_1: node_3, node_3: str_2, str_2: str_3, queue_4: str_2}
    node_4 = module_0.Node(dict_0)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_4)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_5 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_5)
    var_4 = queue_8.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_6 = module_0.Node(var_4)
    assert node_6.data == "~%25QZ3{"
    queue_9 = module_0.Queue()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_7)
    bool_0 = False
    dict_1 = {none_type_2: none_type_2, node_7: bool_0, none_type_2: var_5}
    node_8 = module_0.Node(dict_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_6 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_6)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(node_10)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_167():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_168():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    var_3 = queue_1.dequeue()


def test_case_169():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)


def test_case_170():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_1)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_1: bool_1, none_type_2: var_4}
    node_2 = module_0.Node(dict_0)
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_0)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(node_5)
    var_10 = queue_11.enqueue(none_type_4)


def test_case_171():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_3)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    var_4 = queue_5.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    node_4 = module_0.Node(var_4)
    assert node_4.data == "~%25QZ3{"
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(list_0)


def test_case_172():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()


def test_case_173():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_174():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_2)
    var_6 = queue_8.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(str_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(var_7)
    queue_13 = module_0.Queue()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(node_2)
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_11 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_12 = queue_17.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    var_13 = queue_17.enqueue(str_3)


def test_case_175():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_1, none_type_1: var_1}
    node_5 = module_0.Node(dict_0)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_2)
    var_4 = queue_8.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_6 = module_0.Node(var_4)
    assert node_6.data == "~%25QZ3{"
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_4)
    queue_15 = module_0.Queue()


def test_case_176():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(queue_5)


def test_case_177():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    queue_10 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_6)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = queue_2.dequeue()
    assert queue_2.tail is None


def test_case_178():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(node_5)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_179():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_2 = module_0.Queue()
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    var_3 = queue_2.dequeue()


def test_case_180():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)


def test_case_181():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_5)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_182():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_1 = False
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    set_0 = {bool_1, var_2, queue_2, var_2}
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_5.dequeue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(str_1)
    var_8 = queue_9.dequeue()
    assert queue_9.tail is None
    node_5 = module_0.Node(var_8)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_183():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_8 = queue_15.dequeue()
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(str_3)
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(var_9)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()


def test_case_184():
    int_0 = -4556
    node_0 = module_0.Node(int_0)


def test_case_185():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_1)
    dict_0 = {var_5: node_5, node_5: str_0, str_0: str_1, queue_7: str_0}
    node_6 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(node_9)
    bool_2 = False
    dict_1 = {none_type_3: none_type_3, node_9: bool_2, none_type_3: var_6}
    node_10 = module_0.Node(dict_1)
    node_11 = module_0.Node(none_type_2)


def test_case_186():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_3)
    var_4 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(str_1)
    var_6 = queue_12.dequeue()
    assert queue_12.tail is None
    bool_1 = False
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    set_0 = {bool_1, var_7, queue_13, var_7}
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(set_0)
    node_3 = module_0.Node(var_8)
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_2)
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(var_9)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_11 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_12 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_13 = queue_20.dequeue()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_14 = queue_14.enqueue(bool_1)


def test_case_187():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_5}
    node_2 = module_0.Node(dict_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()


def test_case_188():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_3)
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_1)
    var_6 = queue_11.dequeue()
    assert queue_11.tail is None
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_189():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_9)
    queue_11 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_11)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_14)


def test_case_190():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_0)


def test_case_191():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    var_3 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_192():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_2)
    dict_1 = {var_3: node_2, node_2: str_1, str_1: str_2, queue_4: str_1}
    node_3 = module_0.Node(dict_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_3)
    var_6 = queue_7.dequeue()
    assert var_6 == "~%25QZ3{"
    assert queue_7.head is None
    assert queue_7.tail is None
    node_4 = module_0.Node(var_6)
    assert node_4.data == "~%25QZ3{"
    queue_8 = module_0.Queue()


def test_case_193():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_5)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(queue_2)


def test_case_194():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()


def test_case_195():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(node_2)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_1, none_type_1: var_2}
    node_3 = module_0.Node(dict_0)
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    var_3 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_196():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()


def test_case_197():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_0: str_0}
    node_2 = module_0.Node(dict_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_2 = False
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    set_0 = {bool_2, var_3, queue_6, var_3}
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(set_0)
    node_6 = module_0.Node(var_4)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_4)
    var_7 = queue_10.dequeue()
    assert queue_10.tail is None
    node_7 = module_0.Node(var_7)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_1)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    node_10 = module_0.Node(node_9)
    var_9 = queue_2.enqueue(queue_9)


def test_case_198():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()


def test_case_199():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(node_2)
    queue_10 = module_0.Queue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_14 = module_0.Queue()


def test_case_200():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_2)
    var_7 = queue_7.dequeue()
    assert queue_7.tail is None
    node_4 = module_0.Node(var_7)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    var_8 = queue_6.dequeue()


def test_case_201():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_4)
    var_5 = queue_9.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(var_6)
    queue_15 = module_0.Queue()


def test_case_202():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)


def test_case_203():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    var_4 = queue_4.dequeue()
    node_1 = module_0.Node(bool_0)


def test_case_204():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_2 = queue_0.enqueue(var_1)


def test_case_205():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_1}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    bool_1 = False
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    set_0 = {bool_1, var_4, queue_5, var_4}
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(set_0)
    node_4 = module_0.Node(var_5)
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_206():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_4)
    var_4 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_207():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_1)
    var_6 = queue_5.dequeue()
    assert queue_5.tail is None
    node_1 = module_0.Node(var_6)
    node_2 = module_0.Node(node_1)


def test_case_208():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    var_6 = queue_5.dequeue()


def test_case_209():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_2)
    var_3 = queue_8.dequeue()
    assert queue_8.tail is None
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_5 = module_0.Node(var_3)


def test_case_210():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()


def test_case_211():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_2)
    dict_0 = {var_4: node_4, node_4: str_1, str_1: str_2, queue_8: str_1}
    node_5 = module_0.Node(dict_0)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()


def test_case_212():
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_1)
    var_3 = queue_8.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_3 = module_0.Node(var_4)
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_2)
    var_7 = queue_11.dequeue()
    assert queue_11.tail is None
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    node_7 = module_0.Node(str_0)


def test_case_213():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()


def test_case_214():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(var_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_4)
    var_8 = queue_9.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_11 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_12 = queue_17.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_13 = queue_20.enqueue(str_3)
    dict_0 = {var_13: node_6, node_6: str_2, str_2: str_3, queue_20: str_2}
    node_7 = module_0.Node(dict_0)
    node_8 = module_0.Node(queue_12)


def test_case_215():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_1 = module_0.Node(var_1)
    var_3 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_216():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)


def test_case_217():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_218():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()


def test_case_219():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_5 = queue_12.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_14 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    var_6 = queue_11.dequeue()


def test_case_220():
    queue_0 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    var_3 = queue_5.enqueue(queue_5)


def test_case_221():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()


def test_case_222():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_223():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(node_2)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_0, none_type_0: var_2}
    node_3 = module_0.Node(dict_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    queue_3 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(node_8)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_10)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    node_11 = module_0.Node(var_4)


def test_case_224():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_7 = queue_14.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(str_4)
    dict_0 = {var_8: node_6, node_6: str_3, str_3: str_4, queue_17: str_3}
    node_7 = module_0.Node(dict_0)
    node_8 = module_0.Node(none_type_1)


def test_case_225():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()


def test_case_226():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_3: str_0}
    node_3 = module_0.Node(dict_0)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_5)
    bool_1 = False
    dict_1 = {none_type_1: none_type_1, node_5: bool_1, none_type_1: var_2}
    node_6 = module_0.Node(dict_1)
    queue_6 = module_0.Queue()


def test_case_227():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_2)
    var_2 = queue_3.dequeue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_4)
    queue_9 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_0)
    var_6 = queue_10.dequeue()
    assert queue_10.tail is None
    node_3 = module_0.Node(var_6)
    queue_11 = module_0.Queue()
    var_7 = queue_1.enqueue(none_type_0)


def test_case_228():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_2)
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    node_7 = module_0.Node(var_5)


def test_case_229():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_4 = queue_6.dequeue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_0)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_8 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_9 = queue_11.enqueue(none_type_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_15 = module_0.Queue()
    none_type_4 = None
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(none_type_4)
    queue_17 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(str_4)
    var_12 = queue_18.dequeue()
    assert queue_18.tail is None
    node_6 = module_0.Node(var_12)
    queue_19 = module_0.Queue()


def test_case_230():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(queue_4)


def test_case_231():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    var_3 = queue_2.dequeue()
    bool_1 = False
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    set_0 = {bool_1, var_4, queue_5, var_4}
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(set_0)
    node_2 = module_0.Node(var_5)
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(node_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_4)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_8 = queue_13.dequeue()
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(str_1)
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    none_type_5 = None
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(none_type_5)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    node_8 = module_0.Node(node_7)
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    node_10 = module_0.Node(var_2)


def test_case_232():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(str_0)
    var_10 = queue_14.dequeue()
    assert queue_14.tail is None
    node_3 = module_0.Node(var_10)
    queue_15 = module_0.Queue()
    var_11 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    none_type_2 = None
    queue_19 = module_0.Queue()
    var_12 = queue_19.enqueue(none_type_2)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    var_13 = queue_21.dequeue()
    queue_22 = module_0.Queue()


def test_case_233():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_6 = module_0.Node(bytes_0)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_2)
    var_4 = queue_8.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == "~%25QZ3{"
    node_8 = module_0.Node(bytes_0)


def test_case_234():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_3)
    dict_0 = {var_5: node_1, node_1: str_2, str_2: str_3, queue_6: str_2}
    node_2 = module_0.Node(dict_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_4)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(node_7)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_8 = module_0.Node(none_type_0)


def test_case_235():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_2)
    var_6 = queue_6.dequeue()
    assert queue_6.tail is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_9 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_236():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_2)
    var_3 = queue_2.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_3.dequeue()
    node_1 = module_0.Node(var_4)
    queue_5 = module_0.Queue()


def test_case_237():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_1)
    bool_0 = False
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    set_0 = {bool_0, var_3, queue_3, var_3}
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(set_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(node_7)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_9 = module_0.Queue()


def test_case_238():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_7.dequeue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_0)
    queue_11 = module_0.Queue()


def test_case_239():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_240():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_0)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_4)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_5 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_5)
    var_6 = queue_10.dequeue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_1)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_11 = queue_18.dequeue()
    none_type_6 = None
    queue_21 = module_0.Queue()
    var_12 = queue_21.enqueue(none_type_6)
    queue_22 = module_0.Queue()
    node_5 = module_0.Node(var_8)


def test_case_241():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)


def test_case_242():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()


def test_case_243():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_244():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    var_5 = queue_7.dequeue()
    queue_10 = module_0.Queue()


def test_case_245():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)


def test_case_246():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)


def test_case_247():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()


def test_case_248():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_249():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()


def test_case_250():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)


def test_case_251():
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_3, node_3: str_0, str_0: str_1, queue_2: str_0}
    node_4 = module_0.Node(dict_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_3)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(var_6)
    queue_14 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    set_0 = {node_0}
    dict_1 = {var_2: set_0}
    node_7 = module_0.Node(dict_1)


def test_case_252():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_2)
    var_6 = queue_9.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_3 = None
    queue_18 = module_0.Queue()
    var_8 = queue_18.enqueue(none_type_3)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(node_5)
    var_9 = queue_9.enqueue(queue_17)


def test_case_253():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    var_2 = queue_4.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == "~%25QZ3{"
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    var_5 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_14 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    var_8 = queue_12.enqueue(queue_0)


def test_case_254():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_4.enqueue(var_1)


def test_case_255():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_256():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    queue_4 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_3)
    queue_7 = module_0.Queue()


def test_case_257():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_2)
    queue_9 = module_0.Queue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_2: none_type_2, node_3: bool_0, none_type_2: var_5}
    node_4 = module_0.Node(dict_0)
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_3)
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_1)
    var_8 = queue_13.dequeue()
    assert queue_13.tail is None
    node_5 = module_0.Node(var_8)
    none_type_4 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_4)
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(queue_11)


def test_case_258():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_3)
    dict_0 = {var_5: node_4, node_4: str_2, str_2: str_3, queue_10: str_2}
    node_5 = module_0.Node(dict_0)
    node_6 = module_0.Node(var_2)


def test_case_259():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_5 = module_0.Node(var_7)
    node_6 = module_0.Node(var_0)


def test_case_260():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    node_4 = module_0.Node(node_1)


def test_case_261():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_19 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(str_2)
    none_type_0 = None
    queue_21 = module_0.Queue()
    var_11 = queue_21.enqueue(none_type_0)
    queue_22 = module_0.Queue()


def test_case_262():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_6)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(str_4)
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(var_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_8 = module_0.Node(bytes_0)
    var_6 = queue_9.dequeue()


def test_case_263():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_2)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    queue_9 = module_0.Queue()


def test_case_264():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(str_2)
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(var_7)
    queue_17 = module_0.Queue()
    node_4 = module_0.Node(var_5)
    var_9 = queue_0.enqueue(node_4)


def test_case_265():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    var_3 = queue_0.enqueue(var_2)


def test_case_266():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_2)
    dict_0 = {var_3: node_3, node_3: str_1, str_1: str_2, queue_8: str_1}
    node_4 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_7 = module_0.Node(var_4)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(node_8)
    queue_14 = module_0.Queue()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    node_10 = module_0.Node(str_3)


def test_case_267():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_4: bool_1, none_type_2: var_2}
    node_5 = module_0.Node(dict_0)
    queue_7 = module_0.Queue()


def test_case_268():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    node_1 = module_0.Node(var_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    str_2 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    node_5 = module_0.Node(queue_13)
    var_9 = queue_12.enqueue(node_2)


def test_case_269():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    var_9 = queue_6.dequeue()


def test_case_270():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_271():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_0 = module_0.Node(var_4)


def test_case_272():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_8.dequeue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_7 = queue_18.enqueue(str_2)
    queue_19 = module_0.Queue()
    var_8 = queue_19.enqueue(var_7)
    queue_20 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_21 = module_0.Queue()
    var_9 = queue_21.dequeue()
    queue_22 = module_0.Queue()
    var_10 = queue_22.dequeue()
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    var_11 = queue_23.dequeue()
    queue_26 = module_0.Queue()
    var_12 = queue_19.dequeue()
    assert queue_19.tail is None


def test_case_273():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_1)
    var_6 = queue_9.dequeue()
    assert queue_9.tail is None
    node_1 = module_0.Node(var_6)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(var_7)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_2)
    var_11 = queue_13.dequeue()
    var_12 = queue_15.dequeue()
    assert queue_15.tail is None


def test_case_274():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_6)
    str_3 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_3)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_4)
    queue_10 = module_0.Queue()
    var_6 = queue_9.enqueue(str_3)


def test_case_275():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()


def test_case_276():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_277():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_3)
    queue_7 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_3)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(var_3)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_4 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_5 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(str_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_18 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_19 = module_0.Queue()
    var_8 = queue_16.enqueue(queue_5)


def test_case_278():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)


def test_case_279():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_280():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    var_3 = queue_2.dequeue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_4)
    queue_10 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(str_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_19 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_20 = module_0.Queue()
    bool_2 = True
    var_11 = queue_15.enqueue(bool_2)


def test_case_281():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_3 = module_0.Node(none_type_0)


def test_case_282():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_2 = queue_5.dequeue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_2)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_0, none_type_0: var_3}
    node_3 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_6 = module_0.Node(queue_13)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_7 = module_0.Node(bytes_0)
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(none_type_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_7 = queue_5.enqueue(none_type_2)


def test_case_283():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    var_2 = queue_1.enqueue(queue_0)


def test_case_284():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_285():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(none_type_1)


def test_case_286():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    node_2 = module_0.Node(queue_0)


def test_case_287():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = queue_3.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.dequeue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_9 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_10 = queue_13.dequeue()
    node_4 = module_0.Node(var_9)
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    none_type_3 = None
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(none_type_3)
    queue_17 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_3)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_12 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_13 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    var_14 = queue_20.dequeue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    queue_22 = module_0.Queue()
    var_15 = queue_10.dequeue()


def test_case_288():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    queue_6 = module_0.Queue()
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_4)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    queue_12 = module_0.Queue()
    var_3 = queue_12.enqueue(node_9)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_4 = queue_15.dequeue()


def test_case_289():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_12.dequeue()
    str_0 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(str_0)
    assert (
        f"{type(queue_15.head).__module__}.{type(queue_15.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_15.tail).__module__}.{type(queue_15.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_18 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    var_8 = queue_7.enqueue(node_4)


def test_case_290():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_4 = queue_8.dequeue()
    int_0 = -2838
    tuple_0 = (int_0, var_3)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(tuple_0)


def test_case_291():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_2)
    dict_0 = {var_3: node_1, node_1: str_1, str_1: str_2, queue_4: str_1}
    node_2 = module_0.Node(dict_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_4)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(str_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_292():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(queue_10)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_1)
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_2)
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(var_6)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_293():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_1}
    node_2 = module_0.Node(dict_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_294():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    var_3 = queue_3.dequeue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_0 = module_0.Node(queue_7)
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_17 = module_0.Queue()


def test_case_295():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    node_8 = module_0.Node(node_7)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(node_9)
    var_10 = queue_10.dequeue()


def test_case_296():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_2 = module_0.Node(var_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_2: none_type_2, node_3: bool_0, none_type_2: var_6}
    node_4 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_297():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(var_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(node_4)
    none_type_3 = None
    queue_18 = module_0.Queue()
    var_9 = queue_18.enqueue(none_type_3)
    queue_19 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(str_3)
    var_11 = queue_20.dequeue()
    assert queue_20.tail is None
    node_5 = module_0.Node(var_11)
    queue_21 = module_0.Queue()
    var_12 = queue_21.dequeue()


def test_case_298():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_6 = module_0.Node(bytes_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_9)
    var_6 = queue_7.dequeue()


def test_case_299():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    node_3 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()


def test_case_300():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(var_4)
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_2)
    dict_0 = {var_6: node_1, node_1: str_1, str_1: str_2, queue_12: str_1}
    node_2 = module_0.Node(dict_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_301():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    bool_0 = False
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    set_0 = {bool_0, var_2, queue_4, var_2}
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_6 = module_0.Node(queue_8)
    var_6 = queue_8.dequeue()


def test_case_302():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    bool_2 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_2, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_4 = module_0.Node(var_3)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_5 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    node_6 = module_0.Node(var_5)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_0)
    var_7 = queue_9.enqueue(queue_6)


def test_case_303():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    bool_0 = False
    dict_1 = {none_type_1: none_type_1, node_3: bool_0, none_type_1: var_2}
    node_4 = module_0.Node(dict_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_3)
    var_7 = queue_8.dequeue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    none_type_4 = None
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(none_type_4)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_8 = module_0.Node(queue_17)
    var_11 = queue_1.enqueue(var_5)


def test_case_304():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_5}
    node_2 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_3)
    dict_1 = {var_6: node_3, node_3: str_2, str_2: str_3, queue_8: str_2}
    node_4 = module_0.Node(dict_1)
    node_5 = module_0.Node(var_2)


def test_case_305():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "queue5.Node"
    assert var_2.data == "T;\x0c2OWbraI?GJNJ`c3gh"
    assert var_2.next is None


def test_case_306():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(queue_5)


def test_case_307():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_0 = module_0.Node(var_2)
    node_1 = module_0.Node(var_1)


def test_case_308():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_4 = module_0.Node(var_3)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(str_1)


def test_case_309():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_5)


def test_case_310():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    bool_0 = False
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    set_0 = {bool_0, var_3, queue_3, var_3}
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(set_0)
    node_1 = module_0.Node(var_4)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    var_6 = queue_3.enqueue(var_5)


def test_case_311():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_4)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_5)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_3)
    var_5 = queue_8.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(list_0)


def test_case_312():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(var_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_2)
    var_5 = queue_9.dequeue()
    assert var_5 == "~%25QZ3{"
    assert queue_9.head is None
    assert queue_9.tail is None
    node_3 = module_0.Node(var_5)
    assert node_3.data == "~%25QZ3{"
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_4)
    bool_2 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_2, none_type_1: var_6}
    node_5 = module_0.Node(dict_0)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()


def test_case_313():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_1.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_3)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    node_4 = module_0.Node(var_6)
    var_7 = queue_4.dequeue()


def test_case_314():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    var_7 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_8 = queue_16.dequeue()
    node_6 = module_0.Node(var_7)
    queue_18 = module_0.Queue()
    var_9 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()


def test_case_315():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_316():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(var_5)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(node_2)
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_3)
    queue_14 = module_0.Queue()


def test_case_317():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(node_8)
    queue_18 = module_0.Queue()
    var_9 = queue_6.dequeue()
    assert queue_6.tail is None


def test_case_318():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = queue_9.dequeue()
    var_6 = queue_1.enqueue(queue_5)


def test_case_319():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_1, none_type_1: var_6}
    node_5 = module_0.Node(dict_0)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_10 = queue_19.enqueue(str_3)
    var_11 = queue_19.dequeue()
    assert queue_19.tail is None
    node_6 = module_0.Node(var_7)


def test_case_320():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_5.dequeue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    node_3 = module_0.Node(queue_14)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(str_1)
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(var_6)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_8 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_9 = queue_22.dequeue()
    queue_23 = module_0.Queue()
    var_10 = queue_22.dequeue()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    queue_24 = module_0.Queue()
    node_6 = module_0.Node(none_type_2)


def test_case_321():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_4)
    queue_10 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()


def test_case_322():
    int_0 = 1607
    node_0 = module_0.Node(int_0)


def test_case_323():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()


def test_case_324():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)


def test_case_325():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(queue_9)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(node_5)
    none_type_4 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_4)
    queue_13 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_1)
    var_7 = queue_14.dequeue()
    assert queue_14.tail is None
    node_7 = module_0.Node(var_7)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_9 = module_0.Node(bytes_0)
    queue_15 = module_0.Queue()


def test_case_326():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_2: none_type_2, node_3: bool_0, none_type_2: var_5}
    node_4 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_327():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(queue_0)


def test_case_328():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_3)
    queue_11 = module_0.Queue()


def test_case_329():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_19 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_3: bool_0, none_type_0: var_10}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(var_10)


def test_case_330():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_5 = module_0.Queue()
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_12.dequeue()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_331():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    dict_0 = {var_2: node_4, node_4: str_2, str_2: str_3, queue_5: str_2}
    node_5 = module_0.Node(dict_0)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_8)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_1)


def test_case_332():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()


def test_case_333():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_334():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(var_0)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_4)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(queue_10)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()


def test_case_335():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(list_0)


def test_case_336():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(str_1)
    var_8 = queue_15.dequeue()
    assert queue_15.tail is None
    node_5 = module_0.Node(var_8)
    var_9 = queue_6.dequeue()


def test_case_337():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)


def test_case_338():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_3 = module_0.Node(queue_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    node_5 = module_0.Node(queue_3)


def test_case_339():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(node_4)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_6 = module_0.Node(none_type_0)


def test_case_340():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_7.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    var_7 = queue_5.enqueue(list_0)


def test_case_341():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_3}
    node_2 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    node_9 = module_0.Node(node_8)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_4)
    dict_1 = {var_5: node_10, node_10: str_3, str_3: str_4, queue_13: str_3}
    node_11 = module_0.Node(dict_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    node_13 = module_0.Node(bool_2)
    var_6 = queue_13.enqueue(node_0)


def test_case_342():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_4)
    queue_9 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_8 = module_0.Node(node_1)


def test_case_343():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(queue_8)


def test_case_344():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_345():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_1 = module_0.Node(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_3)
    var_8 = queue_13.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_18 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_21 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_22 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_23 = module_0.Queue()
    var_9 = queue_23.enqueue(str_2)
    queue_24 = module_0.Queue()
    var_10 = queue_24.enqueue(var_9)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    queue_25 = module_0.Queue()
    node_9 = module_0.Node(node_7)


def test_case_346():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    var_2 = queue_4.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_3.dequeue()


def test_case_347():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_1)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_3 = module_0.Node(queue_9)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_2)
    var_8 = queue_12.dequeue()
    assert queue_12.tail is None
    node_4 = module_0.Node(var_8)
    queue_13 = module_0.Queue()


def test_case_348():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    var_3 = queue_3.dequeue()


def test_case_349():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_14 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_15 = module_0.Queue()
    var_9 = queue_10.dequeue()


def test_case_350():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()


def test_case_351():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(str_1)
    var_4 = queue_9.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_9.head is None
    assert queue_9.tail is None
    node_4 = module_0.Node(var_4)
    assert node_4.data == "~%25QZ3{"
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_352():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_2.enqueue(var_4)


def test_case_353():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(queue_3)


def test_case_354():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_4: bool_1, none_type_0: var_3}
    node_5 = module_0.Node(dict_0)
    node_6 = module_0.Node(node_4)


def test_case_355():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(var_0)


def test_case_356():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.dequeue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    node_2 = module_0.Node(node_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    none_type_4 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_4)
    queue_14 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_8.enqueue(list_0)


def test_case_357():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(var_2)


def test_case_358():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_0.enqueue(none_type_0)


def test_case_359():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    var_2 = queue_1.enqueue(var_1)


def test_case_360():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_0 = module_0.Node(queue_8)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_3)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_1, none_type_1: var_6}
    node_4 = module_0.Node(dict_0)
    str_0 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_0)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    var_10 = queue_2.dequeue()


def test_case_361():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_3 = queue_7.dequeue()
    var_4 = queue_3.enqueue(none_type_1)


def test_case_362():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_1.dequeue()
    assert queue_1.head is None
    assert queue_1.tail is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "queue5.Node"
    assert var_1.data is None
    assert var_1.next is None


def test_case_363():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_2)
    var_6 = queue_10.dequeue()
    assert queue_10.tail is None
    node_4 = module_0.Node(var_6)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_1.enqueue(var_2)


def test_case_364():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_4.dequeue()
    assert queue_4.tail is None
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()


def test_case_365():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    bool_1 = False
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    set_0 = {bool_1, var_3, queue_8, var_3}
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(set_0)
    node_3 = module_0.Node(var_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_366():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()


def test_case_367():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == "~%25QZ3{"
    tuple_0 = ()
    var_3 = queue_2.enqueue(tuple_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_368():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    bool_2 = False
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    set_0 = {bool_2, var_1, queue_5, var_1}
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    node_7 = module_0.Node(set_0)


def test_case_369():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_12.enqueue(queue_11)
    var_7 = queue_13.dequeue()


def test_case_370():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)


def test_case_371():
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = queue_9.dequeue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_2 = module_0.Node(queue_11)
    node_3 = module_0.Node(none_type_2)
    queue_13 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(node_5)
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_4 = None
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(none_type_4)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    bool_2 = False
    queue_19 = module_0.Queue()
    var_9 = queue_19.dequeue()
    set_0 = {bool_2, var_9, queue_19, var_9}
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(set_0)
    node_7 = module_0.Node(var_10)
    queue_21 = module_0.Queue()


def test_case_372():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    var_4 = queue_0.dequeue()


def test_case_373():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    var_6 = queue_2.enqueue(node_5)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_374():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_3)
    var_4 = queue_2.dequeue()


def test_case_375():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)


def test_case_376():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_1)
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_1)
    var_4 = queue_8.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(var_7)
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_11 = queue_16.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_12 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    var_13 = queue_20.dequeue()
    var_14 = queue_3.enqueue(queue_12)


def test_case_377():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_9.dequeue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_4.dequeue()


def test_case_378():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    dict_0 = {var_2: node_3, node_3: str_1, str_1: str_2, queue_6: str_1}
    node_4 = module_0.Node(dict_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_5 = module_0.Node(var_3)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_11 = module_0.Queue()


def test_case_379():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    var_3 = queue_4.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == "~%25QZ3{"
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_380():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_1.dequeue()


def test_case_381():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_382():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(queue_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_5 = module_0.Node(queue_5)
    node_6 = module_0.Node(var_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_9 = module_0.Node(var_3)
    var_5 = queue_3.enqueue(var_0)


def test_case_383():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()


def test_case_384():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)


def test_case_385():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    set_0 = {bool_0, var_4, queue_5, var_4}
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(set_0)
    node_1 = module_0.Node(var_5)
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(node_5)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(bool_2)


def test_case_386():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(var_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = queue_4.dequeue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(queue_12)
    node_7 = module_0.Node(none_type_3)
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(node_2)


def test_case_387():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    node_5 = module_0.Node(node_3)


def test_case_388():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_1)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_2 = module_0.Node(queue_12)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_2 = None
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(none_type_2)
    queue_20 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_21 = module_0.Queue()
    var_10 = queue_21.enqueue(str_3)
    var_11 = queue_21.dequeue()
    assert queue_21.tail is None
    node_4 = module_0.Node(var_11)
    str_4 = "~%25QZ3{"
    queue_22 = module_0.Queue()
    var_12 = queue_22.enqueue(str_4)
    queue_23 = module_0.Queue()
    var_13 = queue_23.enqueue(var_12)
    queue_24 = module_0.Queue()
    node_5 = module_0.Node(var_1)


def test_case_389():
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    bool_1 = False
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    set_0 = {bool_1, var_2, queue_7, var_2}
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_2)
    dict_0 = {var_4: node_3, node_3: str_1, str_1: str_2, queue_9: str_1}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(str_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_12.enqueue(queue_11)
    node_10 = module_0.Node(queue_13)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_4)
    var_9 = queue_16.dequeue()
    assert queue_16.tail is None
    node_11 = module_0.Node(var_9)
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(node_12)
    str_6 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(str_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_13 = module_0.Node(list_2)
    queue_20 = module_0.Queue()
    node_14 = module_0.Node(bool_3)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()


def test_case_390():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_6.dequeue()


def test_case_391():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()


def test_case_392():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(node_3)
    queue_6 = module_0.Queue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_10.enqueue(queue_9)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_2)
    var_5 = queue_15.dequeue()
    var_6 = queue_9.enqueue(none_type_0)


def test_case_393():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    queue_5 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_3)
    queue_7 = module_0.Queue()
    bool_0 = False
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    set_0 = {bool_0, var_3, queue_8, var_3}
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(set_0)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_0)
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_4 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_4)
    var_7 = queue_11.dequeue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_6 = module_0.Node(bytes_0)
    var_8 = queue_5.dequeue()


def test_case_394():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    dict_0 = {var_2: node_3, node_3: str_1, str_1: str_2, queue_4: str_1}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()


def test_case_395():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_5 = module_0.Node(queue_11)
    node_6 = module_0.Node(none_type_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(node_8)
    bool_2 = False
    dict_0 = {none_type_5: none_type_5, node_8: bool_2, none_type_5: var_6}
    node_9 = module_0.Node(dict_0)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    node_11 = module_0.Node(bool_3)
    var_7 = queue_13.dequeue()


def test_case_396():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_4 = module_0.Node(queue_11)
    node_5 = module_0.Node(none_type_2)
    bool_0 = False
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    set_0 = {bool_0, var_7, queue_13, var_7}
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(set_0)
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(bool_0)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    node_8 = module_0.Node(queue_15)
    str_2 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(str_2)
    var_11 = queue_16.dequeue()
    assert queue_16.tail is None
    queue_17 = module_0.Queue()


def test_case_397():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_2, node_2: str_0, str_0: str_1, queue_0: str_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_6)
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_7)
    bool_2 = False
    dict_1 = {none_type_1: none_type_1, node_7: bool_2, none_type_1: var_3}
    node_8 = module_0.Node(dict_1)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_10 = module_0.Node(bool_3)
    queue_8 = module_0.Queue()
    var_4 = queue_5.enqueue(str_0)


def test_case_398():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    node_4 = module_0.Node(var_2)
    var_4 = queue_7.enqueue(var_1)


def test_case_399():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(queue_4)
    queue_6 = module_0.Queue()


def test_case_400():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    node_4 = module_0.Node(queue_3)


def test_case_401():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_4 = module_0.Node(var_4)
    var_6 = queue_2.dequeue()


def test_case_402():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_1 = False
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    set_0 = {bool_1, var_4, queue_12, var_4}
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(set_0)
    node_3 = module_0.Node(var_5)
    str_2 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_3)
    var_7 = queue_14.dequeue()
    assert queue_14.tail is None
    queue_15 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    var_8 = queue_8.dequeue()


def test_case_403():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    bool_1 = False
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    set_0 = {bool_1, var_0, queue_2, var_0}
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_6)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_4)
    var_5 = queue_6.dequeue()
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_0)
    var_7 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    none_type_5 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_5)
    bool_3 = False
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    set_1 = {bool_3, var_9, queue_12, var_9}
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(set_1)
    node_8 = module_0.Node(var_10)
    node_9 = module_0.Node(bool_3)
    queue_14 = module_0.Queue()
    var_11 = queue_14.dequeue()
    node_10 = module_0.Node(queue_14)
    node_11 = module_0.Node(var_11)
    var_12 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_404():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_3.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_1)
    var_7 = queue_11.dequeue()
    assert queue_11.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_11 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_12 = queue_19.dequeue()
    node_4 = module_0.Node(var_11)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_21 = module_0.Queue()


def test_case_405():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_1)
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    none_type_4 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_4)
    bool_0 = False
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    set_0 = {bool_0, var_8, queue_14, var_8}
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(set_0)
    node_3 = module_0.Node(var_9)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_5: none_type_5, node_4: bool_1, none_type_5: var_10}
    node_5 = module_0.Node(dict_0)
    queue_17 = module_0.Queue()
    var_11 = queue_17.dequeue()
    var_12 = queue_16.enqueue(node_4)


def test_case_406():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_1, str_1: str_2, queue_1: str_1}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_1)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_6)
    bool_0 = False
    dict_1 = {none_type_0: none_type_0, node_6: bool_0, none_type_0: var_2}
    node_7 = module_0.Node(dict_1)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_3)
    var_8 = queue_12.dequeue()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    none_type_5 = None
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(none_type_5)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_0)
    var_10 = queue_17.dequeue()
    none_type_6 = None
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(none_type_6)
    queue_19 = module_0.Queue()
    str_5 = ",O$"
    node_11 = module_0.Node(str_5)


def test_case_407():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert queue_1.head is None
    assert queue_1.tail is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "queue5.Queue"
    assert var_1.head is None
    assert var_1.tail is None


def test_case_408():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    bool_1 = False
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    set_0 = {bool_1, var_1, queue_6, var_1}
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bool_1)
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    var_4 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(queue_12)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    node_7 = module_0.Node(queue_15)


def test_case_409():
    int_0 = 1992
    node_0 = module_0.Node(int_0)


def test_case_410():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    dict_0 = {var_1: node_0, node_0: str_1, str_1: str_2, queue_1: str_1}
    node_1 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_3)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_4)
    bool_0 = False
    dict_1 = {none_type_1: none_type_1, node_4: bool_0, none_type_1: var_3}
    node_5 = module_0.Node(dict_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_4)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.enqueue(node_2)


def test_case_411():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)


def test_case_412():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    set_0 = {bool_1, var_1, queue_4, var_1}
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(set_0)
    node_4 = module_0.Node(var_2)
    node_5 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(node_8)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(node_9)
    bool_3 = False
    dict_0 = {none_type_2: none_type_2, node_9: bool_3, none_type_2: var_5}
    node_10 = module_0.Node(dict_0)
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    var_6 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_413():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    bool_2 = False
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    set_0 = {bool_2, var_0, queue_3, var_0}
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(set_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_1)
    node_6 = module_0.Node(bool_2)
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.enqueue(queue_5)
    node_9 = module_0.Node(queue_7)
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_3 = queue_6.enqueue(var_1)


def test_case_414():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    var_4 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_1 = module_0.Node(var_4)


def test_case_415():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_2: str_0}
    node_2 = module_0.Node(dict_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    int_0 = 1992
    node_6 = module_0.Node(int_0)
    var_3 = queue_1.dequeue()


def test_case_416():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_5)


def test_case_417():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_3 = queue_13.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    str_4 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_4 = queue_14.enqueue(str_4)
    var_5 = queue_14.dequeue()
    assert queue_14.tail is None
    node_10 = module_0.Node(queue_8)


def test_case_418():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_1, str_1: str_2, queue_1: str_1}
    node_3 = module_0.Node(dict_0)
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    queue_2 = module_0.Queue()
    str_5 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_5)
    var_3 = queue_3.dequeue()
    assert queue_3.tail is None
    node_6 = module_0.Node(bytes_0)


def test_case_419():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    node_0 = module_0.Node(queue_4)


def test_case_420():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_3)
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    var_5 = queue_6.enqueue(str_0)


def test_case_421():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.enqueue(queue_5)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    node_2 = module_0.Node(queue_8)
    node_3 = module_0.Node(var_3)
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_1)
    var_5 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(node_7)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_7 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_8 = queue_16.dequeue()
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    queue_18 = module_0.Queue()
    int_1 = 1607
    node_9 = module_0.Node(int_1)
    queue_19 = module_0.Queue()
    var_9 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_10 = queue_19.dequeue()
    node_10 = module_0.Node(var_9)
    var_11 = queue_12.enqueue(queue_1)


def test_case_422():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(var_4)
    complex_0 = -1428.8 + 565j
    var_6 = queue_8.enqueue(complex_0)


def test_case_423():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)


def test_case_424():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_425():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    var_4 = queue_3.dequeue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    node_2 = module_0.Node(queue_8)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(var_4)


def test_case_426():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)


def test_case_427():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_3)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_3: bool_0, none_type_0: var_3}
    node_4 = module_0.Node(dict_0)
    bool_1 = False
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    set_0 = {bool_1, var_4, queue_7, var_4}
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(set_0)
    node_5 = module_0.Node(var_5)
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_1)
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(var_6)
    bool_2 = False
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    set_1 = {bool_2, var_8, queue_11, var_8}
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(set_1)
    node_6 = module_0.Node(var_9)
    node_7 = module_0.Node(bool_2)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(var_0)


def test_case_428():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_10.dequeue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    int_0 = 1992
    node_6 = module_0.Node(int_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(node_7)
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_4 = None
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(none_type_4)
    var_12 = queue_16.dequeue()
    str_1 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_13 = queue_19.enqueue(str_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_20 = module_0.Queue()
    node_9 = module_0.Node(bool_2)
    queue_21 = module_0.Queue()
    var_14 = queue_15.enqueue(var_12)


def test_case_429():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_1)
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_430():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_2, node_2: str_1, str_1: str_2, queue_1: str_1}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_1)
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    bool_1 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_1, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    node_6 = module_0.Node(var_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_9 = module_0.Queue()


def test_case_431():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_2)
    bool_0 = False
    dict_0 = {none_type_2: none_type_2, node_2: bool_0, none_type_2: var_4}
    node_3 = module_0.Node(dict_0)
    bool_1 = False
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    set_0 = {bool_1, var_5, queue_7, var_5}
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(set_0)
    node_4 = module_0.Node(var_6)
    var_7 = queue_7.enqueue(none_type_1)


def test_case_432():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    node_0 = module_0.Node(var_3)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_3 = module_0.Node(queue_7)
    node_4 = module_0.Node(var_5)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_10.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_16 = module_0.Queue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(str_3)
    dict_0 = {var_10: node_8, node_8: str_2, str_2: str_3, queue_17: str_2}
    node_9 = module_0.Node(dict_0)
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(dict_0)


def test_case_433():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()


def test_case_434():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()


def test_case_435():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_2)
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    node_5 = module_0.Node(var_4)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_6)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    var_8 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_436():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(var_2)
    assert node_6.data == "~%25QZ3{"


def test_case_437():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(node_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_1 = queue_8.enqueue(str_1)
    var_2 = queue_8.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    node_7 = module_0.Node(queue_11)
    node_8 = module_0.Node(var_4)
    bool_3 = False
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    set_0 = {bool_3, var_5, queue_12, var_5}
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(set_0)
    node_9 = module_0.Node(var_6)
    node_10 = module_0.Node(bool_3)
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_1)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_11 = module_0.Node(list_3)
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    node_13 = module_0.Node(node_12)
    node_14 = module_0.Node(bool_1)


def test_case_438():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_439():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_5 = module_0.Node(node_4)


def test_case_440():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()


def test_case_441():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_0, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_2 = module_0.Node(var_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(var_5)
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_9 = queue_11.dequeue()
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    node_3 = module_0.Node(queue_14)
    node_4 = module_0.Node(var_10)
    str_3 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_11 = queue_15.enqueue(str_3)
    queue_16 = module_0.Queue()
    var_12 = queue_16.enqueue(var_11)
    queue_17 = module_0.Queue()
    node_5 = module_0.Node(str_3)


def test_case_442():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)


def test_case_443():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(list_1)


def test_case_444():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_0)
    int_1 = 1992
    node_7 = module_0.Node(int_1)
    bool_2 = False
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    set_0 = {bool_2, var_2, queue_7, var_2}
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(set_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    node_8 = module_0.Node(var_3)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(str_2)
    var_5 = queue_11.dequeue()
    assert queue_11.tail is None
    queue_12 = module_0.Queue()


def test_case_445():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_0)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(queue_9)
    node_4 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()


def test_case_446():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_0, none_type_1: var_2}
    node_4 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    dict_1 = {var_3: node_5, node_5: str_0, str_0: str_1, queue_3: str_0}
    node_6 = module_0.Node(dict_1)
    var_4 = queue_3.enqueue(node_1)


def test_case_447():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_1: str_0}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_4)
    str_5 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_5)
    dict_1 = {var_5: node_8, node_8: str_4, str_4: str_5, queue_8: str_4}
    node_9 = module_0.Node(dict_1)
    queue_9 = module_0.Queue()


def test_case_448():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)


def test_case_449():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_2)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    node_4 = module_0.Node(var_6)
    queue_9 = module_0.Queue()


def test_case_450():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_1)
    var_2 = queue_5.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == "~%25QZ3{"
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(str_2)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    var_3 = queue_3.enqueue(node_4)


def test_case_451():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(node_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_4 = queue_10.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_5 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_6 = queue_15.dequeue()
    none_type_2 = None
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(none_type_2)
    queue_18 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(var_0)


def test_case_452():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    node_3 = module_0.Node(var_3)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(bool_3)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_10)
    str_3 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(str_3)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(var_8)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.dequeue()


def test_case_453():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_3)
    queue_8 = module_0.Queue()


def test_case_454():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)


def test_case_455():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_4)
    node_4 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_6)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(str_2)
    var_4 = queue_9.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_9.head is None
    assert queue_9.tail is None
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_4)
    dict_0 = {var_5: node_7, node_7: str_3, str_3: str_4, queue_10: str_3}
    node_8 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(bool_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_2 = None
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(none_type_2)
    queue_18 = module_0.Queue()
    str_5 = "1Yd=9eK W+Bj:"
    node_11 = module_0.Node(str_5)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_8 = queue_20.dequeue()
    bool_1 = False
    queue_21 = module_0.Queue()
    var_9 = queue_21.dequeue()
    set_0 = {bool_1, var_9, queue_21, var_9}
    queue_22 = module_0.Queue()
    var_10 = queue_22.enqueue(set_0)
    node_12 = module_0.Node(var_10)
    queue_23 = module_0.Queue()


def test_case_456():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    node_2 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    int_1 = 1992
    node_5 = module_0.Node(int_1)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_12.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    none_type_1 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_13.dequeue()


def test_case_457():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_6 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_7 = queue_17.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_19 = module_0.Queue()
    none_type_0 = None
    queue_20 = module_0.Queue()
    var_8 = queue_20.enqueue(none_type_0)
    queue_21 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_3)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()


def test_case_458():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.dequeue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_459():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_6.dequeue()
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(str_0)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.enqueue(queue_10)
    node_8 = module_0.Node(queue_12)
    node_9 = module_0.Node(var_1)


def test_case_460():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_2 = module_0.Node(var_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_2)
    dict_0 = {var_3: node_3, node_3: str_1, str_1: str_2, queue_5: str_1}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(str_1)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_6)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_10.dequeue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    queue_13 = module_0.Queue()


def test_case_461():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(queue_3)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_1)
    var_5 = queue_10.dequeue()
    assert queue_10.tail is None
    var_6 = queue_10.dequeue()


def test_case_462():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_2)
    bool_0 = False
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    set_0 = {bool_0, var_3, queue_4, var_3}
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(set_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_4)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_13.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_11 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_21 = module_0.Queue()
    node_6 = module_0.Node(var_4)


def test_case_463():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_8)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_7)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(queue_7)


def test_case_464():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_8 = module_0.Queue()


def test_case_465():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_3 = queue_13.enqueue(str_4)
    dict_0 = {var_3: node_8, node_8: str_3, str_3: str_4, queue_13: str_3}
    node_9 = module_0.Node(dict_0)
    queue_14 = module_0.Queue()
    var_4 = queue_14.dequeue()
    var_5 = queue_4.enqueue(var_1)


def test_case_466():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_1, str_1: str_2, queue_2: str_1}
    node_2 = module_0.Node(dict_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    str_4 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_4)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_5)
    str_6 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_6)
    dict_1 = {var_7: node_4, node_4: str_5, str_5: str_6, queue_12: str_5}
    node_5 = module_0.Node(dict_1)
    node_6 = module_0.Node(str_5)
    str_7 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(bool_0)
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    str_8 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_8)
    queue_17 = module_0.Queue()
    var_9 = queue_7.enqueue(queue_0)


def test_case_467():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_0)
    var_2 = queue_5.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_4 = module_0.Node(queue_8)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_0 = {queue_2}
    node_9 = module_0.Node(set_0)


def test_case_468():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_469():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_1)
    var_2 = queue_3.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_3 = module_0.Node(var_4)
    queue_12 = module_0.Queue()


def test_case_470():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)


def test_case_471():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_7.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(node_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_1)
    var_7 = queue_8.dequeue()


def test_case_472():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_2)
    dict_0 = {var_1: node_2, node_2: str_1, str_1: str_2, queue_3: str_1}
    node_3 = module_0.Node(dict_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    node_5 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_3)
    var_7 = queue_11.dequeue()
    assert queue_11.tail is None
    node_6 = module_0.Node(var_7)
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_4)
    str_5 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_5)
    dict_1 = {var_9: node_7, node_7: str_4, str_4: str_5, queue_15: str_4}
    node_8 = module_0.Node(dict_1)
    node_9 = module_0.Node(str_4)
    str_6 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_6)
    queue_16 = module_0.Queue()
    var_10 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_11 = queue_16.dequeue()
    node_11 = module_0.Node(var_10)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_12 = module_0.Node(list_0)
    queue_18 = module_0.Queue()
    node_13 = module_0.Node(bool_0)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_12 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_473():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_4)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_4 = queue_2.dequeue()


def test_case_474():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_7 = module_0.Node(node_2)


def test_case_475():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(str_3)
    dict_0 = {var_4: node_5, node_5: str_2, str_2: str_3, queue_13: str_2}
    node_6 = module_0.Node(dict_0)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_14.dequeue()
    node_7 = module_0.Node(none_type_0)
    var_7 = queue_7.enqueue(node_7)


def test_case_476():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    var_3 = queue_5.dequeue()
    var_4 = queue_5.enqueue(bool_0)


def test_case_477():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    var_2 = queue_4.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.enqueue(queue_5)
    node_5 = module_0.Node(queue_7)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_8 = module_0.Node(var_4)
    queue_11 = module_0.Queue()


def test_case_478():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_1)
    var_2 = queue_5.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(str_2)
    bool_3 = False
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    set_0 = {bool_3, var_3, queue_9, var_3}
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(set_0)
    node_8 = module_0.Node(var_4)
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_12.enqueue(queue_11)
    node_11 = module_0.Node(queue_13)
    complex_0 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()


def test_case_479():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)


def test_case_480():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_1)


def test_case_481():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_4)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    var_3 = queue_1.dequeue()


def test_case_482():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_5 = queue_12.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    queue_16 = module_0.Queue()


def test_case_483():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_1 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_1, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_5 = module_0.Node(var_3)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_7)
    bool_2 = False
    dict_0 = {none_type_2: none_type_2, node_7: bool_2, none_type_2: var_7}
    node_8 = module_0.Node(dict_0)
    queue_12 = module_0.Queue()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    node_10 = module_0.Node(bool_3)
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_3)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_11 = module_0.Node(queue_15)
    node_12 = module_0.Node(none_type_3)
    var_9 = queue_8.dequeue()


def test_case_484():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(str_1)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_2)
    var_7 = queue_11.dequeue()
    assert queue_11.tail is None
    node_4 = module_0.Node(var_7)
    queue_12 = module_0.Queue()


def test_case_485():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    bool_0 = False
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    set_0 = {bool_0, var_3, queue_3, var_3}
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(set_0)
    node_1 = module_0.Node(var_4)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_4)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_8 = module_0.Node(bool_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(queue_10)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    var_7 = queue_14.dequeue()


def test_case_486():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_6)
    node_3 = module_0.Node(queue_8)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(queue_10)
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(var_1)


def test_case_487():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(node_5)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_1 = 1607
    node_6 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_488():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(var_5)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(node_4)
    bool_2 = False
    dict_0 = {none_type_2: none_type_2, node_4: bool_2, none_type_2: var_7}
    node_5 = module_0.Node(dict_0)
    queue_10 = module_0.Queue()


def test_case_489():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)


def test_case_490():
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    set_0 = {bool_1, var_3, queue_9, var_3}
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(set_0)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_1)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    node_9 = module_0.Node(queue_14)
    var_6 = queue_4.dequeue()


def test_case_491():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    set_0 = {bool_0, var_1, queue_1, var_1}
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(set_0)
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_1)
    str_0 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()


def test_case_492():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_6 = module_0.Node(queue_15)
    node_7 = module_0.Node(none_type_1)
    node_8 = module_0.Node(bool_0)


def test_case_493():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.enqueue(node_2)


def test_case_494():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_5)
    node_5 = module_0.Node(queue_7)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_7)
    int_2 = -4556
    node_8 = module_0.Node(int_2)
    queue_10 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_11.enqueue(queue_10)
    queue_13 = module_0.Queue()


def test_case_495():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_3)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_2)
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()


def test_case_496():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    node_7 = module_0.Node(queue_12)
    node_8 = module_0.Node(var_5)
    queue_13 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(node_10)
    queue_15 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_2)
    none_type_2 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_2)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_12 = module_0.Node(var_5)


def test_case_497():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_1 = module_0.Node(var_3)


def test_case_498():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    bool_0 = False
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    set_0 = {bool_0, var_5, queue_8, var_5}
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(set_0)
    node_1 = module_0.Node(var_6)
    node_2 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_1)
    dict_0 = {var_8: node_4, node_4: str_0, str_0: str_1, queue_13: str_0}
    node_5 = module_0.Node(dict_0)
    node_6 = module_0.Node(node_5)


def test_case_499():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)


def test_case_500():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_3 = module_0.Node(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_4 = queue_2.dequeue()


def test_case_501():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_16 = module_0.Queue()
    node_4 = module_0.Node(var_0)


def test_case_502():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)


def test_case_503():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_5)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(queue_5)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_504():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    dict_0 = {var_1: node_0, node_0: str_0, str_0: str_1, queue_2: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    var_4 = queue_0.enqueue(queue_1)


def test_case_505():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    bool_0 = False
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    set_0 = {bool_0, var_2, queue_6, var_2}
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(set_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_3)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = queue_2.dequeue()


def test_case_506():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    int_1 = 1992
    node_1 = module_0.Node(int_1)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()


def test_case_507():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()


def test_case_508():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_509():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_5)
    var_5 = queue_6.enqueue(var_4)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_0)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(node_5)
    queue_18 = module_0.Queue()
    node_6 = module_0.Node(queue_18)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_10 = queue_10.dequeue()


def test_case_510():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.enqueue(queue_7)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_1)
    node_5 = module_0.Node(str_1)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(queue_12)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_10 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_11 = queue_19.dequeue()
    queue_22 = module_0.Queue()


def test_case_511():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_1}
    node_2 = module_0.Node(dict_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_2)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(var_1)


def test_case_512():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    node_0 = module_0.Node(queue_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_9 = queue_11.enqueue(str_3)
    var_10 = queue_11.dequeue()
    assert queue_11.tail is None
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_11 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_4)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_12 = queue_15.dequeue()
    bool_0 = False
    queue_16 = module_0.Queue()
    var_13 = queue_16.dequeue()
    set_0 = {bool_0, var_13, queue_16, var_13}
    queue_17 = module_0.Queue()
    var_14 = queue_17.enqueue(set_0)
    node_4 = module_0.Node(var_14)
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(queue_17)
    var_15 = queue_3.dequeue()


def test_case_513():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    node_8 = module_0.Node(bool_3)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_11.enqueue(str_0)
    node_9 = module_0.Node(var_6)


def test_case_514():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_1 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_2 = queue_8.dequeue()
    node_6 = module_0.Node(var_1)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(var_3)
    queue_12 = module_0.Queue()
    var_5 = queue_11.enqueue(queue_11)
    var_6 = queue_12.enqueue(var_5)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_2)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_3)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_515():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_2}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_1)


def test_case_516():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    int_1 = -4556
    node_1 = module_0.Node(int_1)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_0, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_8)
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(queue_8)
    str_4 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_4)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_5)
    str_6 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_6)
    dict_0 = {var_4: node_11, node_11: str_5, str_5: str_6, queue_9: str_5}
    node_12 = module_0.Node(dict_0)
    node_13 = module_0.Node(str_5)
    bool_1 = False
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    set_1 = {bool_1, var_5, queue_10, var_5}
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(set_1)
    node_14 = module_0.Node(var_6)
    node_15 = module_0.Node(bool_1)
    node_16 = module_0.Node(queue_11)
    node_17 = module_0.Node(queue_11)


def test_case_517():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    var_2 = queue_1.dequeue()
    assert queue_1.head is None
    assert queue_1.tail is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "queue5.Node"
    assert var_2.data == "T;\x0c2OWbraI?GJNJ`c3gh"
    assert var_2.next is None


def test_case_518():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)


def test_case_519():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)


def test_case_520():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_7 = module_0.Queue()


def test_case_521():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()


def test_case_522():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    node_0 = module_0.Node(queue_5)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    dict_0 = {var_4: node_1, node_1: str_0, str_0: str_1, queue_6: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(var_2)


def test_case_523():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.enqueue(queue_2)
    var_3 = queue_3.enqueue(str_0)


def test_case_524():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()


def test_case_525():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_1 = queue_9.enqueue(none_type_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(node_7)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_7: bool_1, none_type_2: var_2}
    node_8 = module_0.Node(dict_0)
    node_9 = module_0.Node(queue_6)


def test_case_526():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()


def test_case_527():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_0 = module_0.Node(queue_7)
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(queue_6)


def test_case_528():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)


def test_case_529():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()


def test_case_530():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    bool_0 = False
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    set_0 = {bool_0, var_1, queue_4, var_1}
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()


def test_case_531():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_0 = module_0.Node(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_1)
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_2)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_0, none_type_0: var_7}
    node_3 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(str_3)
    dict_1 = {var_8: node_4, node_4: str_2, str_2: str_3, queue_11: str_2}
    node_5 = module_0.Node(dict_1)
    node_6 = module_0.Node(str_2)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(node_2)


def test_case_532():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    node_1 = module_0.Node(node_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_3)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()


def test_case_533():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)


def test_case_534():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_535():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_3 = module_0.Node(var_1)


def test_case_536():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(node_5)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_15 = module_0.Queue()
    node_8 = module_0.Node(bool_0)
    queue_16 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_6 = queue_4.enqueue(node_7)


def test_case_537():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    var_2 = queue_2.dequeue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_1)
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    set_0 = {bool_0, var_7, queue_11, var_7}
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(set_0)
    node_3 = module_0.Node(var_8)
    node_4 = module_0.Node(var_1)


def test_case_538():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_0 = module_0.Node(var_1)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_2)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_7 = module_0.Node(bytes_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_1 = b"\x95\xd2VW\xc3\x8d\x12;9M"
    node_8 = module_0.Node(bytes_1)


def test_case_539():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(queue_4)
    node_7 = module_0.Node(none_type_0)
    var_3 = queue_5.enqueue(none_type_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_6 = module_0.Queue()


def test_case_540():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_541():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_542():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    var_6 = queue_7.enqueue(var_5)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_8 = queue_8.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_5)
    queue_13 = module_0.Queue()
    node_9 = module_0.Node(str_5)
    queue_14 = module_0.Queue()


def test_case_543():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_6 = queue_5.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_8 = queue_9.dequeue()
    node_2 = module_0.Node(var_8)
    var_9 = queue_3.enqueue(var_3)
    node_3 = module_0.Node(var_9)


def test_case_544():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_545():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    node_0 = module_0.Node(var_4)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_4: bool_1, none_type_2: var_7}
    node_5 = module_0.Node(dict_0)
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(node_7)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    node_10 = module_0.Node(str_1)
    none_type_5 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_5)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_546():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_1 = module_0.Node(var_4)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_2 = module_0.Node(var_5)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(str_0)
    assert (
        f"{type(queue_13.head).__module__}.{type(queue_13.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_13.tail).__module__}.{type(queue_13.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(var_9)
    queue_15 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(str_2)
    dict_0 = {var_11: node_4, node_4: str_1, str_1: str_2, queue_16: str_1}
    node_5 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_17 = module_0.Queue()
    node_7 = module_0.Node(bool_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_12 = queue_19.dequeue()
    node_8 = module_0.Node(queue_19)
    queue_20 = module_0.Queue()


def test_case_547():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(var_0)
    queue_5 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_4)
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()


def test_case_548():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)


def test_case_549():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_0)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    node_0 = module_0.Node(var_5)
    var_6 = queue_2.dequeue()


def test_case_550():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(queue_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_551():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_7)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_11)
    queue_10 = module_0.Queue()
    node_12 = module_0.Node(queue_10)
    bool_2 = False
    node_13 = module_0.Node(bool_2)
    var_5 = queue_1.enqueue(node_2)


def test_case_552():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)


def test_case_553():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    var_1 = queue_0.dequeue()


def test_case_554():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_2 = module_0.Node(var_4)
    list_0 = [queue_5]
    node_3 = module_0.Node(list_0)


def test_case_555():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_8.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_12 = module_0.Queue()
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    queue_13 = module_0.Queue()


def test_case_556():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_0, none_type_0: var_0}
    node_3 = module_0.Node(dict_0)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_7 = module_0.Node(list_0)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_6)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_11 = module_0.Node(bool_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    node_12 = module_0.Node(queue_12)
    node_13 = module_0.Node(var_4)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_1)
    var_6 = queue_0.dequeue()


def test_case_557():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_5)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_558():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_8 = module_0.Node(node_7)
    bytes_1 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_1)
    node_10 = module_0.Node(node_4)


def test_case_559():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)


def test_case_560():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    var_5 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.enqueue(queue_7)
    node_5 = module_0.Node(queue_9)
    bool_1 = False
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    set_0 = {bool_1, var_7, queue_10, var_7}
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(set_0)
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(queue_11)
    int_1 = -4556
    node_9 = module_0.Node(int_1)
    queue_12 = module_0.Queue()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    node_11 = module_0.Node(node_10)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_1)
    node_13 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()


def test_case_561():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)


def test_case_562():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    none_type_3 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_3)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_5 = module_0.Node(var_4)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    node_6 = module_0.Node(var_5)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_13.dequeue()
    queue_16 = module_0.Queue()


def test_case_563():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_7 = queue_14.dequeue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    int_2 = 1607
    node_6 = module_0.Node(int_2)
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_7 = module_0.Node(queue_17)
    node_8 = module_0.Node(none_type_1)
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(var_5)


def test_case_564():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()


def test_case_565():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    tuple_0 = (node_0, var_0, var_0, var_0)
    node_3 = module_0.Node(tuple_0)


def test_case_566():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_7 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    node_8 = module_0.Node(queue_13)
    node_9 = module_0.Node(var_6)
    node_10 = module_0.Node(queue_13)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_10 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_11 = queue_19.dequeue()
    node_11 = module_0.Node(none_type_1)


def test_case_567():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_0)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_1 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_2 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_3 = queue_10.dequeue()
    bool_2 = False
    node_9 = module_0.Node(bool_2)
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    node_10 = module_0.Node(queue_14)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_568():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(node_3)
    var_2 = queue_5.dequeue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_3.enqueue(queue_10)


def test_case_569():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(node_2)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_1, none_type_1: var_3}
    node_3 = module_0.Node(dict_0)
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()


def test_case_570():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_3)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_6)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_4)
    str_5 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_5)
    dict_1 = {var_5: node_9, node_9: str_4, str_4: str_5, queue_10: str_4}
    node_10 = module_0.Node(dict_1)
    node_11 = module_0.Node(str_4)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_16 = module_0.Queue()
    int_0 = -4556
    node_12 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_10 = queue_17.dequeue()
    node_13 = module_0.Node(var_10)
    queue_19 = module_0.Queue()


def test_case_571():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_2 = module_0.Node(list_0)
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_4: bool_1, none_type_0: var_3}
    node_5 = module_0.Node(dict_0)
    queue_7 = module_0.Queue()


def test_case_572():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_2 = "f0!k"
    node_2 = module_0.Node(str_2)


def test_case_573():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_1)
    var_6 = queue_9.dequeue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(var_7)
    queue_13 = module_0.Queue()
    var_9 = queue_12.enqueue(queue_12)
    var_10 = queue_13.enqueue(var_9)
    queue_14 = module_0.Queue()
    var_11 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_18 = module_0.Queue()
    var_12 = queue_18.dequeue()
    str_3 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_13 = queue_19.enqueue(str_3)
    var_14 = queue_19.dequeue()
    assert queue_19.tail is None
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_4)
    queue_20 = module_0.Queue()
    node_5 = module_0.Node(node_4)


def test_case_574():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()


def test_case_575():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    dict_1 = {var_2: node_3, node_3: str_2, str_2: str_3, queue_5: str_2}
    node_4 = module_0.Node(dict_1)
    node_5 = module_0.Node(str_2)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(node_6)
    str_4 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_4)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_5)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_6.dequeue()
    assert queue_6.tail is None


def test_case_576():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(queue_8)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    node_5 = module_0.Node(var_0)


def test_case_577():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    bool_0 = False
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    set_0 = {bool_0, var_3, queue_6, var_3}
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(set_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(node_4)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.dequeue()
    node_5 = module_0.Node(var_6)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(str_1)
    node_6 = module_0.Node(queue_3)


def test_case_578():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    node_1 = module_0.Node(queue_8)
    node_2 = module_0.Node(var_3)
    node_3 = module_0.Node(queue_8)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_579():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_0, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    var_4 = queue_3.dequeue()


def test_case_580():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_4)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(var_4)
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(queue_1)


def test_case_581():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_0 = module_0.Node(queue_4)
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(queue_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_5 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_6 = module_0.Node(var_4)
    bool_1 = False
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    set_0 = {bool_1, var_5, queue_9, var_5}
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(set_0)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    node_7 = module_0.Node(var_6)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(var_4)


def test_case_582():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_3)
    queue_6 = module_0.Queue()


def test_case_583():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_584():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_4)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_4)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_7)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    var_6 = queue_11.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_2)
    queue_12 = module_0.Queue()


def test_case_585():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_0}
    node_2 = module_0.Node(dict_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(queue_2)


def test_case_586():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    none_type_3 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(queue_12)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    node_9 = module_0.Node(node_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    node_11 = module_0.Node(none_type_4)


def test_case_587():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_7)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)


def test_case_588():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(queue_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    var_4 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_5 = module_0.Node(queue_7)
    node_6 = module_0.Node(var_5)
    node_7 = module_0.Node(queue_7)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_2)
    dict_0 = {var_6: node_9, node_9: str_1, str_1: str_2, queue_9: str_1}
    node_10 = module_0.Node(dict_0)
    int_1 = 1992
    node_11 = module_0.Node(int_1)
    queue_10 = module_0.Queue()


def test_case_589():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()


def test_case_590():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_2 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_2, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    node_3 = module_0.Node(none_type_0)


def test_case_591():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_0)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_2}
    node_1 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_4)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_5)
    var_5 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    node_6 = module_0.Node(queue_7)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(var_6)


def test_case_592():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_0)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_0: bool_0, none_type_1: var_1}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_4 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(queue_9)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    bool_2 = False
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    set_0 = {bool_2, var_4, queue_11, var_4}
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(queue_12)
    queue_13 = module_0.Queue()


def test_case_593():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)


def test_case_594():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_595():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_0 = module_0.Node(queue_2)
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    var_3 = queue_4.dequeue()


def test_case_596():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_3)
    dict_0 = {var_5: node_4, node_4: str_2, str_2: str_3, queue_11: str_2}
    node_5 = module_0.Node(dict_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_7 = module_0.Node(queue_14)
    node_8 = module_0.Node(none_type_2)
    var_8 = queue_11.enqueue(queue_4)


def test_case_597():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(queue_0)
    node_2 = module_0.Node(var_0)
    node_3 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    var_1 = queue_0.dequeue()


def test_case_598():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(node_4)
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    node_5 = module_0.Node(queue_11)
    node_6 = module_0.Node(var_3)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(queue_12)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(str_2)
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(none_type_0)
    queue_16 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(str_3)
    var_8 = queue_17.dequeue()
    assert queue_17.tail is None
    node_9 = module_0.Node(var_8)
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    var_9 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_10 = queue_18.dequeue()
    node_11 = module_0.Node(queue_14)


def test_case_599():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_600():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    queue_7 = module_0.Queue()


def test_case_601():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_602():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    var_4 = queue_6.dequeue()


def test_case_603():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(node_0)


def test_case_604():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_6 = queue_10.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_4)
    queue_14 = module_0.Queue()
    node_5 = module_0.Node(queue_14)
    node_6 = module_0.Node(none_type_0)


def test_case_605():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_4)
    bool_0 = False
    dict_1 = {none_type_1: none_type_1, node_4: bool_0, none_type_1: var_2}
    node_5 = module_0.Node(dict_1)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_0.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None


def test_case_606():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    node_3 = module_0.Node(none_type_2)
    bool_1 = False
    var_4 = queue_6.enqueue(bool_1)


def test_case_607():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_0}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_3 = module_0.Node(queue_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_1)
    dict_1 = {var_2: node_4, node_4: str_0, str_0: str_1, queue_3: str_0}
    node_5 = module_0.Node(dict_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_6 = module_0.Node(var_3)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(var_1)


def test_case_608():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    dict_0 = {var_2: node_1, node_1: str_1, str_1: str_2, queue_3: str_1}
    node_2 = module_0.Node(dict_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_4)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_13.dequeue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_5)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_16.dequeue()


def test_case_609():
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    set_0 = {bool_1, var_1, queue_6, var_1}
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(set_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    node_10 = module_0.Node(list_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_11 = module_0.Node(list_2)
    node_12 = module_0.Node(bool_3)
    queue_11 = module_0.Queue()
    var_4 = queue_5.dequeue()


def test_case_610():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_3 = module_0.Node(queue_2)
    node_4 = module_0.Node(var_2)
    node_5 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_7)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(queue_8)
    node_9 = module_0.Node(none_type_2)
    bytes_0 = b"\xc5\xc3\xa7"
    node_10 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_12 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_14.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_7 = queue_1.dequeue()


def test_case_611():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(queue_7)
    var_3 = queue_8.enqueue(queue_8)


def test_case_612():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)


def test_case_613():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_1)
    node_0 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_5)
    queue_7 = module_0.Queue()


def test_case_614():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    dict_0 = {var_2: node_0, node_0: str_1, str_1: str_2, queue_3: str_1}
    node_1 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_3 = queue_0.enqueue(str_1)


def test_case_615():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    node_6 = module_0.Node(node_0)


def test_case_616():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    dict_0 = {var_2: node_1, node_1: str_1, str_1: str_2, queue_4: str_1}
    node_2 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_617():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_3, node_3: str_0, str_0: str_1, queue_2: str_0}
    node_4 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_5 = module_0.Node(var_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_8)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_618():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_4)
    var_5 = queue_5.enqueue(var_4)
    node_3 = module_0.Node(queue_0)


def test_case_619():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(queue_1)


def test_case_620():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_2)
    var_2 = queue_2.dequeue()
    var_3 = queue_3.enqueue(var_2)


def test_case_621():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_622():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(queue_1)
    bool_0 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_0, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    int_1 = 1607
    node_5 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_7)
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(queue_6)
    int_2 = -4556
    node_9 = module_0.Node(int_2)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(queue_7)
    node_10 = module_0.Node(queue_0)


def test_case_623():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_3 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_4 = queue_12.dequeue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    node_4 = module_0.Node(queue_14)
    node_5 = module_0.Node(var_5)
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_624():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_1)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_4: node_1, node_1: str_0, str_0: str_1, queue_10: str_0}
    node_2 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()


def test_case_625():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_4)
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    var_5 = queue_2.dequeue()


def test_case_626():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_0)
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()


def test_case_627():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)


def test_case_628():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_2)
    dict_0 = {var_1: node_2, node_2: str_1, str_1: str_2, queue_3: str_1}
    node_3 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(queue_4)
    var_2 = queue_1.enqueue(queue_0)


def test_case_629():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_3)
    dict_0 = {var_5: node_4, node_4: str_2, str_2: str_3, queue_7: str_2}
    node_5 = module_0.Node(dict_0)
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_6 = module_0.Node(bytes_0)
    str_4 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(str_4)
    node_7 = module_0.Node(str_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    var_8 = queue_4.enqueue(var_1)


def test_case_630():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    node_3 = module_0.Node(var_3)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(queue_9)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    node_5 = module_0.Node(int_0)


def test_case_631():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_1 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_2)
    assert (
        f"{type(queue_12.head).__module__}.{type(queue_12.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_12.tail).__module__}.{type(queue_12.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_6: node_2, node_2: str_1, str_1: str_2, queue_12: str_1}
    node_3 = module_0.Node(dict_0)
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_3)
    node_4 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    queue_14 = module_0.Queue()
    node_6 = module_0.Node(str_4)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_9 = queue_15.dequeue()
    node_7 = module_0.Node(var_6)


def test_case_632():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_633():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_0.enqueue(queue_4)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_634():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_2)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_1, str_1: str_2, queue_0: str_1}
    node_2 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_3)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_4)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_5)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(node_6)
    var_5 = queue_10.dequeue()
    var_6 = queue_11.dequeue()
    assert queue_11.tail is None
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    node_10 = module_0.Node(none_type_0)


def test_case_635():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_2: node_3, node_3: str_0, str_0: str_1, queue_3: str_0}
    node_4 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(queue_0)


def test_case_636():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(var_3)
    var_5 = queue_3.enqueue(queue_4)


def test_case_637():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_5 = module_0.Node(queue_9)
    node_6 = module_0.Node(var_4)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_19 = module_0.Queue()
    var_10 = queue_19.enqueue(queue_19)
    node_8 = module_0.Node(queue_18)


def test_case_638():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_4 = module_0.Node(node_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_2)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_4: node_5, node_5: str_1, str_1: str_2, queue_7: str_1}
    node_6 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    assert queue_7.tail is None


def test_case_639():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    var_4 = queue_3.enqueue(str_0)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_1 = module_0.Node(queue_10)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    bool_2 = False
    queue_19 = module_0.Queue()
    var_10 = queue_19.dequeue()
    set_0 = {bool_2, var_10, queue_19, var_10}
    queue_20 = module_0.Queue()
    var_11 = queue_20.enqueue(set_0)
    node_5 = module_0.Node(var_11)
    node_6 = module_0.Node(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    bytes_0 = b'\n\xb9\x8ba}\xb2\xcf\xe2a"\xcc\x82\xa0\xbd\xb7\xed'
    var_12 = queue_16.enqueue(bytes_0)


def test_case_640():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    var_5 = queue_7.enqueue(str_3)
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_4)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(var_6)
    queue_12 = module_0.Queue()
    node_5 = module_0.Node(queue_7)


def test_case_641():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_1)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()


def test_case_642():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_1, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_3 = module_0.Node(var_3)
    var_4 = queue_1.dequeue()


def test_case_643():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_4)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_1)
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_2 = queue_7.enqueue(queue_6)
    node_6 = module_0.Node(queue_8)
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    node_7 = module_0.Node(queue_9)
    node_8 = module_0.Node(var_3)
    node_9 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(node_11)
    queue_12 = module_0.Queue()
    node_12 = module_0.Node(queue_12)
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    node_13 = module_0.Node(var_2)


def test_case_644():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_3 = module_0.Node(var_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_7)
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    int_1 = 1992
    node_10 = module_0.Node(int_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_645():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    var_5 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_4 = module_0.Node(queue_8)
    node_5 = module_0.Node(var_6)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_7)
    var_8 = queue_9.dequeue()
    var_9 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()


def test_case_646():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    var_2 = queue_0.enqueue(var_0)


def test_case_647():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    int_2 = -4556
    node_4 = module_0.Node(int_2)
    queue_6 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    node_6 = module_0.Node(queue_8)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(var_8)
    queue_15 = module_0.Queue()
    var_10 = queue_13.enqueue(str_2)
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(str_3)
    queue_17 = module_0.Queue()
    var_12 = queue_17.enqueue(var_11)
    queue_18 = module_0.Queue()
    var_13 = queue_0.dequeue()
    assert queue_0.tail is None
    assert var_13.tail is None


def test_case_648():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_3 = module_0.Node(node_2)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_7)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_2)
    dict_0 = {var_3: node_8, node_8: str_1, str_1: str_2, queue_8: str_1}
    node_9 = module_0.Node(dict_0)
    var_4 = queue_2.enqueue(queue_6)


def test_case_649():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)


def test_case_650():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_651():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()


def test_case_652():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.enqueue(queue_2)
    node_2 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()


def test_case_653():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()


def test_case_654():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0 = queue_5.enqueue(queue_4)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_1 = queue_11.dequeue()
    node_8 = module_0.Node(list_2)
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(str_1)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_3)
    queue_13 = module_0.Queue()
    node_10 = module_0.Node(bool_3)
    queue_14 = module_0.Queue()
    int_1 = 1607
    node_11 = module_0.Node(int_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_3 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_4 = queue_16.dequeue()
    var_5 = queue_4.dequeue()


def test_case_655():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_656():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()


def test_case_657():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_4)
    var_5 = queue_5.enqueue(var_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(str_2)
    dict_0 = {var_6: node_2, node_2: str_1, str_1: str_2, queue_6: str_1}
    node_3 = module_0.Node(dict_0)
    queue_7 = module_0.Queue()
    var_7 = queue_6.enqueue(var_3)


def test_case_658():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    var_4 = queue_3.enqueue(queue_3)
    var_5 = queue_4.enqueue(var_4)
    queue_5 = module_0.Queue()
    var_6 = queue_5.dequeue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    bool_0 = False
    queue_6 = module_0.Queue()
    var_7 = queue_6.dequeue()
    set_0 = {bool_0, var_7, queue_6, var_7}
    queue_7 = module_0.Queue()
    var_8 = queue_7.enqueue(set_0)
    node_3 = module_0.Node(var_8)
    node_4 = module_0.Node(bool_0)
    var_9 = queue_0.dequeue()


def test_case_659():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)


def test_case_660():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_5.enqueue(queue_4)
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_7 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.enqueue(queue_7)
    node_9 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    node_10 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    int_2 = 1992
    node_11 = module_0.Node(int_2)
    queue_13 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_5)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    int_3 = -4556
    node_13 = module_0.Node(int_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_661():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_2)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_662():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()


def test_case_663():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_0)
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    node_4 = module_0.Node(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_13)
    node_8 = module_0.Node(none_type_2)
    var_6 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    node_9 = module_0.Node(queue_15)
    queue_16 = module_0.Queue()
    var_8 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    int_0 = 1992
    node_10 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    var_9 = queue_9.enqueue(none_type_0)


def test_case_664():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    set_0 = {bool_0, var_2, queue_6, var_2}
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(set_0)
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(bool_0)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(var_5)
    queue_12 = module_0.Queue()
    var_7 = queue_9.enqueue(node_0)


def test_case_665():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    node_6 = module_0.Node(queue_11)
    node_7 = module_0.Node(var_5)
    bool_1 = False
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    set_0 = {bool_1, var_6, queue_12, var_6}
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(set_0)
    node_8 = module_0.Node(var_7)
    node_9 = module_0.Node(bool_1)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_10 = module_0.Node(queue_15)
    str_3 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(str_3)
    var_10 = queue_17.dequeue()
    assert queue_17.tail is None
    queue_18 = module_0.Queue()


def test_case_666():
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    var_4 = queue_2.enqueue(queue_7)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_667():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    dict_0 = {queue_7: node_6, var_1: list_1}
    node_7 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.dequeue()
    node_8 = module_0.Node(var_3)
    queue_10 = module_0.Queue()


def test_case_668():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_2)
    dict_0 = {var_4: node_5, node_5: str_1, str_1: str_2, queue_8: str_1}
    node_6 = module_0.Node(dict_0)
    node_7 = module_0.Node(str_1)
    var_5 = queue_1.dequeue()


def test_case_669():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_0 = queue_11.enqueue(none_type_0)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_1 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_13)
    node_8 = module_0.Node(none_type_1)
    var_2 = queue_14.enqueue(none_type_1)
    int_0 = 1992
    node_9 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    var_3 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_4 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_5 = queue_17.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    none_type_2 = None
    queue_20 = module_0.Queue()
    var_6 = queue_20.enqueue(none_type_2)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()


def test_case_670():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_2)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(str_2)
    queue_6 = module_0.Queue()


def test_case_671():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.enqueue(queue_8)
    node_5 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_6 = module_0.Node(var_7)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_1)
    queue_18 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_2)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_10 = queue_20.dequeue()
    var_11 = queue_10.dequeue()


def test_case_672():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_673():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_9)
    node_5 = module_0.Node(none_type_1)
    var_4 = queue_10.enqueue(none_type_1)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    var_7 = queue_3.enqueue(var_3)


def test_case_674():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_4 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_2)
    dict_0 = {var_5: node_1, node_1: str_1, str_1: str_2, queue_5: str_1}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_1)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_6.dequeue()
    var_8 = queue_0.enqueue(int_0)


def test_case_675():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_2 = module_0.Node(var_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_3)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_6.dequeue()
    bool_1 = False
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    set_0 = {bool_1, var_4, queue_8, var_4}
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(set_0)
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(queue_9)
    node_7 = module_0.Node(queue_3)


def test_case_676():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(var_6)
    str_3 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(str_3)
    var_9 = queue_15.dequeue()
    assert queue_15.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_677():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    dict_0 = {queue_4: node_3, var_3: list_0}
    node_4 = module_0.Node(dict_0)
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_2)
    var_5 = queue_0.enqueue(bytes_0)


def test_case_678():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(var_2)
    var_3 = queue_1.dequeue()


def test_case_679():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(node_2)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_4.dequeue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(queue_11)
    node_7 = module_0.Node(none_type_2)
    bytes_0 = b"\xc5\xc3\xa7"
    node_8 = module_0.Node(bytes_0)
    var_5 = queue_6.enqueue(queue_2)


def test_case_680():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_4 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(str_1)
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(var_3)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    node_10 = module_0.Node(str_1)


def test_case_681():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    bool_3 = False
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    set_0 = {bool_3, var_5, queue_8, var_5}
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(set_0)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    node_8 = module_0.Node(var_6)
    node_9 = module_0.Node(bool_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_13 = module_0.Node(node_12)
    int_1 = -4556
    node_14 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(queue_16)
    node_15 = module_0.Node(queue_10)


def test_case_682():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    node_8 = module_0.Node(queue_11)
    node_9 = module_0.Node(var_3)
    node_10 = module_0.Node(queue_11)
    node_11 = module_0.Node(queue_4)


def test_case_683():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_0, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_2)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(queue_10)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    node_9 = module_0.Node(var_9)
    var_10 = queue_6.enqueue(queue_7)


def test_case_684():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(var_0)


def test_case_685():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_3 = module_0.Node(var_3)
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_9 = module_0.Queue()


def test_case_686():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(var_2)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.enqueue(queue_7)
    var_4 = queue_1.dequeue()


def test_case_687():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_1 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_13)
    node_8 = module_0.Node(none_type_1)
    var_2 = queue_14.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    var_3 = queue_8.enqueue(var_1)


def test_case_688():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_689():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_7)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_10 = module_0.Node(node_9)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(queue_11)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_13 = module_0.Node(list_2)
    var_9 = queue_13.enqueue(node_11)


def test_case_690():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(node_2)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    node_5 = module_0.Node(list_1)
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_0)
    var_3 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_6 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(node_9)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_2)
    queue_17 = module_0.Queue()
    node_11 = module_0.Node(bool_2)
    var_7 = queue_16.dequeue()


def test_case_691():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_3)
    dict_0 = {var_2: node_3, node_3: str_2, str_2: str_3, queue_3: str_2}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(str_2)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    node_7 = module_0.Node(queue_4)
    int_0 = 1992
    node_8 = module_0.Node(int_0)
    str_4 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_11 = module_0.Node(queue_9)
    node_12 = module_0.Node(none_type_1)
    var_5 = queue_10.enqueue(none_type_1)
    var_6 = queue_2.enqueue(str_0)


def test_case_692():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_0)
    var_4 = queue_4.dequeue()
    queue_6 = module_0.Queue()


def test_case_693():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(var_0)


def test_case_694():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_695():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_3)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_13 = module_0.Queue()
    var_4 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_6 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    node_8 = module_0.Node(none_type_1)


def test_case_696():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    bool_1 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_1, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(var_0)


def test_case_697():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_698():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_0, node_0: str_0, str_0: str_1, queue_3: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(queue_7)


def test_case_699():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_4)
    var_3 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_1)


def test_case_700():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()


def test_case_701():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    dict_0 = {var_2: node_6, node_6: str_2, str_2: str_3, queue_5: str_2}
    node_7 = module_0.Node(dict_0)
    node_8 = module_0.Node(str_2)
    queue_6 = module_0.Queue()


def test_case_702():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_0)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    var_9 = queue_11.enqueue(var_0)


def test_case_703():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_3: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_3)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(var_4)
    queue_8 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    var_8 = queue_5.enqueue(queue_12)


def test_case_704():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_2 = module_0.Node(list_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.enqueue(queue_8)
    node_5 = module_0.Node(queue_10)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    var_6 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_705():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_3 = module_0.Node(queue_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    queue_15 = module_0.Queue()
    var_5 = queue_15.enqueue(node_10)
    queue_16 = module_0.Queue()
    node_11 = module_0.Node(queue_16)
    var_6 = queue_11.dequeue()


def test_case_706():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_2)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_4 = module_0.Node(var_3)
    int_1 = 1607
    node_5 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    bool_0 = False
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    set_0 = {bool_0, var_7, queue_13, var_7}
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(set_0)
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(queue_14)
    var_9 = queue_12.enqueue(var_2)


def test_case_707():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_7)
    bool_2 = False
    dict_0 = {none_type_1: none_type_1, node_7: bool_2, none_type_1: var_4}
    node_8 = module_0.Node(dict_0)
    var_5 = queue_5.enqueue(var_1)


def test_case_708():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    str_2 = "$2"
    node_5 = module_0.Node(str_2)


def test_case_709():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    dict_1 = {queue_3: node_3, var_2: list_0}
    node_4 = module_0.Node(dict_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    bool_1 = False
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    set_0 = {bool_1, var_6, queue_10, var_6}
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(set_0)
    node_5 = module_0.Node(var_7)
    bool_2 = False
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    set_1 = {bool_2, var_8, queue_12, var_8}
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(set_1)
    node_6 = module_0.Node(var_9)
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(queue_13)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(bool_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.dequeue()
    node_12 = module_0.Node(queue_17)
    node_13 = module_0.Node(var_10)
    none_type_1 = None
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(none_type_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_14 = module_0.Node(list_2)
    var_12 = queue_20.dequeue()
    queue_21 = module_0.Queue()


def test_case_710():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()


def test_case_711():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_1)
    var_2 = queue_3.enqueue(queue_3)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_0)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    node_5 = module_0.Node(var_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    node_10 = module_0.Node(queue_13)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    int_0 = 1992
    node_11 = module_0.Node(int_0)
    queue_16 = module_0.Queue()
    node_12 = module_0.Node(node_10)


def test_case_712():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_0: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_6 = module_0.Node(queue_13)
    queue_15 = module_0.Queue()


def test_case_713():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_3)
    var_4 = queue_2.dequeue()
    assert queue_2.tail is None


def test_case_714():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    bool_1 = False
    node_8 = module_0.Node(bool_1)


def test_case_715():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_0, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(var_4)
    queue_11 = module_0.Queue()
    var_6 = queue_9.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_12.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_14 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_15 = module_0.Queue()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_21 = module_0.Queue()
    var_9 = queue_21.dequeue()
    dict_0 = {queue_21: node_8, var_9: list_1}
    node_9 = module_0.Node(dict_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    var_10 = queue_23.enqueue(node_10)
    var_11 = queue_22.dequeue()
    var_12 = queue_23.dequeue()
    assert queue_23.tail is None
    var_13 = queue_4.enqueue(queue_17)


def test_case_716():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_13.enqueue(queue_12)
    node_5 = module_0.Node(queue_11)


def test_case_717():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_14 = module_0.Queue()
    var_3 = queue_14.enqueue(node_10)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_4 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_5 = queue_17.dequeue()
    node_11 = module_0.Node(var_4)
    node_12 = module_0.Node(bool_0)


def test_case_718():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_0 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_14.dequeue()
    node_6 = module_0.Node(var_5)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_16 = module_0.Queue()
    var_7 = queue_16.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(var_3)


def test_case_719():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_1 = 1607
    node_2 = module_0.Node(int_1)
    node_3 = module_0.Node(var_1)


def test_case_720():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(var_0)


def test_case_721():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()


def test_case_722():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(str_1)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(var_3)
    queue_13 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    node_5 = module_0.Node(node_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_15 = module_0.Queue()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_9 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    var_6 = queue_16.dequeue()
    node_10 = module_0.Node(queue_16)
    node_11 = module_0.Node(var_6)
    var_7 = queue_13.dequeue()


def test_case_723():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_1)
    var_6 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_2)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    node_3 = module_0.Node(var_6)


def test_case_724():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_725():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    node_2 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    var_3 = queue_7.dequeue()
    var_4 = queue_4.enqueue(var_1)


def test_case_726():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_4 = module_0.Node(queue_4)
    node_5 = module_0.Node(var_4)
    queue_5 = module_0.Queue()


def test_case_727():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_3)
    var_4 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_0 = {bool_0, var_6, queue_11, var_6}
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(set_0)
    node_3 = module_0.Node(var_7)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_5 = None
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(none_type_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_8 = module_0.Node(queue_17)
    node_9 = module_0.Node(none_type_5)
    var_10 = queue_12.dequeue()
    assert queue_12.tail is None


def test_case_728():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_1 = module_0.Node(var_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    node_3 = module_0.Node(var_5)
    var_6 = queue_7.enqueue(none_type_0)


def test_case_729():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()


def test_case_730():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_5)
    var_5 = queue_5.dequeue()
    var_6 = queue_6.dequeue()
    assert queue_6.tail is None
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(queue_8)
    node_7 = module_0.Node(none_type_1)
    var_8 = queue_9.enqueue(none_type_1)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_10 = queue_11.enqueue(var_9)
    queue_12 = module_0.Queue()
    var_11 = queue_10.enqueue(str_2)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_13 = module_0.Queue()
    var_12 = queue_13.enqueue(node_8)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_8: bool_1, none_type_2: var_12}
    node_9 = module_0.Node(dict_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(bool_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_13 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_14 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_15 = queue_18.enqueue(dict_0)


def test_case_731():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(queue_6)
    var_4 = queue_4.dequeue()


def test_case_732():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_3)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_5)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    queue_7 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    node_9 = module_0.Node(queue_12)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    var_7 = queue_15.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_2)
    queue_16 = module_0.Queue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_12 = module_0.Node(list_3)
    node_13 = module_0.Node(bool_3)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_733():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(none_type_2)
    var_3 = queue_6.enqueue(none_type_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    set_0 = {bool_0, var_4, queue_11, var_4}
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(queue_13)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_9 = module_0.Node(str_2)
    int_2 = 1607
    node_10 = module_0.Node(int_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_8 = queue_15.dequeue()
    bool_1 = False
    node_11 = module_0.Node(bool_1)
    queue_17 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    var_9 = queue_18.dequeue()
    node_13 = module_0.Node(node_1)


def test_case_734():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_3 = module_0.Queue()


def test_case_735():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_5)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(str_1)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_5.dequeue()


def test_case_736():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_9 = module_0.Queue()


def test_case_737():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_738():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_1 = 1992
    node_1 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(none_type_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(var_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    node_7 = module_0.Node(list_0)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(node_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_2)
    dict_0 = {var_5: node_9, node_9: str_1, str_1: str_2, queue_13: str_1}
    node_10 = module_0.Node(dict_0)
    node_11 = module_0.Node(str_1)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(str_3)
    queue_18 = module_0.Queue()
    var_8 = queue_18.enqueue(var_7)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()


def test_case_739():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.enqueue(queue_7)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    node_5 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    int_2 = 1992
    node_6 = module_0.Node(int_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(none_type_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_7 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_8 = queue_18.dequeue()
    node_8 = module_0.Node(var_8)
    queue_20 = module_0.Queue()
    var_9 = queue_20.dequeue()
    node_9 = module_0.Node(queue_20)
    node_10 = module_0.Node(var_9)
    queue_21 = module_0.Queue()
    var_10 = queue_21.dequeue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    str_2 = "LtohcnyCJ"
    node_11 = module_0.Node(str_2)


def test_case_740():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    dict_0 = {queue_1: node_1, var_1: list_0}
    node_2 = module_0.Node(dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_0)
    queue_7 = module_0.Queue()


def test_case_741():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_0 = module_0.Node(queue_3)
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(queue_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_4 = queue_12.enqueue(queue_11)
    str_2 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_2)
    queue_14 = module_0.Queue()


def test_case_742():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)


def test_case_743():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_1 = 1607
    node_5 = module_0.Node(int_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_1 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_2 = queue_15.enqueue(node_6)
    var_3 = queue_14.dequeue()
    var_4 = queue_15.dequeue()
    assert queue_15.tail is None
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_5 = queue_16.enqueue(str_4)
    dict_0 = {var_5: node_7, node_7: str_3, str_3: str_4, queue_16: str_3}
    node_8 = module_0.Node(dict_0)
    node_9 = module_0.Node(str_3)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    queue_17 = module_0.Queue()
    var_6 = queue_17.dequeue()
    queue_18 = module_0.Queue()


def test_case_744():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    dict_0 = {queue_3: node_2, var_4: list_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(str_2)
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    node_6 = module_0.Node(var_6)
    var_7 = queue_6.enqueue(queue_6)
    queue_7 = module_0.Queue()


def test_case_745():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(var_2)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_0)
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_1)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(queue_9)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    node_7 = module_0.Node(none_type_1)


def test_case_746():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()


def test_case_747():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_748():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(none_type_2)
    var_4 = queue_7.enqueue(none_type_2)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_1)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(none_type_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_4 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_4)
    var_11 = queue_16.dequeue()
    int_1 = 1607
    node_8 = module_0.Node(int_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()


def test_case_749():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_4)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    node_6 = module_0.Node(var_2)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(var_3)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_4 = queue_6.enqueue(node_5)


def test_case_750():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    var_4 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_3)
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_5 = module_0.Node(node_4)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(queue_15)
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(str_3)
    node_8 = module_0.Node(str_3)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_10 = module_0.Node(bytes_0)
    node_11 = module_0.Node(queue_1)


def test_case_751():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(var_0)
    bool_1 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_1, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_5 = module_0.Node(var_2)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_0)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_9)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_4 = queue_15.enqueue(str_2)
    node_13 = module_0.Node(str_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_14 = module_0.Node(list_2)
    queue_16 = module_0.Queue()
    node_15 = module_0.Node(bool_3)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_752():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    node_5 = module_0.Node(list_1)
    queue_5 = module_0.Queue()


def test_case_753():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    var_3 = queue_2.dequeue()
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    node_6 = module_0.Node(list_0)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_9 = queue_11.dequeue()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(node_8)
    bool_2 = False
    dict_0 = {none_type_1: none_type_1, node_8: bool_2, none_type_1: var_10}
    node_9 = module_0.Node(dict_0)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_10 = module_0.Node(queue_14)
    node_11 = module_0.Node(none_type_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_3)
    queue_16 = module_0.Queue()
    node_13 = module_0.Node(var_0)


def test_case_754():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_3 = queue_4.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    dict_0 = {var_4: node_2, node_2: str_0, str_0: str_1, queue_5: str_0}
    node_3 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_2)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    node_9 = module_0.Node(var_5)
    bool_3 = False
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_1 = {bool_3, var_6, queue_11, var_6}
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(set_1)
    node_10 = module_0.Node(var_7)
    node_11 = module_0.Node(bool_3)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_12 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    node_13 = module_0.Node(bool_4)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_14 = module_0.Node(var_7)


def test_case_755():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.enqueue(queue_9)
    node_4 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(node_6)
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_14)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(queue_15)
    var_10 = queue_16.dequeue()
    assert queue_16.tail is None
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(none_type_1)
    queue_18 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_3)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_12 = queue_20.dequeue()
    queue_21 = module_0.Queue()


def test_case_756():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    node_2 = module_0.Node(node_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_3)
    bool_1 = False
    dict_0 = {none_type_4: none_type_4, node_3: bool_1, none_type_4: var_4}
    node_4 = module_0.Node(dict_0)
    none_type_5 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_5)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_6 = queue_8.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    none_type_6 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_6)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    bool_4 = False
    node_9 = module_0.Node(bool_4)
    var_8 = queue_7.enqueue(bool_0)


def test_case_757():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_2 = queue_5.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_6 = module_0.Node(node_5)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_10 = module_0.Node(bytes_0)
    queue_11 = module_0.Queue()


def test_case_758():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_2, var_0: list_0}
    node_3 = module_0.Node(dict_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_759():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(queue_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()


def test_case_760():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_4 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_2.enqueue(queue_6)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_7 = queue_8.enqueue(var_6)


def test_case_761():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    var_3 = queue_1.dequeue()
    node_3 = module_0.Node(var_3)


def test_case_762():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_2)
    var_5 = queue_7.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_12.dequeue()
    node_4 = module_0.Node(complex_0)


def test_case_763():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_5)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(queue_7)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    bool_2 = False
    node_10 = module_0.Node(bool_2)
    queue_10 = module_0.Queue()
    var_5 = queue_2.enqueue(node_9)


def test_case_764():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()


def test_case_765():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_1, none_type_1: var_5}
    node_5 = module_0.Node(dict_0)
    var_6 = queue_5.dequeue()


def test_case_766():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()


def test_case_767():
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(queue_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    node_5 = module_0.Node(list_1)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(var_2)


def test_case_768():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_0 = queue_6.enqueue(str_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_1 = queue_8.enqueue(str_2)
    var_2 = queue_8.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    bytes_1 = b"\xc5\xc3\xa7"
    node_7 = module_0.Node(bytes_1)
    node_8 = module_0.Node(var_1)


def test_case_769():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_1 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_1, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_5)
    var_5 = queue_6.dequeue()
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(str_2)
    var_8 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_770():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_2}
    node_2 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_4 = module_0.Node(var_5)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(queue_12)
    var_10 = queue_13.dequeue()
    assert queue_13.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    var_11 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_1)
    var_12 = queue_2.dequeue()
    assert queue_2.tail is None


def test_case_771():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_1 = module_0.Node(node_0)


def test_case_772():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_4 = module_0.Node(var_2)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_0 = False
    queue_12 = module_0.Queue()
    var_3 = queue_12.dequeue()
    set_0 = {bool_0, var_3, queue_12, var_3}
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(set_0)
    node_7 = module_0.Node(var_4)
    queue_14 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    queue_15 = module_0.Queue()
    var_5 = queue_15.enqueue(node_9)
    queue_16 = module_0.Queue()
    node_10 = module_0.Node(queue_16)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_0)
    node_12 = module_0.Node(bool_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_6 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    node_13 = module_0.Node(none_type_0)


def test_case_773():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_7)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    var_3 = queue_9.dequeue()
    str_3 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_3)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_1)
    var_5 = queue_13.dequeue()
    var_6 = queue_5.dequeue()


def test_case_774():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_0 = module_0.Node(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = queue_8.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(var_5)


def test_case_775():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(var_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = 1607
    node_7 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_7 = queue_6.dequeue()


def test_case_776():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_6 = module_0.Node(bytes_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_7 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.enqueue(var_0)


def test_case_777():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_1)
    var_2 = queue_3.enqueue(queue_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_1)
    bool_0 = False
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    set_0 = {bool_0, var_4, queue_8, var_4}
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    var_7 = queue_4.dequeue()


def test_case_778():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(var_0)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(queue_7)
    node_5 = module_0.Node(none_type_0)
    var_3 = queue_8.enqueue(none_type_0)
    node_6 = module_0.Node(queue_2)


def test_case_779():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_3.dequeue()


def test_case_780():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = queue_3.dequeue()
    bool_1 = False
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    set_0 = {bool_1, var_2, queue_4, var_2}
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(queue_5)
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_14.enqueue(queue_13)
    node_9 = module_0.Node(queue_15)
    queue_16 = module_0.Queue()
    var_7 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_8 = queue_16.dequeue()
    node_10 = module_0.Node(var_7)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_1)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    int_2 = -4556
    node_12 = module_0.Node(int_2)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_9 = queue_6.dequeue()


def test_case_781():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(queue_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(var_5)
    queue_12 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    node_6 = module_0.Node(var_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    str_2 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_2)
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    int_1 = 1992
    node_9 = module_0.Node(int_1)
    var_9 = queue_8.enqueue(none_type_0)


def test_case_782():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_0, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    node_1 = module_0.Node(var_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    node_7 = module_0.Node(list_1)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(none_type_1)
    var_6 = queue_12.dequeue()
    bool_3 = False
    node_8 = module_0.Node(bool_3)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_9 = module_0.Node(list_2)
    var_8 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_9 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_10 = queue_18.dequeue()
    queue_20 = module_0.Queue()
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_21 = module_0.Queue()


def test_case_783():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_1 = module_0.Node(var_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_2 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_2)
    dict_0 = {var_6: node_4, node_4: str_1, str_1: str_2, queue_13: str_1}
    node_5 = module_0.Node(dict_0)
    queue_14 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_8 = queue_7.dequeue()


def test_case_784():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_3)
    dict_0 = {var_3: node_3, node_3: str_2, str_2: str_3, queue_7: str_2}
    node_4 = module_0.Node(dict_0)
    var_4 = queue_5.dequeue()


def test_case_785():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_1 = queue_8.enqueue(none_type_1)
    var_2 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(queue_4)


def test_case_786():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(var_4)
    queue_8 = module_0.Queue()


def test_case_787():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)


def test_case_788():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_2 = module_0.Node(var_3)


def test_case_789():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_1 = module_0.Node(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(var_3)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    node_10 = module_0.Node(node_9)
    queue_11 = module_0.Queue()


def test_case_790():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_0 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(queue_8)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_1 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_2 = queue_12.dequeue()
    node_6 = module_0.Node(node_5)


def test_case_791():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_3)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(var_4)
    queue_7 = module_0.Queue()
    var_6 = queue_6.enqueue(queue_6)
    var_7 = queue_7.enqueue(var_6)
    queue_8 = module_0.Queue()


def test_case_792():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_2 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_793():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_4)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_7)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    node_8 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_9 = module_0.Node(var_3)
    queue_8 = module_0.Queue()


def test_case_794():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    dict_0 = {queue_1: node_1, var_0: list_0}
    node_2 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_1 = {var_2: node_4, node_4: str_1, str_1: str_2, queue_4: str_1}
    node_5 = module_0.Node(dict_1)
    node_6 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_4)
    dict_2 = {var_4: node_7, node_7: str_3, str_3: str_4, queue_8: str_3}
    node_8 = module_0.Node(dict_2)
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(bool_1)
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_12 = module_0.Node(str_3)


def test_case_795():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()


def test_case_796():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(node_1)


def test_case_797():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    var_1 = queue_8.dequeue()
    node_6 = module_0.Node(node_5)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_798():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_799():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_0 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()


def test_case_800():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_801():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_5)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_10 = queue_14.dequeue()
    queue_16 = module_0.Queue()
    var_11 = queue_16.dequeue()
    node_4 = module_0.Node(queue_16)
    node_5 = module_0.Node(var_11)
    node_6 = module_0.Node(var_0)


def test_case_802():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    node_5 = module_0.Node(var_4)
    queue_6 = module_0.Queue()


def test_case_803():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_0 = module_0.Node(var_0)


def test_case_804():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_1 = queue_2.dequeue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(node_3)


def test_case_805():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(none_type_0)


def test_case_806():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_4 = module_0.Node(bytes_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_5 = module_0.Node(var_4)
    bool_1 = False
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    set_0 = {bool_1, var_5, queue_9, var_5}
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(set_0)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    node_6 = module_0.Node(var_6)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_0)
    var_9 = queue_13.dequeue()
    assert queue_13.tail is None
    node_7 = module_0.Node(var_9)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(queue_16)
    node_11 = module_0.Node(str_1)


def test_case_807():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_1)
    var_2 = queue_3.enqueue(none_type_1)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(node_4)


def test_case_808():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_2)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_1, str_1: str_2, queue_4: str_1}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_1)
    var_2 = queue_0.dequeue()


def test_case_809():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    var_3 = queue_3.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    dict_0 = {var_4: node_0, node_0: str_0, str_0: str_1, queue_6: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_2)
    node_3 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_4)
    var_8 = queue_9.dequeue()
    str_4 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_9 = queue_11.enqueue(str_4)
    var_10 = queue_11.dequeue()
    assert queue_11.tail is None
    str_5 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_5)
    queue_12 = module_0.Queue()
    var_11 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_6 = module_0.Node(queue_6)


def test_case_810():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    bool_1 = False
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    set_0 = {bool_1, var_3, queue_5, var_3}
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(set_0)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_1)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    node_10 = module_0.Node(str_0)


def test_case_811():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(queue_1)
    var_4 = queue_2.dequeue()
    assert queue_2.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(var_5)
    queue_7 = module_0.Queue()
    var_7 = queue_5.enqueue(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(queue_9)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_812():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_3)
    node_4 = module_0.Node(queue_5)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    int_1 = 1992
    node_6 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_8.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_3)
    dict_0 = {var_5: node_7, node_7: str_2, str_2: str_3, queue_11: str_2}
    node_8 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\n\x99/ \xf2\x8b\xe7\x19\xfe\x8c"
    var_7 = queue_5.enqueue(bytes_0)


def test_case_813():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_0 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    node_8 = module_0.Node(node_7)
    int_1 = 1607
    node_9 = module_0.Node(int_1)
    var_1 = queue_0.dequeue()


def test_case_814():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_4 = module_0.Node(queue_4)
    node_5 = module_0.Node(var_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_2)
    node_7 = module_0.Node(str_2)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    node_9 = module_0.Node(node_8)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    node_10 = module_0.Node(queue_9)
    var_6 = queue_2.dequeue()


def test_case_815():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_1)
    dict_0 = {var_3: node_1, node_1: str_0, str_0: str_1, queue_4: str_0}
    node_2 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(node_3)
    bool_0 = False
    dict_1 = {none_type_2: none_type_2, node_3: bool_0, none_type_2: var_5}
    node_4 = module_0.Node(dict_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(none_type_3)
    queue_15 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(str_4)
    var_8 = queue_16.dequeue()
    assert queue_16.tail is None
    node_8 = module_0.Node(var_8)
    none_type_4 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    node_11 = module_0.Node(node_10)
    var_10 = queue_5.enqueue(bool_2)


def test_case_816():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    var_1 = queue_2.dequeue()
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(node_7)
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()


def test_case_817():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(queue_3)


def test_case_818():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    node_7 = module_0.Node(bool_2)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(str_3)
    var_3 = queue_12.dequeue()
    assert queue_12.tail is None
    queue_13 = module_0.Queue()
    var_4 = queue_9.dequeue()


def test_case_819():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_2: node_1, node_1: str_0, str_0: str_1, queue_2: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()


def test_case_820():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    dict_0 = {var_1: node_0, node_0: str_1, str_1: str_2, queue_1: str_1}
    node_1 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = queue_5.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_3 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_4)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(var_5)
    queue_10 = module_0.Queue()
    var_7 = queue_8.dequeue()
    assert queue_8.tail is None


def test_case_821():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_3 = module_0.Node(var_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    dict_0 = {queue_2: node_5, var_2: list_0}
    node_6 = module_0.Node(dict_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_10)
    queue_6 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_4)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_12 = module_0.Node(queue_8)
    node_13 = module_0.Node(none_type_3)
    var_6 = queue_9.enqueue(none_type_3)
    node_14 = module_0.Node(queue_6)


def test_case_822():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_4 = queue_3.enqueue(var_1)


def test_case_823():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_4.dequeue()


def test_case_824():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_15 = module_0.Queue()
    var_3 = queue_15.enqueue(node_7)
    assert (
        f"{type(queue_15.head).__module__}.{type(queue_15.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_15.tail).__module__}.{type(queue_15.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_16 = module_0.Queue()
    node_8 = module_0.Node(queue_16)
    queue_17 = module_0.Queue()
    var_4 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    int_2 = -4556
    node_9 = module_0.Node(int_2)
    queue_19 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_5 = queue_20.enqueue(queue_19)
    none_type_1 = None
    queue_22 = module_0.Queue()
    var_6 = queue_22.enqueue(none_type_1)
    queue_23 = module_0.Queue()
    none_type_2 = None
    queue_24 = module_0.Queue()
    var_7 = queue_24.enqueue(none_type_2)
    queue_25 = module_0.Queue()
    queue_26 = module_0.Queue()
    queue_27 = module_0.Queue()


def test_case_825():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_0.enqueue(none_type_0)


def test_case_826():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_2)
    var_3 = queue_5.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    var_4 = queue_7.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(str_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(bool_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_5 = queue_13.dequeue()


def test_case_827():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()


def test_case_828():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    bool_0 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_0, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_3)
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_13.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(str_2)
    dict_0 = {var_10: node_8, node_8: str_1, str_1: str_2, queue_18: str_1}
    node_9 = module_0.Node(dict_0)
    queue_19 = module_0.Queue()
    var_11 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()


def test_case_829():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    var_4 = queue_8.dequeue()


def test_case_830():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)


def test_case_831():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()


def test_case_832():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_2)
    dict_0 = {var_1: node_3, node_3: str_1, str_1: str_2, queue_4: str_1}
    node_4 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_2 = -524
    queue_11 = module_0.Queue()
    var_2 = queue_11.enqueue(int_2)
    int_3 = -4556
    node_8 = module_0.Node(int_3)
    queue_12 = module_0.Queue()
    var_3 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_4 = -4556
    node_9 = module_0.Node(int_4)
    queue_15 = module_0.Queue()
    var_4 = queue_15.enqueue(queue_15)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_10 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_11 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    node_12 = module_0.Node(str_3)


def test_case_833():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)


def test_case_834():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(var_6)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    node_8 = module_0.Node(queue_12)


def test_case_835():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_1)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_2)


def test_case_836():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(none_type_3)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_9)
    queue_13 = module_0.Queue()
    node_10 = module_0.Node(queue_13)
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    none_type_5 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_12 = module_0.Node(queue_17)
    var_8 = queue_9.dequeue()


def test_case_837():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_4 = queue_6.dequeue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(queue_10)
    var_8 = queue_11.dequeue()
    assert queue_11.tail is None
    queue_12 = module_0.Queue()


def test_case_838():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()


def test_case_839():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_4)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(var_4)
    bool_0 = False
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    set_0 = {bool_0, var_5, queue_11, var_5}
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_6)
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(queue_12)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()


def test_case_840():
    bool_0 = True
    node_0 = module_0.Node(bool_0)


def test_case_841():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(queue_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    node_5 = module_0.Node(str_1)
    str_2 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_8 = module_0.Node(bool_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_4 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_4)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_5)
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    dict_0 = {queue_7: node_11, var_4: list_1}
    node_12 = module_0.Node(dict_0)
    var_5 = queue_2.dequeue()


def test_case_842():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_1 = module_0.Node(queue_6)
    node_2 = module_0.Node(var_3)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    var_6 = queue_7.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(queue_10)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(queue_16)
    var_11 = queue_17.dequeue()
    assert queue_17.tail is None
    var_12 = queue_1.enqueue(bool_1)


def test_case_843():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_1.dequeue()
    node_0 = module_0.Node(var_2)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    node_4 = module_0.Node(var_3)


def test_case_844():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(none_type_0)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_3 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_4 = queue_13.dequeue()
    node_8 = module_0.Node(var_4)
    queue_15 = module_0.Queue()
    var_5 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_6 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_7 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    var_8 = queue_21.dequeue()
    node_9 = module_0.Node(complex_0)


def test_case_845():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_3)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_4)
    var_6 = queue_10.dequeue()
    assert var_6 == "~%25QZ3{"
    assert queue_10.head is None
    assert queue_10.tail is None
    node_3 = module_0.Node(var_6)
    assert node_3.data == "~%25QZ3{"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    node_8 = module_0.Node(var_1)


def test_case_846():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(node_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_9)
    node_5 = module_0.Node(none_type_2)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_7 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_8 = queue_17.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    bool_0 = False
    queue_22 = module_0.Queue()
    var_9 = queue_22.dequeue()
    set_0 = {bool_0, var_9, queue_22, var_9}
    queue_23 = module_0.Queue()
    var_10 = queue_23.enqueue(set_0)
    node_8 = module_0.Node(var_10)
    node_9 = module_0.Node(bool_0)
    queue_24 = module_0.Queue()
    var_11 = queue_24.dequeue()
    node_10 = module_0.Node(queue_24)
    str_2 = "~%25QZ3{"
    queue_25 = module_0.Queue()
    var_12 = queue_25.enqueue(str_2)
    queue_26 = module_0.Queue()
    var_13 = queue_26.enqueue(var_12)
    queue_27 = module_0.Queue()
    queue_28 = module_0.Queue()


def test_case_847():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    var_3 = queue_6.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_3)
    node_6 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_8 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_6 = queue_21.dequeue()
    queue_22 = module_0.Queue()
    var_7 = queue_21.dequeue()
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    queue_23 = module_0.Queue()
    var_8 = queue_21.dequeue()
    node_10 = module_0.Node(str_3)


def test_case_848():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    dict_0 = {queue_2: node_1, var_0: list_1}
    node_2 = module_0.Node(dict_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    node_5 = module_0.Node(queue_10)
    node_6 = module_0.Node(var_4)
    node_7 = module_0.Node(queue_10)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_12.enqueue(queue_11)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_4)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(queue_14)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_3 = None
    queue_18 = module_0.Queue()
    var_8 = queue_18.enqueue(none_type_3)
    var_9 = queue_16.dequeue()
    node_12 = module_0.Node(node_8)


def test_case_849():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)


def test_case_850():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_5)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    complex_2 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(str_2)
    node_8 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    var_7 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_8 = queue_16.dequeue()
    node_9 = module_0.Node(var_8)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_10 = module_0.Node(list_0)
    node_11 = module_0.Node(bool_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_9 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_10 = queue_21.dequeue()


def test_case_851():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_0 = queue_6.dequeue()
    node_4 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    node_5 = module_0.Node(queue_7)
    node_6 = module_0.Node(var_1)
    var_2 = queue_7.enqueue(queue_7)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_2)
    var_5 = queue_12.dequeue()
    assert queue_12.tail is None
    node_9 = module_0.Node(var_5)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_13)
    var_8 = queue_14.dequeue()
    assert queue_14.tail is None
    complex_2 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_2)
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    node_11 = module_0.Node(var_9)
    str_3 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(str_3)
    queue_19 = module_0.Queue()
    tuple_0 = ()
    var_11 = queue_2.enqueue(tuple_0)


def test_case_852():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    node_6 = module_0.Node(bool_3)
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_0 = queue_6.enqueue(queue_5)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()


def test_case_853():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    var_3 = queue_2.dequeue()
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    var_6 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_7 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_9 = queue_3.dequeue()


def test_case_854():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_0)
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    node_2 = module_0.Node(var_8)
    node_3 = module_0.Node(queue_9)


def test_case_855():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_2)
    queue_6 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    set_0 = {bool_2, var_5, queue_10, var_5}
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(set_0)
    node_4 = module_0.Node(var_6)
    node_5 = module_0.Node(bool_1)


def test_case_856():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_0 = module_0.Node(queue_7)
    node_1 = module_0.Node(none_type_0)
    var_4 = queue_8.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_4)
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(queue_13)
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_7 = queue_14.dequeue()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    queue_16 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_18 = module_0.Queue()
    var_9 = queue_18.enqueue(node_8)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_21 = module_0.Queue()
    var_10 = queue_6.enqueue(var_1)
    node_10 = module_0.Node(var_10)


def test_case_857():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    int_1 = 1992
    node_2 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    var_7 = queue_6.enqueue(int_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_858():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(var_3)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    var_5 = queue_12.dequeue()
    node_6 = module_0.Node(none_type_2)


def test_case_859():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    dict_0 = {var_3: node_1, node_1: str_1, str_1: str_2, queue_3: str_1}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(var_1)


def test_case_860():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    node_4 = module_0.Node(var_3)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_1)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(var_4)
    queue_12 = module_0.Queue()
    var_6 = queue_10.enqueue(str_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_13)
    bool_0 = False
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(var_7)


def test_case_861():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    var_2 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_862():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    bytes_0 = b"\xc5\xa7H"
    node_7 = module_0.Node(bytes_0)


def test_case_863():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    var_4 = queue_6.enqueue(str_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_2 = module_0.Node(var_5)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_3)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(var_6)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(node_3)
    queue_15 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_4)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(node_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()


def test_case_864():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()


def test_case_865():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_3)
    var_5 = queue_4.dequeue()
    assert queue_4.tail is None
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(str_2)
    dict_0 = {var_6: node_2, node_2: str_1, str_1: str_2, queue_6: str_1}
    node_3 = module_0.Node(dict_0)
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(queue_0)


def test_case_866():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_4)
    var_4 = queue_5.enqueue(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()


def test_case_867():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()


def test_case_868():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_869():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_5 = module_0.Node(queue_4)
    node_6 = module_0.Node(var_1)
    var_2 = queue_4.enqueue(queue_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_10 = module_0.Node(list_1)
    var_5 = queue_3.enqueue(var_3)


def test_case_870():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_1)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(queue_11)
    node_7 = module_0.Node(none_type_0)
    var_5 = queue_10.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_19 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_9 = queue_20.enqueue(queue_19)
    node_10 = module_0.Node(node_6)


def test_case_871():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()


def test_case_872():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    var_3 = queue_0.enqueue(queue_2)


def test_case_873():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(queue_4)
    var_6 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    node_3 = module_0.Node(node_2)
    queue_8 = module_0.Queue()
    var_8 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_9 = queue_8.dequeue()
    node_4 = module_0.Node(var_8)
    bool_0 = False
    queue_10 = module_0.Queue()
    var_10 = queue_10.dequeue()
    set_0 = {bool_0, var_10, queue_10, var_10}
    queue_11 = module_0.Queue()
    var_11 = queue_11.enqueue(set_0)
    node_5 = module_0.Node(var_11)
    node_6 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_12 = queue_12.enqueue(str_0)
    node_7 = module_0.Node(str_0)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_13 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    var_14 = queue_11.dequeue()
    assert queue_11.tail is None


def test_case_874():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_5 = module_0.Node(list_0)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_3)
    var_5 = queue_7.dequeue()
    assert queue_7.tail is None
    node_6 = module_0.Node(str_2)


def test_case_875():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(queue_3)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    var_4 = queue_10.dequeue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    node_8 = module_0.Node(node_7)
    int_1 = -4556
    node_9 = module_0.Node(int_1)
    var_6 = queue_6.enqueue(int_0)


def test_case_876():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(node_6)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    dict_0 = {queue_9: node_7, var_3: list_1}
    node_8 = module_0.Node(dict_0)
    queue_10 = module_0.Queue()


def test_case_877():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_1 = queue_12.enqueue(node_3)
    assert (
        f"{type(queue_12.head).__module__}.{type(queue_12.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_12.tail).__module__}.{type(queue_12.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_11.dequeue()
    queue_13 = module_0.Queue()
    var_3 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_4 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_5 = queue_15.dequeue()
    queue_18 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_19 = module_0.Queue()
    var_6 = queue_19.enqueue(queue_19)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_7 = queue_21.enqueue(node_5)
    var_8 = queue_20.dequeue()
    var_9 = queue_21.dequeue()
    assert queue_21.tail is None
    queue_22 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_23 = module_0.Queue()
    var_10 = queue_23.enqueue(node_7)
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_4)
    queue_26 = module_0.Queue()
    var_11 = queue_26.enqueue(queue_26)
    queue_27 = module_0.Queue()
    var_12 = queue_27.dequeue()
    node_10 = module_0.Node(queue_27)
    queue_28 = module_0.Queue()
    var_13 = queue_28.dequeue()
    queue_29 = module_0.Queue()
    int_2 = 1992
    node_11 = module_0.Node(int_2)
    queue_30 = module_0.Queue()
    none_type_1 = None
    queue_31 = module_0.Queue()
    var_14 = queue_31.enqueue(none_type_1)
    queue_32 = module_0.Queue()
    node_12 = module_0.Node(queue_32)
    var_15 = queue_24.dequeue()


def test_case_878():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_5 = module_0.Node(queue_4)
    node_6 = module_0.Node(var_4)
    var_5 = queue_4.enqueue(queue_4)
    queue_5 = module_0.Queue()
    var_6 = queue_4.enqueue(var_3)


def test_case_879():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_1)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(var_7)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_3)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_10 = queue_15.dequeue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_4)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    var_11 = queue_20.dequeue()
    node_6 = module_0.Node(queue_12)


def test_case_880():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_3 = module_0.Node(node_2)
    var_2 = queue_0.dequeue()
    assert queue_0.tail is None
    assert var_2.tail is None


def test_case_881():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(queue_9)
    int_0 = -524
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(int_0)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_5 = module_0.Node(queue_12)
    node_6 = module_0.Node(var_6)
    var_7 = queue_12.enqueue(queue_12)
    queue_13 = module_0.Queue()
    var_8 = queue_6.dequeue()


def test_case_882():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()


def test_case_883():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_3 = module_0.Node(var_3)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(queue_7)
    var_8 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    var_9 = queue_9.dequeue()
    node_4 = module_0.Node(queue_9)
    node_5 = module_0.Node(var_9)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    node_9 = module_0.Node(node_8)
    var_11 = queue_3.dequeue()


def test_case_884():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(var_5)
    var_6 = queue_6.enqueue(queue_6)
    queue_7 = module_0.Queue()
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    dict_0 = {queue_8: node_7, var_7: list_0}
    node_8 = module_0.Node(dict_0)
    queue_9 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(node_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_11 = module_0.Node(queue_14)
    queue_16 = module_0.Queue()


def test_case_885():
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_886():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(queue_3)
    node_1 = module_0.Node(none_type_0)
    var_4 = queue_4.enqueue(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_0)


def test_case_887():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_2)
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_888():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    var_4 = queue_2.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_11.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    var_8 = queue_14.dequeue()
    queue_16 = module_0.Queue()


def test_case_889():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    node_0 = module_0.Node(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_3 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_14 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_18)


def test_case_890():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_0 = module_0.Node(queue_6)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_3}
    node_2 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_7 = queue_15.enqueue(queue_14)
    node_5 = module_0.Node(dict_0)


def test_case_891():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_0 = module_0.Node(queue_3)
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_3 = module_0.Node(var_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_6)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(queue_7)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_3)
    dict_0 = {var_5: node_8, node_8: str_2, str_2: str_3, queue_8: str_2}
    node_9 = module_0.Node(dict_0)
    node_10 = module_0.Node(str_2)
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(node_11)
    var_7 = queue_2.enqueue(queue_2)


def test_case_892():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()


def test_case_893():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_4)
    node_5 = module_0.Node(none_type_0)
    var_2 = queue_3.enqueue(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_11 = module_0.Queue()


def test_case_894():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_1 = queue_13.dequeue()
    node_4 = module_0.Node(queue_13)
    node_5 = module_0.Node(var_1)
    var_2 = queue_13.enqueue(queue_13)
    assert (
        f"{type(queue_13.head).__module__}.{type(queue_13.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_13.tail).__module__}.{type(queue_13.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_14 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_3 = queue_15.enqueue(str_1)
    queue_16 = module_0.Queue()
    var_4 = queue_16.enqueue(var_3)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_6 = module_0.Node(var_3)
    queue_19 = module_0.Queue()


def test_case_895():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_896():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_5)
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(queue_4)


def test_case_897():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(var_1)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bool_1 = False
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    set_0 = {bool_1, var_2, queue_8, var_2}
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(set_0)
    node_6 = module_0.Node(var_3)
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_3)


def test_case_898():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(var_0)
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(node_5)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_8 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_9 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    node_12 = module_0.Node(str_1)
    var_4 = queue_9.enqueue(node_11)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_13 = module_0.Node(var_5)
    var_7 = queue_11.dequeue()


def test_case_899():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_0 = module_0.Node(var_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(bool_2)
    queue_8 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    dict_0 = {queue_9: node_7, var_5: list_2}
    node_8 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_10 = module_0.Node(list_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_11 = module_0.Node(queue_8)


def test_case_900():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(node_2)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_3.dequeue()
    var_2 = queue_4.dequeue()
    assert queue_4.tail is None
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_4)
    dict_0 = {var_3: node_3, node_3: str_3, str_3: str_4, queue_5: str_3}
    node_4 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_9 = module_0.Node(bytes_0)
    queue_15 = module_0.Queue()
    var_4 = queue_15.dequeue()
    none_type_0 = None
    queue_16 = module_0.Queue()
    var_5 = queue_16.enqueue(none_type_0)
    queue_17 = module_0.Queue()
    str_6 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_6 = queue_18.enqueue(str_6)
    var_7 = queue_18.dequeue()
    assert queue_18.tail is None
    node_10 = module_0.Node(var_7)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_1)
    node_12 = module_0.Node(bool_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()


def test_case_901():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(queue_3)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_5)
    var_5 = queue_6.enqueue(var_4)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(str_2)
    var_8 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(node_8)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_902():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_5.enqueue(queue_4)
    node_6 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()


def test_case_903():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_4 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_2 = queue_9.dequeue()
    node_7 = module_0.Node(var_2)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    node_10 = module_0.Node(bool_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_3 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_4 = queue_14.dequeue()
    node_11 = module_0.Node(var_4)
    int_1 = 1607
    node_12 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_5 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_6 = queue_10.dequeue()


def test_case_904():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_1 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    var_2 = queue_11.enqueue(var_1)
    queue_12 = module_0.Queue()
    var_3 = queue_10.enqueue(str_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    node_8 = module_0.Node(str_2)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    node_10 = module_0.Node(queue_14)
    queue_15 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_4 = queue_16.enqueue(str_3)
    var_5 = queue_16.dequeue()
    assert var_5 == "~%25QZ3{"
    assert queue_16.head is None
    assert queue_16.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_6 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    int_0 = 1992
    node_11 = module_0.Node(int_0)
    node_12 = module_0.Node(queue_14)


def test_case_905():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_5.dequeue()
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_3 = module_0.Node(list_0)
    var_7 = queue_2.enqueue(var_4)


def test_case_906():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.enqueue(queue_7)
    node_3 = module_0.Node(queue_9)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_4: bool_1, none_type_0: var_5}
    node_5 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_7)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    bool_3 = True
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(bool_3)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_4)
    var_9 = queue_5.dequeue()


def test_case_907():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_908():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    var_2 = queue_2.enqueue(node_3)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_5 = module_0.Node(queue_3)
    node_6 = module_0.Node(var_3)
    node_7 = module_0.Node(queue_3)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(var_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(node_7)


def test_case_909():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_1)
    var_1 = queue_2.enqueue(node_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(var_0)


def test_case_910():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(var_6)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(str_4)
    dict_0 = {var_8: node_2, node_2: str_3, str_3: str_4, queue_9: str_3}
    node_3 = module_0.Node(dict_0)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(var_7)


def test_case_911():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_3)
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_1)
    dict_0 = {var_5: node_2, node_2: str_0, str_0: str_1, queue_5: str_0}
    node_3 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_912():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_2: str_0}
    node_2 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()


def test_case_913():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    set_0 = {bool_0, var_1, queue_1, var_1}
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_2)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(queue_6)
    int_1 = -524
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(int_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_10 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_12)
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_1)
    var_7 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    var_8 = queue_6.dequeue()


def test_case_914():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_5.dequeue()


def test_case_915():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_2 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(node_7)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_916():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_0 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()


def test_case_917():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = queue_6.dequeue()
    int_0 = -524
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(int_0)
    node_2 = module_0.Node(queue_2)


def test_case_918():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_919():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_2)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_2)


def test_case_920():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.dequeue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(var_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(bool_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(node_5)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    str_2 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_5 = queue_16.enqueue(str_2)
    queue_17 = module_0.Queue()
    var_6 = queue_17.enqueue(var_5)
    queue_18 = module_0.Queue()
    node_8 = module_0.Node(bool_0)


def test_case_921():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()


def test_case_922():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    var_1 = queue_0.enqueue(queue_2)


def test_case_923():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_6 = module_0.Node(queue_5)
    node_7 = module_0.Node(var_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()


def test_case_924():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_3 = queue_7.dequeue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    queue_15 = module_0.Queue()
    node_8 = module_0.Node(bool_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_925():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_0)
    var_3 = queue_8.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_8.head is None
    assert queue_8.tail is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == "~%25QZ3{"
    node_4 = module_0.Node(queue_1)


def test_case_926():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_2.dequeue()
    assert queue_2.tail is None
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    dict_0 = {var_3: node_1, node_1: str_1, str_1: str_2, queue_3: str_1}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_1)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_5 = module_0.Node(var_4)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(str_4)
    dict_1 = {var_7: node_9, node_9: str_3, str_3: str_4, queue_9: str_3}
    node_10 = module_0.Node(dict_1)
    queue_10 = module_0.Queue()
    node_11 = module_0.Node(var_1)


def test_case_927():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_928():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_2 = module_0.Node(var_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.enqueue(queue_7)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_3)
    dict_0 = {var_5: node_7, node_7: str_2, str_2: str_3, queue_10: str_2}
    node_8 = module_0.Node(dict_0)
    str_4 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_4)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(var_6)
    queue_13 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_5)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    int_1 = -4556
    node_10 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_8 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(queue_18)
    queue_20 = module_0.Queue()


def test_case_929():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_1)
    node_4 = module_0.Node(queue_3)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_930():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_2)
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_3)
    dict_0 = {var_3: node_6, node_6: str_2, str_2: str_3, queue_7: str_2}
    node_7 = module_0.Node(dict_0)
    node_8 = module_0.Node(str_2)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    node_11 = module_0.Node(node_10)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_12 = module_0.Node(queue_9)
    node_13 = module_0.Node(var_5)
    node_14 = module_0.Node(queue_9)
    none_type_5 = None
    node_15 = module_0.Node(none_type_5)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_16 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    var_8 = queue_6.enqueue(var_7)


def test_case_931():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(str_0)
    var_4 = queue_4.enqueue(node_2)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_1)
    var_6 = queue_5.dequeue()
    assert queue_5.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_7 = queue_6.dequeue()
    node_4 = module_0.Node(node_3)
    queue_7 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(str_4)
    dict_0 = {var_9: node_8, node_8: str_3, str_3: str_4, queue_12: str_3}
    node_9 = module_0.Node(dict_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_932():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_1)
    var_2 = queue_1.enqueue(queue_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_2)
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(var_5)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(queue_11)
    node_7 = module_0.Node(none_type_0)
    var_8 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()


def test_case_933():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_4)
    queue_8 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_5)
    var_5 = queue_9.dequeue()
    var_6 = queue_10.dequeue()
    assert queue_10.tail is None
    str_4 = "RhJ%"
    var_7 = queue_3.enqueue(str_4)


def test_case_934():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    int_0 = -65
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(int_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(var_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_7 = queue_11.dequeue()


def test_case_935():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    queue_3 = module_0.Queue()


def test_case_936():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    node_2 = module_0.Node(queue_1)


def test_case_937():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(queue_8)
    var_5 = queue_9.dequeue()
    assert queue_9.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    node_4 = module_0.Node(queue_14)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    dict_0 = {queue_6: queue_5}
    node_7 = module_0.Node(dict_0)


def test_case_938():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(str_2)
    var_1 = queue_1.enqueue(node_2)
    var_2 = queue_0.dequeue()
    assert queue_0.head is None
    assert queue_0.tail is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "queue5.Queue"
    assert var_2.head is None
    assert var_2.tail is None


def test_case_939():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    node_9 = module_0.Node(node_8)
    queue_10 = module_0.Queue()


def test_case_940():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(var_3)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(queue_10)
    node_11 = module_0.Node(none_type_1)
    var_5 = queue_11.enqueue(none_type_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_0)
    var_6 = queue_0.enqueue(node_5)


def test_case_941():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    node_0 = module_0.Node(var_2)


def test_case_942():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_943():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_0)
    var_4 = queue_4.dequeue()
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    bool_0 = False
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    set_0 = {bool_0, var_6, queue_6, var_6}
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(set_0)
    node_1 = module_0.Node(var_7)
    node_2 = module_0.Node(bool_0)
    int_0 = -65
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(int_0)
    queue_9 = module_0.Queue()
    var_9 = queue_9.dequeue()
    node_3 = module_0.Node(var_9)
    queue_10 = module_0.Queue()
    var_10 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_11 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_12 = queue_13.enqueue(queue_12)
    var_13 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_14 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_19 = module_0.Queue()
    var_15 = queue_19.enqueue(node_7)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_22 = module_0.Queue()
    var_16 = queue_22.dequeue()
    queue_23 = module_0.Queue()
    var_17 = queue_23.dequeue()
    queue_24 = module_0.Queue()


def test_case_944():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_0, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bool_0)
    int_1 = 1607
    node_5 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    int_2 = -65
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(int_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(queue_9)
    var_7 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    int_3 = -524
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(int_3)
    node_6 = module_0.Node(var_3)


def test_case_945():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_1)
    var_2 = queue_3.enqueue(queue_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_5 = module_0.Node(var_5)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    var_7 = queue_9.dequeue()
    var_8 = queue_6.dequeue()


def test_case_946():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    node_4 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    dict_0 = {var_2: node_5, node_5: str_0, str_0: str_1, queue_4: str_0}
    node_6 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_7 = module_0.Node(queue_5)
    node_8 = module_0.Node(var_3)
    var_4 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    int_0 = -65
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(int_0)
    int_1 = 1607
    node_9 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_9 = queue_15.dequeue()
    bool_0 = False
    node_10 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_947():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(str_2)
    dict_0 = {var_4: node_1, node_1: str_1, str_1: str_2, queue_3: str_1}
    node_2 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(node_5)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(queue_8)
    var_7 = queue_6.enqueue(node_2)


def test_case_948():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_3 = module_0.Node(node_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    var_5 = queue_7.enqueue(str_1)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    int_1 = 1607
    node_7 = module_0.Node(int_1)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    node_12 = module_0.Node(str_2)
    var_7 = queue_12.enqueue(node_11)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_13 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    bool_4 = True
    node_14 = module_0.Node(bool_4)
    node_15 = module_0.Node(node_14)
    var_8 = queue_10.enqueue(int_0)


def test_case_949():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_3 = queue_6.dequeue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_3)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(var_5)
    queue_15 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_14)
    var_8 = queue_15.enqueue(var_7)
    queue_16 = module_0.Queue()


def test_case_950():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_3)
    var_1 = queue_4.dequeue()
    assert queue_4.head is None
    assert queue_4.tail is None


def test_case_951():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bool_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_4: bool_1, none_type_0: var_2}
    node_5 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    queue_5 = module_0.Queue()
    var_5 = queue_3.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(node_7)


def test_case_952():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()


def test_case_953():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    bool_2 = False
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    set_0 = {bool_2, var_0, queue_2, var_0}
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_1)
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_8 = module_0.Node(queue_4)
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    bool_3 = False
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    set_1 = {bool_3, var_3, queue_5, var_3}
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(set_1)
    node_10 = module_0.Node(var_4)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_11)
    var_6 = queue_8.enqueue(int_0)


def test_case_954():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_3: bool_0, none_type_0: var_1}
    node_4 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    node_7 = module_0.Node(none_type_1)
    var_5 = queue_9.enqueue(none_type_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    node_10 = module_0.Node(queue_15)
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    node_12 = module_0.Node(node_11)
    complex_0 = -2503.2 - 384.3391j
    node_13 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_955():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)


def test_case_956():
    str_0 = "~W:Qn]a>6w"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_0, str_0, str_0, var_0}
    list_0 = [var_0, str_0, set_0]
    node_0 = module_0.Node(list_0)


def test_case_957():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    var_5 = queue_3.enqueue(str_1)
    node_1 = module_0.Node(queue_1)


def test_case_958():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    var_1 = queue_2.dequeue()


def test_case_959():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_1, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_2)
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(var_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(var_3)
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_6 = queue_12.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_960():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_0 = module_0.Node(var_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_5.dequeue()


def test_case_961():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    bytes_0 = b"\xc5\xc3\xa7"
    node_5 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_7 = module_0.Node(str_0)
    var_0 = queue_1.enqueue(node_6)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_1)
    var_1 = queue_1.enqueue(queue_0)


def test_case_962():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    node_4 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_5 = module_0.Node(queue_4)
    node_6 = module_0.Node(var_1)
    var_2 = queue_4.enqueue(queue_4)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_1.dequeue()


def test_case_963():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(none_type_0)
    var_3 = queue_2.enqueue(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    dict_0 = {var_4: node_4, node_4: str_0, str_0: str_1, queue_5: str_0}
    node_5 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(queue_6)
    var_5 = queue_3.dequeue()


def test_case_964():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(bytes_0)


def test_case_965():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_1 = queue_5.dequeue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_1)
    var_4 = queue_8.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_9 = module_0.Node(bool_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()


def test_case_966():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(queue_8)
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_13)
    node_8 = module_0.Node(none_type_1)
    var_3 = queue_14.enqueue(none_type_1)
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_4 = queue_15.enqueue(str_2)
    queue_16 = module_0.Queue()
    var_5 = queue_16.enqueue(var_4)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_20 = module_0.Queue()
    var_6 = queue_20.enqueue(node_10)
    queue_21 = module_0.Queue()
    node_11 = module_0.Node(queue_21)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_4)
    complex_1 = -2503.2 - 384.3391j
    node_13 = module_0.Node(complex_1)
    queue_22 = module_0.Queue()
    none_type_3 = None
    queue_23 = module_0.Queue()
    var_7 = queue_23.enqueue(none_type_3)
    queue_24 = module_0.Queue()
    node_14 = module_0.Node(var_7)
    node_15 = module_0.Node(node_1)


def test_case_967():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(list_0)


def test_case_968():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_1)
    var_2 = queue_3.enqueue(queue_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(str_1)
    var_5 = queue_7.enqueue(node_7)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_969():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_3)
    dict_0 = {var_1: node_3, node_3: str_2, str_2: str_3, queue_5: str_2}
    node_4 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(queue_7)
    var_4 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_6 = module_0.Node(queue_12)
    node_7 = module_0.Node(var_6)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_8 = module_0.Node(queue_14)
    int_0 = 1607
    node_9 = module_0.Node(int_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_1)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    node_11 = module_0.Node(node_10)
    var_9 = queue_22.dequeue()
    node_12 = module_0.Node(node_10)


def test_case_970():
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_1)
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_3.dequeue()
    node_1 = module_0.Node(var_5)
    queue_5 = module_0.Queue()
    var_6 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_7 = queue_5.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(str_3)
    dict_0 = {var_8: node_3, node_3: str_2, str_2: str_3, queue_10: str_2}
    node_4 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_10 = queue_13.dequeue()
    node_6 = module_0.Node(queue_2)


def test_case_971():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_972():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_0 = module_0.Node(var_2)
    queue_4 = module_0.Queue()


def test_case_973():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)


def test_case_974():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_2)
    dict_0 = {var_3: node_1, node_1: str_1, str_1: str_2, queue_5: str_1}
    node_2 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(queue_7)
    var_6 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    str_4 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_4)
    node_8 = module_0.Node(str_4)
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(queue_16)
    var_11 = queue_17.dequeue()
    assert queue_17.tail is None
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_5)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_12 = queue_19.enqueue(node_9)
    var_13 = queue_18.dequeue()
    var_14 = queue_19.dequeue()
    assert queue_19.tail is None
    queue_20 = module_0.Queue()


def test_case_975():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    dict_0 = {queue_1: node_2, var_0: list_0}
    node_3 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_2)
    queue_11 = module_0.Queue()
    var_2 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    int_0 = 1992
    node_11 = module_0.Node(int_0)
    var_3 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_9.enqueue(var_3)


def test_case_976():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    var_3 = queue_3.enqueue(list_0)


def test_case_977():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_6.dequeue()
    assert queue_6.tail is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_0, none_type_1: var_3}
    node_4 = module_0.Node(dict_0)
    int_1 = -65
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(int_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_5)
    var_6 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(node_7)
    queue_13 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(bool_1)
    var_8 = queue_4.enqueue(queue_11)


def test_case_978():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    node_3 = module_0.Node(none_type_0)
    var_4 = queue_5.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_4 = module_0.Node(queue_8)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    node_7 = module_0.Node(var_6)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_8 = queue_16.dequeue()
    var_9 = queue_2.dequeue()


def test_case_979():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_2)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "~W:Qn]a>6w"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_1, str_1, str_1, var_3}
    list_1 = [var_3, str_1, set_0]
    node_5 = module_0.Node(list_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(queue_9)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    node_8 = module_0.Node(queue_10)
    node_9 = module_0.Node(var_5)
    var_6 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    var_7 = queue_10.enqueue(queue_7)


def test_case_980():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_3 = module_0.Node(queue_9)
    node_4 = module_0.Node(var_4)
    var_5 = queue_9.enqueue(queue_9)
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_0 = {bool_0, var_6, queue_11, var_6}
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(set_0)
    node_5 = module_0.Node(var_7)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.enqueue(queue_13)
    node_8 = module_0.Node(queue_15)
    node_9 = module_0.Node(var_5)


def test_case_981():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)


def test_case_982():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(node_0)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_4}
    node_1 = module_0.Node(dict_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_5)
    node_3 = module_0.Node(none_type_1)
    var_6 = queue_4.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    node_4 = module_0.Node(queue_11)
    node_5 = module_0.Node(var_8)
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_6 = module_0.Node(queue_13)
    node_7 = module_0.Node(none_type_2)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(str_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_17 = module_0.Queue()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    queue_18 = module_0.Queue()
    var_11 = queue_18.dequeue()
    queue_19 = module_0.Queue()


def test_case_983():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_1 = module_0.Node(var_3)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_5 = module_0.Node(var_4)
    var_5 = queue_8.dequeue()


def test_case_984():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    var_3 = queue_5.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == "~%25QZ3{"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_4 = module_0.Node(var_5)
    queue_10 = module_0.Queue()


def test_case_985():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_3 = module_0.Node(var_0)


def test_case_986():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_1 = module_0.Node(queue_6)
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    var_9 = queue_11.dequeue()
    str_2 = "~W:Qn]a>6w"
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(str_2)
    set_0 = {str_2, str_2, str_2, var_10}
    list_1 = [var_10, str_2, set_0]
    node_8 = module_0.Node(list_1)
    var_11 = queue_10.dequeue()


def test_case_987():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()


def test_case_988():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    bool_0 = False
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    set_0 = {bool_0, var_2, queue_1, var_2}
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(set_0)
    node_0 = module_0.Node(var_3)
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    tuple_0 = (bool_1,)
    node_2 = module_0.Node(tuple_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_5)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(none_type_0)
    var_7 = queue_9.enqueue(none_type_0)
    int_0 = -524
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(int_0)
    queue_11 = module_0.Queue()


def test_case_989():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    dict_0 = {var_2: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_0)
    str_2 = "~W:Qn]a>6w"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    set_0 = {str_2, str_2, str_2, var_3}
    list_0 = [var_3, str_2, set_0]
    node_5 = module_0.Node(list_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    node_8 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_990():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_2 = "~W:Qn]a>6w"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_2)
    set_0 = {str_2, str_2, str_2, var_1}
    list_0 = [var_1, str_2, set_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(queue_7)
    str_3 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_3)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_4)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_4 = module_0.Node(queue_12)
    node_5 = module_0.Node(var_6)
    var_7 = queue_12.enqueue(queue_12)
    int_0 = 1992
    node_6 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    node_7 = module_0.Node(var_7)


def test_case_991():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)


def test_case_992():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(node_1)


def test_case_993():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_0 = queue_8.enqueue(node_8)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    node_10 = module_0.Node(str_0)
    queue_10 = module_0.Queue()


def test_case_994():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_1)
    var_2 = queue_3.enqueue(queue_3)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    node_7 = module_0.Node(var_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_8)
    var_5 = queue_7.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_995():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_8 = module_0.Node(var_2)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    var_6 = queue_7.enqueue(var_5)
    var_7 = queue_2.enqueue(var_1)


def test_case_996():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(queue_5)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_2)
    node_5 = module_0.Node(str_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(str_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(queue_7)
    str_4 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_4)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    var_6 = queue_8.enqueue(node_6)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_997():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_4 = queue_5.dequeue()
    node_4 = module_0.Node(none_type_1)


def test_case_998():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_0 = module_0.Node(queue_6)
    node_1 = module_0.Node(none_type_0)
    var_4 = queue_7.enqueue(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_2)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(queue_14)
    str_1 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_1)
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(var_8)
    int_1 = 1992
    node_5 = module_0.Node(int_1)
    queue_18 = module_0.Queue()


def test_case_999():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_4)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_6 = queue_5.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    var_7 = queue_5.dequeue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(str_0)
    queue_9 = module_0.Queue()
    bool_2 = False
    queue_10 = module_0.Queue()
    var_9 = queue_10.dequeue()
    set_1 = {bool_2, var_9, queue_10, var_9}
    queue_11 = module_0.Queue()
    var_10 = queue_11.enqueue(set_1)
    node_6 = module_0.Node(var_10)
    var_11 = queue_8.enqueue(queue_2)


def test_case_1000():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(var_0)


def test_case_1001():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_4)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -524
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(int_0)
    queue_7 = module_0.Queue()


def test_case_1002():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    dict_1 = {queue_2: node_2, var_1: list_0}
    node_3 = module_0.Node(dict_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_6)
    var_5 = queue_7.enqueue(var_4)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(node_5)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(queue_10)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    node_9 = module_0.Node(var_7)
    queue_14 = module_0.Queue()
    var_8 = queue_11.enqueue(node_5)


def test_case_1003():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_2: str_0}
    node_3 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_4)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    var_3 = queue_7.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_3)
    node_7 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_16 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(str_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    queue_18 = module_0.Queue()
    node_9 = module_0.Node(bool_2)
    queue_19 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_20 = module_0.Queue()
    var_9 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    var_10 = queue_6.enqueue(node_1)


def test_case_1004():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_2 = module_0.Node(queue_4)
    node_3 = module_0.Node(var_4)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(var_1)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1005():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1006():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    var_4 = queue_2.dequeue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(node_3)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_10)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    node_8 = module_0.Node(list_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_11 = module_0.Node(list_2)
    complex_2 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_2)
    queue_20 = module_0.Queue()
    none_type_2 = None
    queue_21 = module_0.Queue()
    var_11 = queue_21.enqueue(none_type_2)
    queue_22 = module_0.Queue()
    node_13 = module_0.Node(var_11)
    node_14 = module_0.Node(var_5)


def test_case_1007():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_1008():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()


def test_case_1009():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_1010():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_1011():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    var_0 = queue_7.enqueue(queue_7)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()


def test_case_1012():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_0 = queue_6.enqueue(node_7)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_1 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_2 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    node_9 = module_0.Node(queue_7)


def test_case_1013():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    node_9 = module_0.Node(list_1)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_2)
    var_4 = queue_10.dequeue()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_11 = module_0.Node(list_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_1014():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)


def test_case_1015():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(queue_8)
    var_6 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(queue_12)
    node_6 = module_0.Node(none_type_1)
    var_8 = queue_11.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_17.dequeue()
    node_8 = module_0.Node(queue_17)
    var_11 = queue_17.enqueue(var_10)
    var_12 = var_6.enqueue(queue_12)


def test_case_1016():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(node_5)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_6)
    bool_0 = False
    tuple_0 = (bool_0,)
    node_8 = module_0.Node(tuple_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    str_4 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_4)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    var_7 = queue_1.enqueue(str_2)


def test_case_1017():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_1)
    queue_2 = module_0.Queue()


def test_case_1018():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)


def test_case_1019():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(var_1)
    var_2 = queue_1.enqueue(queue_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(var_3)
    str_2 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_2)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    node_10 = module_0.Node(queue_11)
    str_4 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_4)
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(var_6)
    queue_14 = module_0.Queue()
    node_11 = module_0.Node(str_4)


def test_case_1020():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_0)
    var_5 = queue_9.dequeue()
    assert queue_9.tail is None
    node_7 = module_0.Node(var_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(bool_2)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None


def test_case_1021():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_0)


def test_case_1022():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_5 = module_0.Node(queue_2)


def test_case_1023():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_2 = module_0.Node(tuple_0)
    int_0 = -65
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(int_0)
    int_1 = 1607
    node_3 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    bool_1 = True
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(bool_1)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_9)
    node_5 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    node_6 = module_0.Node(queue_11)
    node_7 = module_0.Node(var_5)
    queue_12 = module_0.Queue()


def test_case_1024():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(var_5)
    queue_7 = module_0.Queue()
    var_7 = queue_5.enqueue(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_9 = queue_10.dequeue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(str_2)
    var_12 = queue_14.dequeue()
    assert queue_14.tail is None
    node_3 = module_0.Node(var_12)
    queue_15 = module_0.Queue()
    var_13 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_14 = queue_16.enqueue(queue_15)
    var_15 = queue_16.dequeue()
    assert queue_16.tail is None
    queue_17 = module_0.Queue()
    none_type_1 = None
    queue_18 = module_0.Queue()
    var_16 = queue_18.enqueue(none_type_1)
    queue_19 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    queue_20 = module_0.Queue()
    node_5 = module_0.Node(var_9)


def test_case_1025():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    node_3 = module_0.Node(queue_11)
    var_6 = queue_11.enqueue(var_5)
    var_7 = queue_11.enqueue(var_5)


def test_case_1026():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -65
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(int_0)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_2)
    var_3 = queue_2.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_4)
    queue_8 = module_0.Queue()
    var_5 = queue_6.enqueue(var_1)


def test_case_1027():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(bool_0)


def test_case_1028():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(none_type_0)
    var_3 = queue_6.enqueue(none_type_0)
    node_5 = module_0.Node(node_1)


def test_case_1029():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()


def test_case_1030():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(str_1)
    node_3 = module_0.Node(str_1)
    var_5 = queue_9.enqueue(node_3)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_4 = module_0.Node(var_6)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    var_9 = queue_13.dequeue()
    dict_0 = {queue_13: node_6, var_9: list_0}
    node_7 = module_0.Node(dict_0)
    queue_14 = module_0.Queue()


def test_case_1031():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_1032():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)


def test_case_1033():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    bool_3 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_3, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    node_6 = module_0.Node(var_3)
    node_7 = module_0.Node(bool_3)
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_6 = queue_7.enqueue(var_5)


def test_case_1034():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_1035():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_1036():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_0, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_6 = module_0.Node(list_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    var_4 = queue_7.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_3)
    dict_0 = {var_6: node_10, node_10: str_2, str_2: str_3, queue_11: str_2}
    node_11 = module_0.Node(dict_0)
    queue_12 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_12 = module_0.Node(list_2)
    node_13 = module_0.Node(bool_3)
    queue_13 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_14 = module_0.Node(bytes_0)
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_15 = module_0.Node(var_8)
    node_16 = module_0.Node(none_type_0)


def test_case_1037():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_0, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(var_2)
    queue_9 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()


def test_case_1038():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_4)
    dict_0 = {var_3: node_7, node_7: str_3, str_3: str_4, queue_10: str_3}
    node_8 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_5)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_1 = -4556
    node_10 = module_0.Node(int_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_11 = module_0.Node(node_5)


def test_case_1039():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_0 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_0, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(str_1)
    var_3 = queue_7.enqueue(node_7)
    int_0 = 1607
    node_9 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    var_5 = queue_10.dequeue()


def test_case_1040():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(list_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_4)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    var_3 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(queue_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(var_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    queue_15 = module_0.Queue()


def test_case_1041():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(str_1)


def test_case_1042():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bool_1 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_1, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_1)
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(queue_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_7 = module_0.Node(queue_3)
    node_8 = module_0.Node(var_2)
    var_3 = queue_3.enqueue(queue_3)
    str_1 = "vOK:\\f"
    node_9 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    bool_2 = False
    node_10 = module_0.Node(bool_2)
    queue_6 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_12 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_13 = module_0.Node(var_5)


def test_case_1043():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(var_1)
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    node_0 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(queue_8)
    bool_0 = False
    tuple_0 = (bool_0,)
    node_3 = module_0.Node(tuple_0)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_4)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_7 = queue_19.enqueue(node_5)
    var_8 = queue_5.dequeue()
    assert queue_5.tail is None


def test_case_1044():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = False
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    set_0 = {bool_1, var_1, queue_4, var_1}
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(set_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_2)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_1)


def test_case_1045():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == -524
    assert queue_0.head is None
    assert queue_0.tail is None


def test_case_1046():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = True
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(bool_1)
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(var_2)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(bool_3)
    queue_9 = module_0.Queue()


def test_case_1047():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    bool_1 = False
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    set_0 = {bool_1, var_3, queue_3, var_3}
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(set_0)
    node_2 = module_0.Node(var_4)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(queue_4)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    node_6 = module_0.Node(none_type_1)
    var_6 = queue_5.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    node_7 = module_0.Node(queue_8)
    node_8 = module_0.Node(var_7)
    var_8 = queue_8.enqueue(queue_8)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    node_10 = module_0.Node(var_9)
    queue_14 = module_0.Queue()
    bool_2 = False
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    set_1 = {bool_2, var_10, queue_15, var_10}
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(set_1)
    node_11 = module_0.Node(var_11)
    node_12 = module_0.Node(bool_2)
    node_13 = module_0.Node(queue_15)
    queue_17 = module_0.Queue()
    var_12 = queue_17.dequeue()
    node_14 = module_0.Node(var_12)
    none_type_3 = None
    queue_18 = module_0.Queue()
    var_13 = queue_18.enqueue(none_type_3)
    node_15 = module_0.Node(queue_7)


def test_case_1048():
    str_0 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_0)


def test_case_1049():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(none_type_1)
    var_2 = queue_3.enqueue(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_2: none_type_2, node_3: bool_0, none_type_2: var_3}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(none_type_0)


def test_case_1050():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_3 = "vOK:\\f"
    node_3 = module_0.Node(str_3)
    node_4 = module_0.Node(node_0)


def test_case_1051():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(var_1)
    var_2 = queue_1.enqueue(queue_1)
    queue_2 = module_0.Queue()
    float_0 = 2664.4865
    node_2 = module_0.Node(float_0)


def test_case_1052():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    str_0 = "vOK:\\f"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_1 = queue_6.enqueue(queue_5)
    node_6 = module_0.Node(queue_7)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    node_8 = module_0.Node(str_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    int_1 = -65
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(int_1)
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    node_11 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    int_2 = 1992
    node_12 = module_0.Node(int_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_1053():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    node_7 = module_0.Node(none_type_3)
    var_7 = queue_11.enqueue(none_type_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    node_8 = module_0.Node(queue_12)
    node_9 = module_0.Node(var_8)
    var_9 = queue_12.enqueue(queue_12)
    int_0 = 1607
    node_10 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    var_10 = queue_12.dequeue()
    assert queue_12.tail is None
    assert var_10.tail is None


def test_case_1054():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(var_4)
    queue_5 = module_0.Queue()
    var_6 = queue_3.enqueue(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_7 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_8 = queue_7.enqueue(complex_0)


def test_case_1055():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_1 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    var_2 = queue_11.enqueue(queue_11)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_12 = module_0.Queue()


def test_case_1056():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(node_6)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    node_9 = module_0.Node(node_8)
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_11.dequeue()
    complex_2 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_2)
    queue_14 = module_0.Queue()
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    node_11 = module_0.Node(var_6)
    var_7 = queue_10.dequeue()


def test_case_1057():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_1)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    node_4 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    dict_0 = {queue_5: node_5, var_3: list_0}
    node_6 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_7 = module_0.Node(var_5)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    node_11 = module_0.Node(queue_14)
    node_12 = module_0.Node(var_6)
    node_13 = module_0.Node(queue_14)
    node_14 = module_0.Node(queue_0)


def test_case_1058():
    bytes_0 = b""
    node_0 = module_0.Node(bytes_0)


def test_case_1059():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(queue_1)
    bool_1 = False
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    set_0 = {bool_1, var_0, queue_2, var_0}
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_6 = module_0.Node(var_1)
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(queue_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_11 = module_0.Node(list_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_12 = module_0.Node(queue_7)
    node_13 = module_0.Node(none_type_0)
    var_4 = queue_8.enqueue(none_type_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_14 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(node_14)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    node_15 = module_0.Node(queue_11)
    node_16 = module_0.Node(var_6)
    var_7 = queue_11.enqueue(queue_11)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_9.enqueue(node_0)


def test_case_1060():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_6)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    bool_2 = True
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(bool_2)
    str_1 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_11 = module_0.Node(list_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(queue_13)
    var_7 = queue_14.dequeue()
    assert queue_14.tail is None
    queue_15 = module_0.Queue()
    str_3 = ":LY^21xf6[CVs"
    node_13 = module_0.Node(str_3)
    var_8 = queue_15.dequeue()


def test_case_1061():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_2: str_0}
    node_2 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(none_type_0)
    var_2 = queue_6.enqueue(none_type_0)
    var_3 = queue_2.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == "~%25QZ3{"


def test_case_1062():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(none_type_0)
    var_6 = queue_7.enqueue(none_type_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(str_2)
    dict_0 = {var_7: node_6, node_6: str_1, str_1: str_2, queue_8: str_1}
    node_7 = module_0.Node(dict_0)
    queue_9 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_4)
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    var_9 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_10 = queue_11.dequeue()
    bool_2 = False
    node_10 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    str_5 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(str_5)
    node_11 = module_0.Node(str_5)
    node_12 = module_0.Node(node_9)


def test_case_1063():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_2)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_3)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_4)
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_5)
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_10)
    str_6 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_6)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_13 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_7 = queue_22.dequeue()
    queue_23 = module_0.Queue()


def test_case_1064():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_4)
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_5)
    var_4 = queue_5.dequeue()
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()


def test_case_1065():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_1, node_1: str_1, str_1: str_2, queue_1: str_1}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_2)
    var_3 = queue_3.enqueue(queue_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    set_0 = {bool_0, var_4, queue_11, var_4}
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(queue_12)
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_4)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(var_6)
    queue_15 = module_0.Queue()
    int_1 = -4556
    node_10 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_8 = queue_17.enqueue(queue_16)
    node_12 = module_0.Node(queue_18)
    node_13 = module_0.Node(queue_10)


def test_case_1066():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_2)
    var_6 = queue_13.dequeue()
    assert queue_13.tail is None
    node_5 = module_0.Node(var_6)
    queue_14 = module_0.Queue()


def test_case_1067():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_5)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_2)
    node_6 = module_0.Node(str_2)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_1068():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()


def test_case_1069():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_3)
    int_1 = -524
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(int_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()


def test_case_1070():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)


def test_case_1071():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(var_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_3 = module_0.Node(var_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_5 = queue_17.enqueue(none_type_0)
    node_6 = module_0.Node(queue_0)


def test_case_1072():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_4 = module_0.Node(queue_5)
    node_5 = module_0.Node(var_3)
    node_6 = module_0.Node(queue_5)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(queue_6)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_11 = module_0.Node(node_10)
    str_3 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_3)
    node_12 = module_0.Node(str_3)
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_1073():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    node_0 = module_0.Node(str_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_1 = module_0.Node(queue_7)
    node_2 = module_0.Node(none_type_0)
    var_6 = queue_8.enqueue(none_type_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(node_3)
    var_8 = queue_9.dequeue()
    var_9 = queue_10.dequeue()
    assert queue_10.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_10 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_11 = queue_13.dequeue()
    node_5 = module_0.Node(queue_13)
    queue_14 = module_0.Queue()
    var_12 = queue_14.dequeue()
    node_6 = module_0.Node(queue_14)
    node_7 = module_0.Node(var_12)
    var_13 = queue_14.enqueue(queue_14)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_15 = module_0.Queue()
    none_type_2 = None
    queue_16 = module_0.Queue()
    var_14 = queue_16.enqueue(none_type_2)
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(var_14)
    queue_18 = module_0.Queue()


def test_case_1074():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_9 = queue_14.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_10 = queue_0.dequeue()


def test_case_1075():
    str_0 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == "~%25QZ3{"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_3)
    dict_0 = {var_3: node_5, node_5: str_2, str_2: str_3, queue_3: str_2}
    node_6 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_7 = module_0.Node(queue_5)
    node_8 = module_0.Node(var_4)
    var_5 = queue_5.enqueue(queue_5)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_4)
    queue_6 = module_0.Queue()
    node_10 = module_0.Node(str_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_1)
    node_12 = module_0.Node(bool_1)
    node_13 = module_0.Node(queue_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_14 = module_0.Node(list_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(queue_8)
    complex_0 = -2503.2 - 384.3391j
    node_15 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    node_16 = module_0.Node(var_8)
    queue_13 = module_0.Queue()
    node_17 = module_0.Node(var_3)


def test_case_1076():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_4 = module_0.Node(var_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(str_2)
    var_4 = queue_8.enqueue(node_5)
    var_5 = queue_7.dequeue()


def test_case_1077():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_1 = module_0.Node(queue_6)
    node_2 = module_0.Node(var_2)
    var_3 = queue_6.enqueue(queue_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    complex_2 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    queue_14 = module_0.Queue()
    var_7 = queue_13.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    var_8 = queue_18.dequeue()


def test_case_1078():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    str_1 = "vOK:\\f"
    node_6 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_7 = module_0.Node(var_4)
    var_5 = queue_1.dequeue()


def test_case_1079():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    dict_0 = {queue_1: node_2, var_1: list_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_2)
    node_4 = module_0.Node(str_2)
    int_0 = -524
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(int_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_6 = module_0.Node(var_4)


def test_case_1080():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_0 = module_0.Node(queue_4)
    node_1 = module_0.Node(none_type_0)
    var_3 = queue_3.enqueue(none_type_0)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    var_5 = queue_6.dequeue()
    assert var_5 == "~%25QZ3{"
    assert queue_6.head is None
    assert queue_6.tail is None
    list_0 = [queue_2, var_3, str_0]
    var_6 = queue_1.enqueue(list_0)


def test_case_1081():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_3)
    var_3 = queue_4.dequeue()


def test_case_1082():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    node_6 = module_0.Node(str_0)
    node_7 = module_0.Node(queue_5)


def test_case_1083():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()


def test_case_1084():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    node_6 = module_0.Node(node_5)
    str_2 = "vOK:\\f"
    node_7 = module_0.Node(str_2)
    dict_0 = {}
    node_8 = module_0.Node(dict_0)
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_1085():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_8 = module_0.Node(var_0)
    queue_4 = module_0.Queue()
    node_9 = module_0.Node(bool_0)


def test_case_1086():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    set_0 = {bool_0, var_2, queue_4, var_2}
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(set_0)
    node_2 = module_0.Node(var_3)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_2)


def test_case_1087():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_1088():
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_1089():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_1090():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()


def test_case_1091():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(none_type_0)
    var_2 = queue_1.enqueue(none_type_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    var_5 = queue_5.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(node_6)
    var_8 = queue_16.dequeue()
    var_9 = queue_17.dequeue()
    assert queue_17.tail is None
    none_type_3 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_3)
    queue_19 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_11 = queue_20.enqueue(str_1)
    var_12 = queue_20.dequeue()
    assert queue_20.tail is None
    node_7 = module_0.Node(var_12)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_21 = module_0.Queue()


def test_case_1092():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(var_0)


def test_case_1093():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_3)
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(var_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_9 = module_0.Node(var_3)
    queue_14 = module_0.Queue()


def test_case_1094():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    str_1 = ":LY^21xf6[CVs"
    node_4 = module_0.Node(str_1)
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1095():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_0)
    var_2 = queue_3.dequeue()
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    str_1 = ":LY^21xf6[CVs"
    node_1 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    node_2 = module_0.Node(queue_12)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    node_4 = module_0.Node(str_2)
    var_8 = queue_13.enqueue(node_3)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_15.enqueue(queue_14)
    str_4 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_4)
    var_10 = queue_16.enqueue(queue_4)


def test_case_1096():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b""
    node_4 = module_0.Node(bytes_0)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    node_5 = module_0.Node(queue_5)
    var_2 = queue_5.enqueue(var_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(bool_3)
    queue_9 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_1)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_11 = module_0.Node(list_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_13 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_4 = queue_1.dequeue()


def test_case_1097():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_0, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    node_0 = module_0.Node(var_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(var_3)
    queue_11 = module_0.Queue()


def test_case_1098():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    var_3 = queue_2.dequeue()
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_6 = queue_4.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(queue_4)


def test_case_1099():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_3)
    node_5 = module_0.Node(queue_5)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_6)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(str_3)
    node_7 = module_0.Node(str_3)
    var_5 = queue_11.enqueue(node_7)
    queue_12 = module_0.Queue()


def test_case_1100():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_4)
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    int_0 = -524
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(int_0)
    var_9 = queue_13.dequeue()
    assert queue_13.tail is None
    node_7 = module_0.Node(queue_12)


def test_case_1101():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_2 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    node_4 = module_0.Node(none_type_0)
    var_2 = queue_3.enqueue(none_type_0)
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    node_7 = module_0.Node(queue_1)


def test_case_1102():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(queue_0)
    node_2 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(str_1)
    queue_3 = module_0.Queue()


def test_case_1103():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    queue_0 = module_0.Queue()
    bool_2 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_2, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_1)
    node_6 = module_0.Node(bool_2)
    str_0 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_0)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_10 = module_0.Node(list_3)
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    node_12 = module_0.Node(node_11)
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_13 = module_0.Node(list_4)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    dict_0 = {queue_6: node_13, var_2: list_4}
    node_14 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_15 = module_0.Node(complex_0)
    node_16 = module_0.Node(node_1)


def test_case_1104():
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_1)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(str_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_4)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_10 = module_0.Node(node_9)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    var_2 = queue_7.dequeue()
    bool_2 = False
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    set_0 = {bool_2, var_3, queue_9, var_3}
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(set_0)
    node_12 = module_0.Node(var_4)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(queue_11)
    int_1 = -4556
    node_13 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_14 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_13)
    node_15 = module_0.Node(queue_15)
    var_8 = queue_5.enqueue(var_1)


def test_case_1105():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_2)
    node_4 = module_0.Node(str_2)
    var_3 = queue_8.enqueue(node_4)
    int_1 = -524
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(int_1)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(var_5)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_6 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_7 = queue_16.dequeue()
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    queue_18 = module_0.Queue()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_1)
    queue_19 = module_0.Queue()
    var_8 = queue_19.dequeue()
    node_12 = module_0.Node(node_10)


def test_case_1106():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(str_0)


def test_case_1107():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_0)
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_3 = module_0.Node(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(queue_3)


def test_case_1108():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    set_0 = {bool_0, var_2, queue_4, var_2}
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(set_0)
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(bool_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None


def test_case_1109():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(queue_5)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_3)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(var_3)
    queue_10 = module_0.Queue()
    var_5 = queue_8.enqueue(str_3)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()


def test_case_1110():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -524
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_4 = module_0.Node(list_0)
    var_3 = queue_3.dequeue()


def test_case_1111():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_0.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_11 = module_0.Node(queue_6)
    node_12 = module_0.Node(var_2)
    node_13 = module_0.Node(queue_6)


def test_case_1112():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_4)
    var_3 = queue_4.dequeue()


def test_case_1113():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_1)
    var_1 = queue_0.enqueue(node_1)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_1 = module_0.Queue()
    int_2 = 1607
    node_4 = module_0.Node(int_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    var_3 = queue_1.dequeue()


def test_case_1114():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    int_1 = -524
    queue_10 = module_0.Queue()
    var_0 = queue_10.enqueue(int_1)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_10.dequeue()
    assert var_1 == -524
    assert queue_10.head is None
    assert queue_10.tail is None
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    node_12 = module_0.Node(var_2)
    var_3 = queue_10.dequeue()


def test_case_1115():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None


def test_case_1116():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -524
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(int_0)
    node_4 = module_0.Node(queue_1)


def test_case_1117():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()


def test_case_1118():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    node_3 = module_0.Node(var_3)
    var_4 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_1)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(var_8)
    queue_15 = module_0.Queue()
    var_10 = queue_14.enqueue(queue_14)
    var_11 = queue_15.enqueue(var_10)
    var_12 = queue_15.dequeue()
    assert queue_15.tail is None
    queue_16 = module_0.Queue()
    var_13 = queue_16.dequeue()
    node_4 = module_0.Node(queue_16)
    node_5 = module_0.Node(var_13)
    node_6 = module_0.Node(queue_16)
    queue_17 = module_0.Queue()


def test_case_1119():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_1, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    str_0 = ":LY^21xf6[CVs"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    node_3 = module_0.Node(str_1)
    var_3 = queue_2.enqueue(node_3)
    var_4 = queue_0.enqueue(bool_1)


def test_case_1120():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_0, none_type_1: var_2}
    node_4 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_5 = module_0.Node(queue_4)
    node_6 = module_0.Node(var_3)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(var_4)
    queue_7 = module_0.Queue()
    var_6 = queue_5.enqueue(str_1)
    queue_8 = module_0.Queue()


def test_case_1121():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    str_1 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_5 = queue_3.enqueue(str_2)
    node_1 = module_0.Node(str_2)
    var_6 = queue_3.enqueue(node_1)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_7 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_8 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()


def test_case_1122():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(none_type_1)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(var_3)
    queue_11 = module_0.Queue()
    bool_2 = False
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    set_0 = {bool_2, var_4, queue_12, var_4}
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(set_0)
    node_6 = module_0.Node(var_5)
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(queue_12)
    node_9 = module_0.Node(node_3)
    node_10 = module_0.Node(node_9)


def test_case_1123():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()


def test_case_1124():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(var_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(queue_5)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_4)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_0, none_type_1: var_4}
    node_5 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_6 = module_0.Node(var_5)
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    var_8 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    var_9 = queue_3.enqueue(node_2)


def test_case_1125():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    int_0 = -524
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(int_0)
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_1)
    var_8 = queue_13.dequeue()
    assert queue_13.tail is None
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    node_6 = module_0.Node(var_4)


def test_case_1126():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(node_5)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_7 = module_0.Node(var_4)
    int_0 = -524
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(int_0)
    var_7 = queue_9.dequeue()
    assert queue_9.tail is None
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(none_type_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_9 = module_0.Node(none_type_1)


def test_case_1127():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_1, none_type_1: var_2}
    node_5 = module_0.Node(dict_0)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    node_6 = module_0.Node(var_5)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()


def test_case_1128():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(queue_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_0 = queue_6.dequeue()
    dict_0 = {queue_6: node_7, var_0: list_1}
    node_8 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_10 = module_0.Node(node_9)
    var_1 = queue_7.dequeue()
    int_1 = -524
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(int_1)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_9.dequeue()
    assert queue_9.tail is None
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_9.dequeue()


def test_case_1129():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()


def test_case_1130():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    tuple_0 = (bool_1,)
    node_3 = module_0.Node(tuple_0)
    queue_2 = module_0.Queue()


def test_case_1131():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    dict_0 = {}
    node_2 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_1)
    var_3 = queue_7.dequeue()
    assert queue_7.tail is None
    node_9 = module_0.Node(var_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_10 = module_0.Node(queue_8)
    var_5 = queue_8.enqueue(var_4)
    var_6 = queue_0.enqueue(node_3)


def test_case_1132():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_2 = module_0.Node(queue_8)
    node_3 = module_0.Node(var_4)
    var_5 = queue_8.enqueue(queue_8)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(node_7)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_4)
    queue_19 = module_0.Queue()
    var_9 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_10 = queue_19.dequeue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()


def test_case_1133():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()


def test_case_1134():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(none_type_0)
    var_1 = queue_0.enqueue(none_type_0)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_2 = queue_1.dequeue()


def test_case_1135():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_2 = module_0.Node(tuple_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(var_2)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    node_4 = module_0.Node(queue_12)
    node_5 = module_0.Node(var_4)
    var_5 = queue_12.enqueue(queue_12)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(queue_15)
    node_6 = module_0.Node(node_1)


def test_case_1136():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()


def test_case_1137():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_1 = queue_0.dequeue()


def test_case_1138():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    var_1 = queue_4.dequeue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_9.enqueue(queue_8)
    queue_11 = module_0.Queue()


def test_case_1139():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    bool_0 = False
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    set_0 = {bool_0, var_1, queue_1, var_1}
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(set_0)
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_7 = module_0.Node(queue_5)
    node_8 = module_0.Node(var_3)
    var_4 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_9 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()


def test_case_1140():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(queue_5)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_5)
    var_3 = queue_6.dequeue()
    var_4 = queue_7.dequeue()
    assert queue_7.tail is None
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(str_2)
    var_5 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_3)
    var_7 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(queue_10)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    node_10 = module_0.Node(var_8)
    queue_15 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_11 = module_0.Node(str_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_12 = module_0.Node(list_1)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_5)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()


def test_case_1141():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_0)


def test_case_1142():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_4 = queue_5.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_4)
    dict_0 = {var_5: node_7, node_7: str_3, str_3: str_4, queue_6: str_3}
    node_8 = module_0.Node(dict_0)
    bool_3 = False
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    set_0 = {bool_3, var_6, queue_7, var_6}
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(set_0)
    node_9 = module_0.Node(var_7)
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    node_11 = module_0.Node(bool_2)


def test_case_1143():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_4)
    node_5 = module_0.Node(none_type_1)
    var_2 = queue_5.enqueue(none_type_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_2)
    node_6 = module_0.Node(queue_0)


def test_case_1144():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(node_5)
    var_1 = queue_0.enqueue(none_type_0)


def test_case_1145():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_3)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_3)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(var_5)
    queue_15 = module_0.Queue()
    var_7 = queue_13.enqueue(str_3)
    queue_16 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_4)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_17 = module_0.Queue()
    var_8 = queue_17.enqueue(node_7)
    queue_18 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_19 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_20 = module_0.Queue()
    var_9 = queue_20.dequeue()
    node_10 = module_0.Node(list_1)
    str_5 = "~%25QZ3{"
    queue_21 = module_0.Queue()
    var_10 = queue_21.enqueue(str_5)
    queue_22 = module_0.Queue()
    var_11 = queue_22.enqueue(var_10)
    queue_23 = module_0.Queue()
    node_11 = module_0.Node(var_8)


def test_case_1146():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_0.dequeue()
    assert queue_0.tail is None


def test_case_1147():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_6 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    queue_5 = module_0.Queue()
    var_2 = queue_3.dequeue()
    int_0 = -524
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(int_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    complex_1 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    bool_3 = False
    node_11 = module_0.Node(bool_3)
    queue_12 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_2)
    dict_0 = {var_8: node_12, node_12: str_1, str_1: str_2, queue_13: str_1}
    node_13 = module_0.Node(dict_0)
    queue_14 = module_0.Queue()


def test_case_1148():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_5 = module_0.Node(queue_17)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_18 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    queue_19 = module_0.Queue()
    node_9 = module_0.Node(bool_3)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_3 = queue_21.dequeue()
    node_10 = module_0.Node(queue_21)
    node_11 = module_0.Node(var_3)
    node_12 = module_0.Node(queue_21)
    var_4 = queue_13.dequeue()


def test_case_1149():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_4)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    int_2 = -4556
    node_6 = module_0.Node(int_2)
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.enqueue(queue_7)
    node_8 = module_0.Node(queue_9)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_10 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_4 = queue_15.enqueue(str_2)
    node_11 = module_0.Node(str_2)
    var_5 = queue_15.enqueue(node_11)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_12 = module_0.Node(list_1)
    none_type_2 = None
    queue_16 = module_0.Queue()
    var_6 = queue_16.enqueue(none_type_2)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_7 = queue_1.enqueue(var_4)


def test_case_1150():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_2.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()


def test_case_1151():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_1 = queue_6.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(str_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(var_4)
    queue_14 = module_0.Queue()
    var_6 = queue_13.enqueue(queue_13)
    var_7 = queue_14.enqueue(var_6)
    var_8 = queue_14.dequeue()
    assert queue_14.tail is None
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_15 = module_0.Queue()
    node_7 = module_0.Node(bool_0)
    queue_16 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_4)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()


def test_case_1152():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    var_1 = queue_0.dequeue()


def test_case_1153():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(str_2)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()


def test_case_1154():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_1155():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    node_4 = module_0.Node(queue_0)


def test_case_1156():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(none_type_0)
    var_1 = queue_1.enqueue(none_type_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    node_8 = module_0.Node(queue_13)
    var_6 = queue_13.enqueue(var_5)
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()


def test_case_1157():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_2 = queue_7.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    node_5 = module_0.Node(queue_10)
    var_5 = queue_10.enqueue(var_4)
    assert (
        f"{type(queue_10.head).__module__}.{type(queue_10.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_10.tail).__module__}.{type(queue_10.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    queue_17 = module_0.Queue()
    var_6 = queue_17.enqueue(node_9)
    bool_3 = False
    dict_0 = {none_type_0: none_type_0, node_9: bool_3, none_type_0: var_6}
    node_10 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_12 = module_0.Node(node_11)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_13 = module_0.Node(list_2)
    queue_20 = module_0.Queue()
    node_14 = module_0.Node(bool_4)
    none_type_1 = None
    node_15 = module_0.Node(none_type_1)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_16 = module_0.Node(list_3)
    queue_21 = module_0.Queue()
    var_7 = queue_21.dequeue()
    node_17 = module_0.Node(queue_15)


def test_case_1158():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_5)
    var_5 = queue_6.enqueue(var_4)
    var_6 = queue_6.dequeue()
    assert queue_6.head is None
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_8 = queue_7.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()
    var_10 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(queue_13)
    var_12 = queue_14.dequeue()
    assert queue_14.tail is None
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    var_13 = queue_16.dequeue()
    dict_0 = {queue_16: node_8, var_13: list_1}
    node_9 = module_0.Node(dict_0)
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_14 = queue_17.enqueue(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_2)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    node_12 = module_0.Node(node_11)
    node_13 = module_0.Node(none_type_1)


def test_case_1159():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(node_3)
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(str_2)
    var_4 = queue_11.dequeue()
    assert queue_11.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    node_8 = module_0.Node(node_7)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    node_9 = module_0.Node(queue_15)
    bool_2 = False
    node_10 = module_0.Node(bool_2)


def test_case_1160():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_0 = module_0.Node(queue_2)
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(queue_2)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_6 = module_0.Node(var_1)


def test_case_1161():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_3: node_5, node_5: str_0, str_0: str_1, queue_8: str_0}
    node_6 = module_0.Node(dict_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_4 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_5 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_6 = queue_16.dequeue()
    queue_19 = module_0.Queue()


def test_case_1162():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(queue_5)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    var_4 = queue_2.enqueue(var_1)


def test_case_1163():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_1 = module_0.Node(tuple_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(bool_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_0 = queue_7.dequeue()
    node_5 = module_0.Node(queue_7)
    node_6 = module_0.Node(var_0)
    var_1 = queue_7.enqueue(queue_7)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    var_2 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_3 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_4 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(queue_13)
    var_6 = queue_14.enqueue(queue_6)


def test_case_1164():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(str_0)
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_1)
    var_7 = queue_7.dequeue()


def test_case_1165():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()


def test_case_1166():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_1)
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_5 = module_0.Node(queue_1)
    node_6 = module_0.Node(var_1)
    bool_2 = False
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    set_0 = {bool_2, var_2, queue_2, var_2}
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_7 = module_0.Node(var_3)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_9 = module_0.Node(bool_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_10 = module_0.Node(list_2)
    queue_9 = module_0.Queue()
    node_11 = module_0.Node(bool_4)
    node_12 = module_0.Node(node_7)


def test_case_1167():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.enqueue(node_1)


def test_case_1168():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_4 = queue_12.enqueue(queue_11)
    node_5 = module_0.Node(queue_13)
    node_6 = module_0.Node(queue_2)


def test_case_1169():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(var_1)
    var_2 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_1170():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_1171():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    queue_3 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    var_3 = queue_3.enqueue(var_2)
    var_4 = queue_3.dequeue()
    assert queue_3.head is None
    assert queue_3.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(var_5)
    queue_7 = module_0.Queue()


def test_case_1172():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_0 = module_0.Node(queue_5)
    node_1 = module_0.Node(var_3)
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(node_4)
    var_7 = queue_10.dequeue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(node_4)


def test_case_1173():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()


def test_case_1174():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_6)
    str_1 = "~W:Qn]a>6w"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_1)
    set_0 = {str_1, str_1, str_1, var_2}
    list_1 = [var_2, str_1, set_0]
    node_3 = module_0.Node(list_1)
    bool_1 = False
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    set_1 = {bool_1, var_3, queue_8, var_3}
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(set_1)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(complex_0)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    node_9 = module_0.Node(var_6)


def test_case_1175():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(queue_4)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(queue_6)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_2)
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_1 = -4556
    node_11 = module_0.Node(int_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_1176():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    bytes_0 = b""
    node_0 = module_0.Node(bytes_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_4 = module_0.Node(queue_5)
    var_4 = queue_5.enqueue(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    bool_2 = False
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    set_0 = {bool_2, var_6, queue_9, var_6}
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(set_0)
    node_8 = module_0.Node(var_7)
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(queue_9)
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    node_12 = module_0.Node(node_11)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_13 = module_0.Node(str_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_14 = module_0.Node(list_2)
    node_15 = module_0.Node(bool_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    node_16 = module_0.Node(node_13)


def test_case_1177():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_3 = module_0.Node(tuple_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    dict_0 = {queue_6: node_4, var_3: list_0}
    node_5 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_10.enqueue(queue_9)
    str_4 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(str_4)
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(var_5)
    queue_14 = module_0.Queue()
    var_7 = queue_12.enqueue(str_4)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_1)
    node_10 = module_0.Node(complex_1)
    queue_18 = module_0.Queue()


def test_case_1178():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    var_3 = queue_4.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_1 = module_0.Node(queue_1)


def test_case_1179():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_0)


def test_case_1180():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    str_0 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(complex_0)
    node_9 = module_0.Node(queue_4)


def test_case_1181():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = queue_0.dequeue()


def test_case_1182():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(var_3)
    var_4 = queue_6.enqueue(queue_6)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    bool_1 = False
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    set_0 = {bool_1, var_5, queue_8, var_5}
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(set_0)
    node_7 = module_0.Node(var_6)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(queue_8)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    node_10 = module_0.Node(queue_10)
    node_11 = module_0.Node(var_7)
    node_12 = module_0.Node(queue_10)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_13 = module_0.Node(queue_12)
    node_14 = module_0.Node(none_type_2)
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_3)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_15 = module_0.Node(queue_15)
    node_16 = module_0.Node(none_type_3)
    var_10 = queue_16.enqueue(none_type_3)
    var_11 = queue_8.enqueue(var_4)


def test_case_1183():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(complex_0)


def test_case_1184():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    bool_0 = False
    queue_3 = module_0.Queue()
    var_5 = queue_3.dequeue()
    set_0 = {bool_0, var_5, queue_3, var_5}
    queue_4 = module_0.Queue()
    var_6 = queue_4.enqueue(set_0)
    node_0 = module_0.Node(var_6)
    node_1 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_7 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_8 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()


def test_case_1185():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(none_type_0)
    var_2 = queue_2.enqueue(none_type_0)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_2)
    node_4 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(node_5)
    var_5 = queue_6.dequeue()
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_8 = queue_8.dequeue()
    node_6 = module_0.Node(var_8)
    bool_0 = True
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(bool_1)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()


def test_case_1186():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_2)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_5 = module_0.Node(queue_0)
    node_6 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_8 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    var_2 = queue_3.dequeue()


def test_case_1187():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()
    bytes_0 = b""
    node_5 = module_0.Node(bytes_0)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    node_8 = module_0.Node(node_7)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    queue_15 = module_0.Queue()
    none_type_0 = None
    queue_16 = module_0.Queue()
    var_4 = queue_16.enqueue(none_type_0)
    queue_17 = module_0.Queue()
    node_12 = module_0.Node(var_4)
    queue_18 = module_0.Queue()
    int_1 = -524
    queue_19 = module_0.Queue()
    var_5 = queue_19.enqueue(int_1)
    var_6 = queue_17.dequeue()


def test_case_1188():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_2.dequeue()
    assert queue_2.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_5)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(queue_4)
    bytes_0 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_0)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_2)
    queue_6 = module_0.Queue()
    var_6 = queue_4.enqueue(node_0)


def test_case_1189():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_5 = module_0.Node(none_type_0)


def test_case_1190():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    var_4 = queue_5.enqueue(queue_5)
    var_5 = queue_6.enqueue(var_4)
    var_6 = queue_0.enqueue(queue_2)


def test_case_1191():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    node_4 = module_0.Node(node_3)


def test_case_1192():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~W:Qn]a>6w"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    set_0 = {str_1, str_1, str_1, var_3}
    list_0 = [var_3, str_1, set_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_6.dequeue()
    bool_0 = False
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    set_1 = {bool_0, var_7, queue_9, var_7}
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(set_1)
    node_2 = module_0.Node(var_8)
    node_3 = module_0.Node(bool_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    var_9 = queue_11.enqueue(queue_11)
    queue_12 = module_0.Queue()


def test_case_1193():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_4 = module_0.Node(var_1)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    int_1 = 1607
    node_6 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "vOK:\\f"
    node_7 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_3 = queue_12.enqueue(str_2)
    assert (
        f"{type(queue_12.head).__module__}.{type(queue_12.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_12.tail).__module__}.{type(queue_12.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_12.dequeue()
    assert queue_12.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    var_6 = queue_5.enqueue(queue_3)


def test_case_1194():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_1 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_14 = module_0.Queue()
    var_2 = queue_14.enqueue(node_6)
    assert (
        f"{type(queue_14.head).__module__}.{type(queue_14.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_14.tail).__module__}.{type(queue_14.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(bool_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_3 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_4 = queue_17.enqueue(node_1)


def test_case_1195():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_3)
    var_3 = queue_4.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_4.head is None
    assert queue_4.tail is None
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_4)
    str_5 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_5)
    dict_0 = {var_4: node_3, node_3: str_4, str_4: str_5, queue_5: str_4}
    node_4 = module_0.Node(dict_0)
    node_5 = module_0.Node(str_4)
    node_6 = module_0.Node(queue_4)


def test_case_1196():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    var_3 = queue_3.enqueue(node_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_6)


def test_case_1197():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_1 = -65
    queue_8 = module_0.Queue()
    var_1 = queue_8.enqueue(int_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()


def test_case_1198():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(queue_2)
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_7 = module_0.Node(str_0)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_9)
    bool_1 = False
    dict_1 = {none_type_2: none_type_2, node_9: bool_1, none_type_2: var_3}
    node_10 = module_0.Node(dict_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    node_12 = module_0.Node(complex_0)
    complex_1 = -2503.2 - 384.3391j
    node_13 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_14 = module_0.Node(list_1)
    node_15 = module_0.Node(node_13)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_16 = module_0.Node(bytes_0)
    queue_10 = module_0.Queue()


def test_case_1199():
    bool_0 = True
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    node_2 = module_0.Node(node_1)
    bytes_0 = b""
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_5 = module_0.Node(queue_5)
    node_6 = module_0.Node(var_2)
    var_3 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.enqueue(node_6)


def test_case_1200():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()
    var_5 = queue_5.enqueue(queue_5)
    var_6 = queue_6.enqueue(var_5)
    var_7 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_8 = queue_8.enqueue(queue_7)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_4)
    queue_12 = module_0.Queue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_5)
    queue_13 = module_0.Queue()
    node_9 = module_0.Node(str_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_0)
    node_11 = module_0.Node(bool_1)
    node_12 = module_0.Node(queue_13)
    str_6 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_6)
    str_7 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(str_7)
    dict_0 = {var_10: node_13, node_13: str_6, str_6: str_7, queue_14: str_6}
    node_14 = module_0.Node(dict_0)
    queue_15 = module_0.Queue()


def test_case_1201():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_1 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    var_6 = queue_10.dequeue()
    assert queue_10.tail is None
    node_3 = module_0.Node(var_6)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    int_1 = 1607
    node_8 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_9 = module_0.Node(queue_1)


def test_case_1202():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    dict_0 = {queue_4: node_2, var_1: list_1}
    node_3 = module_0.Node(dict_0)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_3)
    node_11 = module_0.Node(bool_3)
    node_12 = module_0.Node(node_11)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_13 = module_0.Node(queue_8)
    node_14 = module_0.Node(none_type_3)
    node_15 = module_0.Node(node_6)


def test_case_1203():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    var_1 = queue_1.dequeue()


def test_case_1204():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_1205():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    bool_0 = False
    queue_3 = module_0.Queue()
    var_5 = queue_3.dequeue()
    set_0 = {bool_0, var_5, queue_3, var_5}
    queue_4 = module_0.Queue()
    var_6 = queue_4.enqueue(set_0)
    node_1 = module_0.Node(var_6)
    node_2 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_7 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_8 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    int_0 = -524
    queue_8 = module_0.Queue()
    var_9 = queue_8.enqueue(int_0)
    queue_9 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_10 = queue_10.enqueue(node_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_11 = queue_12.dequeue()
    node_5 = module_0.Node(queue_12)
    var_12 = queue_12.enqueue(var_11)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_7 = module_0.Node(bytes_0)
    bool_2 = True
    queue_15 = module_0.Queue()
    var_13 = queue_15.enqueue(bool_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_14 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_15 = queue_18.enqueue(queue_17)
    var_16 = queue_18.dequeue()
    assert queue_18.tail is None
    queue_19 = module_0.Queue()
    node_8 = module_0.Node(node_6)


def test_case_1206():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(str_0)
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(var_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_3 = module_0.Node(var_2)
    queue_13 = module_0.Queue()
    var_4 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_5 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_1207():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_0)
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_0)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    queue_5 = module_0.Queue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_13)
    var_8 = queue_14.dequeue()
    assert queue_14.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_10 = queue_16.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    node_10 = module_0.Node(queue_1)


def test_case_1208():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    str_0 = ":LY^21xf6[CVs"
    node_1 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(var_0)
    node_4 = module_0.Node(queue_1)


def test_case_1209():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(var_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_8 = queue_16.dequeue()
    none_type_2 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_2)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_3 = module_0.Node(queue_18)
    node_4 = module_0.Node(none_type_2)
    var_10 = queue_17.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_22 = module_0.Queue()
    var_11 = queue_22.enqueue(str_2)
    queue_23 = module_0.Queue()
    var_12 = queue_23.enqueue(var_11)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_24 = module_0.Queue()
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_25 = module_0.Queue()
    queue_26 = module_0.Queue()
    var_13 = queue_26.enqueue(node_9)
    none_type_3 = None
    queue_27 = module_0.Queue()
    var_14 = queue_27.enqueue(none_type_3)
    queue_28 = module_0.Queue()
    queue_29 = module_0.Queue()


def test_case_1210():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    str_2 = ":LY^21xf6[CVs"
    node_1 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    node_3 = module_0.Node(var_5)
    var_6 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(var_7)
    queue_11 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    str_4 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_4)
    bytes_0 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_0)
    var_9 = queue_11.dequeue()


def test_case_1211():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(var_3)
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_1212():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()


def test_case_1213():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == "~%25QZ3{"
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(queue_8)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(var_7)
    queue_11 = module_0.Queue()
    var_9 = queue_10.enqueue(queue_10)
    var_10 = queue_11.enqueue(var_9)
    int_1 = -524
    queue_12 = module_0.Queue()
    var_11 = queue_12.enqueue(int_1)
    var_12 = queue_12.dequeue()
    assert queue_12.tail is None
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_4)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()


def test_case_1214():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    node_7 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(str_2)
    var_5 = queue_11.dequeue()
    assert queue_11.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.dequeue()
    node_8 = module_0.Node(var_7)
    bytes_1 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_1)
    bool_2 = True
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(bool_2)
    queue_16 = module_0.Queue()
    node_10 = module_0.Node(node_6)


def test_case_1215():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    bool_0 = False
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    set_0 = {bool_0, var_1, queue_1, var_1}
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(set_0)
    node_1 = module_0.Node(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(var_3)
    queue_8 = module_0.Queue()
    var_5 = queue_6.enqueue(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(str_2)
    var_6 = queue_9.enqueue(node_6)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_3)
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(var_7)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_8 = module_0.Node(var_7)
    queue_14 = module_0.Queue()


def test_case_1216():
    set_0 = set()
    node_0 = module_0.Node(set_0)


def test_case_1217():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_1 = module_0.Node(queue_5)
    var_5 = queue_5.enqueue(var_4)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_0)
    node_3 = module_0.Node(node_1)


def test_case_1218():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    int_1 = 1607
    node_3 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_4 = module_0.Node(queue_10)
    node_5 = module_0.Node(none_type_1)
    var_7 = queue_8.dequeue()


def test_case_1219():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(none_type_0)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_1)
    node_6 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_8)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_8: bool_1, none_type_2: var_6}
    node_9 = module_0.Node(dict_0)
    node_10 = module_0.Node(none_type_1)


def test_case_1220():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(queue_4)


def test_case_1221():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_2)
    node_5 = module_0.Node(bool_0)


def test_case_1222():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(var_1)
    var_2 = queue_5.enqueue(queue_5)
    queue_6 = module_0.Queue()


def test_case_1223():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    int_1 = 1607
    node_1 = module_0.Node(int_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    var_1 = queue_2.enqueue(var_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_2)
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_2.enqueue(node_2)


def test_case_1224():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_3 = module_0.Node(var_0)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_5 = module_0.Node(queue_1)
    node_6 = module_0.Node(var_1)
    var_2 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(var_4)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_12 = module_0.Node(node_11)
    var_5 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(var_2)


def test_case_1225():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()


def test_case_1226():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1227():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    dict_0 = {var_3: node_3, node_3: str_1, str_1: str_2, queue_3: str_1}
    node_4 = module_0.Node(dict_0)
    str_3 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_3)
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(var_4)
    queue_6 = module_0.Queue()
    var_6 = queue_4.enqueue(str_3)
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    node_5 = module_0.Node(queue_7)
    var_8 = queue_7.enqueue(var_7)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_9 = queue_8.dequeue()
    node_7 = module_0.Node(node_6)
    bool_1 = False
    queue_9 = module_0.Queue()
    var_10 = queue_9.dequeue()
    set_0 = {bool_1, var_10, queue_9, var_10}
    queue_10 = module_0.Queue()
    var_11 = queue_10.enqueue(set_0)
    node_8 = module_0.Node(var_11)
    node_9 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    var_12 = queue_11.dequeue()
    dict_1 = {queue_11: node_10, var_12: list_1}
    node_11 = module_0.Node(dict_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_12 = module_0.Node(list_2)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_13 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_14 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_15 = queue_19.dequeue()


def test_case_1228():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(var_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(var_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_3)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(var_2)


def test_case_1229():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_0 = module_0.Node(var_3)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    int_1 = -524
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(int_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_1)
    var_9 = queue_12.dequeue()
    assert queue_12.tail is None
    queue_13 = module_0.Queue()
    var_10 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(queue_13)
    str_2 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_12 = queue_15.enqueue(str_2)
    queue_16 = module_0.Queue()
    var_13 = queue_16.enqueue(var_12)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_3 = module_0.Node(var_12)
    node_4 = module_0.Node(str_0)


def test_case_1230():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    var_4 = queue_3.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_6 = module_0.Queue()


def test_case_1231():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    bool_0 = True
    queue_4 = module_0.Queue()
    var_0 = queue_4.enqueue(bool_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(queue_6)
    var_3 = queue_7.dequeue()
    assert queue_7.tail is None
    int_0 = -524
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(int_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_1)
    queue_12 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    queue_16 = module_0.Queue()
    node_5 = module_0.Node(queue_0)


def test_case_1232():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    node_2 = module_0.Node(var_1)
    queue_4 = module_0.Queue()


def test_case_1233():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    int_1 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    node_2 = module_0.Node(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_3.dequeue()


def test_case_1234():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_3}
    node_1 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()


def test_case_1235():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bytes_0 = b""
    node_1 = module_0.Node(bytes_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_2 = queue_6.dequeue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    node_6 = module_0.Node(node_5)
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    var_4 = queue_5.enqueue(queue_9)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1236():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_2}
    node_2 = module_0.Node(dict_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_5 = module_0.Node(var_6)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(var_7)
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    var_9 = queue_11.enqueue(queue_4)


def test_case_1237():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_1238():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    bool_0 = True
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(bool_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    bytes_1 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_1)
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    int_1 = 1992
    node_8 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    node_9 = module_0.Node(none_type_0)


def test_case_1239():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_3)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_5.dequeue()


def test_case_1240():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)


def test_case_1241():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_1 = -524
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(int_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_5.dequeue()
    assert var_1 == -524
    assert queue_5.head is None
    assert queue_5.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(queue_11)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(var_1)
    assert node_7.data == -524


def test_case_1242():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    var_6 = queue_7.enqueue(var_5)
    var_7 = queue_7.dequeue()
    assert queue_7.tail is None
    node_2 = module_0.Node(var_6)


def test_case_1243():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    bool_0 = True
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(bool_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_1)
    node_2 = module_0.Node(str_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    node_6 = module_0.Node(var_1)


def test_case_1244():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_2)
    var_8 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    node_1 = module_0.Node(queue_10)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    node_2 = module_0.Node(queue_12)
    node_3 = module_0.Node(var_9)
    var_10 = queue_12.enqueue(queue_12)
    queue_13 = module_0.Queue()


def test_case_1245():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    var_1 = queue_1.enqueue(var_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_2)


def test_case_1246():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)


def test_case_1247():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_1248():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(queue_7)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_2 = queue_7.dequeue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_2)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()


def test_case_1249():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_3 = module_0.Node(var_1)
    node_4 = module_0.Node(queue_4)


def test_case_1250():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_2)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()


def test_case_1251():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    var_2 = queue_3.enqueue(var_1)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    var_5 = queue_4.dequeue()
    int_0 = 1607
    node_7 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_9)
    queue_12 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()


def test_case_1252():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_0 = module_0.Node(queue_6)
    bool_0 = True
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(bool_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    var_5 = queue_9.enqueue(var_4)
    bytes_0 = b""
    node_2 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_0)
    var_7 = queue_12.dequeue()
    assert queue_12.tail is None
    bool_1 = False
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    set_0 = {bool_1, var_8, queue_13, var_8}
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(set_0)
    node_3 = module_0.Node(var_9)
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(queue_14)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_15 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(str_1)
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(var_10)
    queue_18 = module_0.Queue()
    var_12 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_13 = queue_19.enqueue(queue_18)
    var_14 = queue_19.dequeue()
    assert queue_19.tail is None
    var_15 = var_14.dequeue()


def test_case_1253():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    var_1 = queue_0.dequeue()


def test_case_1254():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    var_1 = queue_3.dequeue()
    int_0 = 1607
    node_6 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(none_type_0)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_12 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_4 = queue_14.dequeue()
    complex_2 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_2)
    queue_15 = module_0.Queue()
    var_5 = queue_15.dequeue()
    var_6 = queue_15.dequeue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(queue_17)
    bool_1 = False
    queue_18 = module_0.Queue()
    var_8 = queue_18.dequeue()
    set_0 = {bool_1, var_8, queue_18, var_8}
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(set_0)
    node_10 = module_0.Node(var_9)
    node_11 = module_0.Node(bool_1)
    node_12 = module_0.Node(queue_19)
    var_10 = queue_14.enqueue(queue_10)


def test_case_1255():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.enqueue(queue_8)
    node_6 = module_0.Node(queue_10)
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(var_6)
    queue_13 = module_0.Queue()
    var_8 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_1256():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_1 = 1607
    node_2 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_6 = module_0.Node(queue_15)


def test_case_1257():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    node_0 = module_0.Node(queue_2)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    var_4 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_1258():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()


def test_case_1259():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_2 = module_0.Node(queue_0)
    node_3 = module_0.Node(var_0)
    node_4 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_2.dequeue()
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    bytes_0 = b""
    node_7 = module_0.Node(bytes_0)
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_0)


def test_case_1260():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bytes_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1261():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_3)
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    node_3 = module_0.Node(var_4)
    var_5 = queue_4.enqueue(node_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_1262():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(none_type_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_1 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_2 = queue_9.dequeue()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(str_1)
    var_3 = queue_12.enqueue(node_6)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_3)
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_5 = queue_18.enqueue(str_4)
    queue_19 = module_0.Queue()
    var_6 = queue_19.enqueue(var_5)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()


def test_case_1263():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_1264():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    bytes_0 = b"\xc5\xc3\xa7"
    node_2 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bytes_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_3)
    dict_0 = {var_1: node_5, node_5: str_2, str_2: str_3, queue_1: str_2}
    node_6 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    assert var_2 == b"\xc5\xc3\xa7"
    assert queue_0.head is None
    assert queue_0.tail is None


def test_case_1265():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    dict_0 = {queue_3: node_4, node_7: var_1}
    node_8 = module_0.Node(dict_0)


def test_case_1266():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    node_5 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    node_7 = module_0.Node(var_2)
    node_8 = module_0.Node(queue_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(str_1)
    var_4 = queue_0.dequeue()


def test_case_1267():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    var_3 = queue_2.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    set_0 = {bool_1, var_4, queue_4, var_4}
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(set_0)
    node_2 = module_0.Node(var_5)
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(queue_4)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(queue_6)
    var_8 = queue_7.dequeue()
    assert queue_7.tail is None
    node_5 = module_0.Node(var_8)


def test_case_1268():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_1 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_3 = "vOK:\\f"
    node_9 = module_0.Node(str_3)
    int_0 = -4556
    node_10 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(queue_7)
    node_11 = module_0.Node(list_2)


def test_case_1269():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_6 = module_0.Node(node_5)


def test_case_1270():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(var_2)
    var_3 = queue_1.enqueue(queue_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)


def test_case_1271():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_0.dequeue()


def test_case_1272():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    int_0 = -524
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(int_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == -524
    assert queue_1.head is None
    assert queue_1.tail is None
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(bytes_0)


def test_case_1273():
    int_0 = -1472
    node_0 = module_0.Node(int_0)


def test_case_1274():
    queue_0 = module_0.Queue()
    none_type_0 = None
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1275():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_1)


def test_case_1276():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    dict_0 = {}
    node_2 = module_0.Node(dict_0)
    var_2 = queue_0.dequeue()


def test_case_1277():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(queue_3)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_1 = queue_3.dequeue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_10 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    bool_1 = False
    node_11 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    node_12 = module_0.Node(var_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_13 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_14 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_15 = module_0.Node(node_4)


def test_case_1278():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_1)
    var_2 = queue_5.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(var_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(bool_3)
    node_10 = module_0.Node(node_9)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_12 = module_0.Node(bytes_0)
    dict_0 = {}
    node_13 = module_0.Node(dict_0)
    var_6 = queue_5.enqueue(none_type_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )


def test_case_1279():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    node_2 = module_0.Node(none_type_1)
    var_2 = queue_5.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    node_5 = module_0.Node(var_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    node_7 = module_0.Node(bool_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_6 = queue_0.enqueue(queue_6)


def test_case_1280():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_5 = module_0.Node(bytes_0)
    var_2 = queue_1.dequeue()


def test_case_1281():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    dict_0 = {queue_5: node_2, var_0: list_1}
    node_3 = module_0.Node(dict_0)
    var_1 = queue_0.dequeue()


def test_case_1282():
    str_0 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_0 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_2)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    complex_3 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_3)
    queue_6 = module_0.Queue()
    node_7 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(queue_8)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    var_5 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()


def test_case_1283():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bytes_1 = b"\xc5\xc3\xa7"
    node_5 = module_0.Node(bytes_1)
    var_4 = queue_2.dequeue()


def test_case_1284():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    var_5 = queue_4.enqueue(queue_4)
    var_6 = queue_5.enqueue(var_5)
    var_7 = queue_5.dequeue()
    assert queue_5.head is None
    assert queue_5.tail is None
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    bool_0 = True
    queue_6 = module_0.Queue()
    var_8 = queue_6.enqueue(bool_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_8)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_9 = queue_8.dequeue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    node_6 = module_0.Node(var_0)


def test_case_1285():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    node_5 = module_0.Node(queue_6)
    dict_0 = {}
    node_6 = module_0.Node(dict_0)
    int_2 = -524
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(int_2)
    queue_8 = module_0.Queue()


def test_case_1286():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    var_0 = queue_2.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    var_2 = queue_4.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(queue_2)


def test_case_1287():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    str_2 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_2)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    node_6 = module_0.Node(queue_7)
    node_7 = module_0.Node(var_2)
    var_3 = queue_7.enqueue(queue_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_9 = module_0.Node(bytes_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()


def test_case_1288():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_1 = -1472
    node_2 = module_0.Node(int_1)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    var_1 = queue_5.enqueue(var_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    tuple_0 = (queue_2,)
    node_6 = module_0.Node(tuple_0)


def test_case_1289():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_0)
    var_2 = queue_1.enqueue(none_type_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_4)
    var_4 = queue_4.dequeue()
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(queue_7)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(str_3)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_4)
    str_5 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(str_5)
    dict_0 = {var_7: node_8, node_8: str_4, str_4: str_5, queue_10: str_4}
    node_9 = module_0.Node(dict_0)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_6 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_1290():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(node_0)


def test_case_1291():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()


def test_case_1292():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    bool_1 = False
    tuple_0 = (bool_1,)
    node_2 = module_0.Node(tuple_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    var_1 = queue_4.enqueue(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(str_1)
    var_2 = queue_5.enqueue(node_4)
    var_3 = queue_5.enqueue(none_type_0)


def test_case_1293():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()


def test_case_1294():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    bool_1 = False
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    set_0 = {bool_1, var_1, queue_4, var_1}
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(set_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bool_1)
    bool_2 = True
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(bool_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(queue_8)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_6 = queue_13.dequeue()
    node_8 = module_0.Node(var_6)
    var_7 = queue_1.dequeue()


def test_case_1295():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(var_4)
    queue_9 = module_0.Queue()


def test_case_1296():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    int_0 = -524
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(int_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b""
    node_2 = module_0.Node(bytes_0)
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_6)
    int_2 = 1607
    node_4 = module_0.Node(int_2)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(queue_10)
    bool_1 = False
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    set_0 = {bool_1, var_8, queue_12, var_8}
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(set_0)
    node_6 = module_0.Node(var_9)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(var_7)


def test_case_1297():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    var_4 = queue_12.dequeue()
    node_6 = module_0.Node(queue_7)


def test_case_1298():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    var_1 = queue_0.dequeue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_2)
    var_5 = queue_4.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(none_type_1)


def test_case_1299():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(queue_4)
    var_6 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_7 = queue_7.dequeue()
    node_3 = module_0.Node(queue_7)
    var_8 = queue_7.enqueue(var_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_9 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_10 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_5 = module_0.Node(queue_14)
    node_6 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    var_12 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    node_8 = module_0.Node(node_3)


def test_case_1300():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    dict_0 = {queue_2: node_2, var_2: list_0}
    node_3 = module_0.Node(dict_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_6 = module_0.Node(var_4)
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_6 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()


def test_case_1301():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_1 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_1)
    var_3 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_4)
    var_6 = queue_7.dequeue()
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    int_1 = -524
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(int_1)
    var_8 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    node_9 = module_0.Node(list_0)
    var_10 = queue_1.enqueue(queue_1)


def test_case_1302():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_0)


def test_case_1303():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_0, none_type_0: var_1}
    node_2 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_2)
    var_4 = queue_5.dequeue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_6 = module_0.Node(queue_14)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_0)
    queue_18 = module_0.Queue()
    var_10 = queue_11.enqueue(node_0)


def test_case_1304():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(var_4)
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_0 = module_0.Node(queue_10)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_12 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.enqueue(queue_12)
    node_3 = module_0.Node(queue_14)
    str_2 = "vOK:\\f"
    node_4 = module_0.Node(str_2)
    queue_15 = module_0.Queue()


def test_case_1305():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    var_4 = queue_7.enqueue(queue_7)
    var_5 = queue_8.enqueue(var_4)
    bool_1 = True
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(bool_1)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    var_7 = queue_10.dequeue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_4 = module_0.Node(queue_13)
    node_5 = module_0.Node(none_type_1)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_15 = module_0.Queue()
    node_7 = module_0.Node(queue_15)
    node_8 = module_0.Node(var_8)


def test_case_1306():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = ":LY^21xf6[CVs"
    node_1 = module_0.Node(str_0)
    str_1 = "vOK:\\f"
    node_2 = module_0.Node(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(node_2)


def test_case_1307():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    str_0 = "~W:Qn]a>6w"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_0, str_0, str_0, var_0}
    list_0 = [var_0, str_0, set_0]
    node_1 = module_0.Node(list_0)
    str_1 = "vOK:\\f"
    node_2 = module_0.Node(str_1)
    node_3 = module_0.Node(int_0)


def test_case_1308():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_5 = module_0.Node(queue_2)
    node_6 = module_0.Node(var_2)
    var_3 = queue_2.enqueue(queue_2)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_1)
    node_8 = module_0.Node(str_1)
    var_5 = queue_5.enqueue(node_8)
    int_0 = 1607
    node_9 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_9 = queue_9.dequeue()
    bool_1 = False
    node_10 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_10 = queue_12.dequeue()
    node_11 = module_0.Node(queue_12)
    node_12 = module_0.Node(var_10)
    node_13 = module_0.Node(queue_12)
    node_14 = module_0.Node(bool_0)


def test_case_1309():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_1.enqueue(str_0)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_1)
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_2)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_6)


def test_case_1310():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    var_1 = queue_1.enqueue(node_3)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_6 = module_0.Node(int_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_1311():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    queue_2 = module_0.Queue()
    node_5 = module_0.Node(str_3)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    queue_5 = module_0.Queue()


def test_case_1312():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()


def test_case_1313():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_5 = module_0.Node(queue_11)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(node_6)
    var_8 = queue_13.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_3)
    dict_0 = {var_9: node_7, node_7: str_2, str_2: str_3, queue_15: str_2}
    node_8 = module_0.Node(dict_0)
    queue_16 = module_0.Queue()
    none_type_4 = None
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(none_type_4)
    queue_18 = module_0.Queue()
    str_4 = "~W:Qn]a>6w"
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(str_4)
    set_0 = {str_4, str_4, str_4, var_11}
    list_2 = [var_11, str_4, set_0]
    node_9 = module_0.Node(list_2)
    queue_20 = module_0.Queue()


def test_case_1314():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    set_0 = {bool_0, var_2, queue_1, var_2}
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_3)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_2)
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    set_1 = set()
    node_7 = module_0.Node(set_1)
    complex_2 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    var_5 = queue_6.dequeue()
    bool_1 = False
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    set_2 = {bool_1, var_6, queue_8, var_6}
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(set_2)
    node_10 = module_0.Node(var_7)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_1)
    var_10 = queue_11.dequeue()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    node_12 = module_0.Node(node_11)
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(str_1)
    node_13 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_12 = queue_16.dequeue()
    node_14 = module_0.Node(queue_16)
    node_15 = module_0.Node(var_12)
    node_16 = module_0.Node(queue_16)
    queue_17 = module_0.Queue()


def test_case_1315():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    var_5 = queue_4.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    var_6 = queue_8.dequeue()
    var_7 = queue_2.enqueue(bool_1)


def test_case_1316():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_1 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_1317():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_1318():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(var_3)


def test_case_1319():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()


def test_case_1320():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_12 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(str_1)
    node_4 = module_0.Node(str_1)
    int_0 = -524
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(int_0)
    var_7 = queue_14.dequeue()
    assert queue_14.tail is None
    queue_15 = module_0.Queue()


def test_case_1321():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_1 = module_0.Node(tuple_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    var_4 = queue_7.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_7.head is None
    assert queue_7.tail is None
    node_2 = module_0.Node(str_0)


def test_case_1322():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(var_2)
    node_5 = module_0.Node(queue_6)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(queue_8)
    node_7 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_4 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_1323():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    var_3 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.enqueue(queue_10)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(bool_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_3)
    queue_14 = module_0.Queue()
    node_9 = module_0.Node(bool_4)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_8 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(queue_18)
    none_type_1 = None
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(none_type_1)
    queue_21 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_1)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()


def test_case_1324():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_5 = module_0.Node(queue_3)
    var_3 = queue_3.enqueue(var_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_7 = module_0.Node(bytes_0)
    bool_3 = True
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(bool_3)
    queue_7 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_8 = queue_9.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_10 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    dict_0 = {queue_14: node_10, var_9: list_1}
    node_11 = module_0.Node(dict_0)
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_0)
    queue_16 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(str_3)
    var_12 = queue_17.dequeue()
    assert queue_17.tail is None
    node_12 = module_0.Node(var_12)
    queue_18 = module_0.Queue()


def test_case_1325():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()


def test_case_1326():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    int_0 = -1472
    node_1 = module_0.Node(int_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_4)
    int_1 = -524
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(int_1)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    bytes_0 = b"\xc5\xc3\xa7"
    node_4 = module_0.Node(bytes_0)
    bool_0 = True
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(bool_0)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    node_9 = module_0.Node(bool_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(str_3)
    queue_17 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_4)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_5)
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    queue_20 = module_0.Queue()
    var_9 = queue_20.enqueue(node_12)
    queue_21 = module_0.Queue()
    node_13 = module_0.Node(queue_21)
    var_10 = queue_15.enqueue(var_0)


def test_case_1327():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_4)
    var_4 = queue_5.enqueue(var_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_7.dequeue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(queue_10)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(var_2)


def test_case_1328():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    node_5 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    node_6 = module_0.Node(queue_7)
    node_7 = module_0.Node(var_3)
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()


def test_case_1329():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()


def test_case_1330():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(var_0)


def test_case_1331():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    node_4 = module_0.Node(queue_7)
    node_5 = module_0.Node(var_3)
    str_0 = ":LY^21xf6[CVs"
    node_6 = module_0.Node(str_0)
    node_7 = module_0.Node(node_2)


def test_case_1332():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    int_1 = -524
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(int_1)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    var_5 = queue_7.dequeue()
    assert queue_7.tail is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_8 = module_0.Queue()


def test_case_1333():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    var_0 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(queue_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    var_3 = queue_3.dequeue()
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_4)


def test_case_1334():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_2 = module_0.Queue()
    int_0 = -1472
    node_3 = module_0.Node(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(var_0)
    queue_7 = module_0.Queue()
    var_2 = queue_3.dequeue()


def test_case_1335():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(var_5)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_5.dequeue()


def test_case_1336():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    var_4 = queue_3.dequeue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_0)
    var_6 = queue_6.dequeue()
    assert queue_6.tail is None
    node_3 = module_0.Node(none_type_2)


def test_case_1337():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_3 = module_0.Node(node_2)
    var_1 = queue_2.dequeue()


def test_case_1338():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_1 = False
    queue_9 = module_0.Queue()
    var_1 = queue_9.dequeue()
    set_0 = {bool_1, var_1, queue_9, var_1}
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(set_0)
    node_5 = module_0.Node(var_2)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_4 = queue_14.enqueue(none_type_2)
    var_5 = queue_12.dequeue()
    queue_15 = module_0.Queue()
    var_6 = queue_15.dequeue()
    node_7 = module_0.Node(var_6)
    var_7 = queue_15.dequeue()
    node_8 = module_0.Node(complex_0)


def test_case_1339():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    int_1 = -524
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(int_1)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    int_2 = 1992
    node_5 = module_0.Node(int_2)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()


def test_case_1340():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()


def test_case_1341():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_3 = module_0.Node(var_1)
    var_2 = queue_1.dequeue()
    bool_0 = False
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    set_0 = {bool_0, var_3, queue_2, var_3}
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(queue_2)
    var_5 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_1342():
    queue_0 = module_0.Queue()
    none_type_0 = None
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_7.dequeue()
    bool_0 = True
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(bool_0)
    int_0 = -1472
    node_1 = module_0.Node(int_0)
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(str_1)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(var_7)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_2 = module_0.Node(var_7)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    var_10 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_11 = queue_18.dequeue()
    node_5 = module_0.Node(var_11)
    var_12 = queue_4.enqueue(queue_0)


def test_case_1343():
    int_0 = -1472
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    node_2 = module_0.Node(queue_0)


def test_case_1344():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)


def test_case_1345():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(queue_8)
    bool_0 = False
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    set_0 = {bool_0, var_6, queue_9, var_6}
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(set_0)
    node_2 = module_0.Node(var_7)
    var_8 = queue_7.dequeue()


def test_case_1346():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_2 = module_0.Node(var_1)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    dict_0 = {var_3: node_3, node_3: str_1, str_1: str_2, queue_3: str_1}
    node_4 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_8.enqueue(queue_7)
    node_8 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()


def test_case_1347():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    dict_0 = {}
    node_1 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(var_3)
    var_4 = queue_5.enqueue(queue_5)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_5 = module_0.Node(bytes_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_6)
    var_6 = queue_8.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    var_7 = queue_10.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_3)
    dict_1 = {var_8: node_9, node_9: str_2, str_2: str_3, queue_12: str_2}
    node_10 = module_0.Node(dict_1)
    node_11 = module_0.Node(str_2)
    complex_1 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_1)
    queue_13 = module_0.Queue()
    var_9 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_0)
    queue_16 = module_0.Queue()
    node_13 = module_0.Node(var_10)
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(var_5)


def test_case_1348():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    node_3 = module_0.Node(none_type_0)
    var_3 = queue_3.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(var_6)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(var_7)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(queue_13)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_14 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_11 = module_0.Node(str_2)
    queue_18 = module_0.Queue()
    var_9 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_10 = queue_18.dequeue()
    queue_20 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_2)
    node_13 = module_0.Node(bool_2)
    node_14 = module_0.Node(node_13)
    node_15 = module_0.Node(queue_15)


def test_case_1349():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    var_4 = queue_3.dequeue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_4 = module_0.Node(queue_1)


def test_case_1350():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_1351():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(queue_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_1)
    complex_2 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_2)
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    node_13 = module_0.Node(var_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_14 = module_0.Node(list_2)
    node_15 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_0)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()


def test_case_1352():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_1)
    var_3 = queue_4.dequeue()
    str_0 = "8gF^Uhhbr$c}"
    node_2 = module_0.Node(str_0)


def test_case_1353():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    node_5 = module_0.Node(str_0)
    bool_1 = False
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    set_0 = {bool_1, var_3, queue_4, var_3}
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(set_0)
    node_6 = module_0.Node(var_4)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    node_7 = module_0.Node(queue_7)
    node_8 = module_0.Node(var_6)
    var_7 = queue_0.enqueue(set_0)


def test_case_1354():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_2}
    node_2 = module_0.Node(dict_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_4)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(str_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    bool_2 = True
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(bool_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_12 = module_0.Node(list_1)
    queue_17 = module_0.Queue()
    var_7 = queue_17.dequeue()
    dict_1 = {queue_17: node_12, var_7: list_1}
    node_13 = module_0.Node(dict_1)
    queue_18 = module_0.Queue()


def test_case_1355():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.dequeue()
    var_3 = queue_4.enqueue(node_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1356():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    set_0 = {bool_1, var_4, queue_4, var_4}
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(set_0)
    node_1 = module_0.Node(var_5)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(var_6)
    var_7 = queue_3.dequeue()
    assert queue_3.tail is None


def test_case_1357():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(var_1)
    queue_6 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_5)
    var_4 = queue_6.enqueue(var_3)
    var_5 = queue_6.dequeue()
    assert queue_6.head is None
    assert queue_6.tail is None
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    var_7 = queue_7.enqueue(node_2)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_8 = queue_8.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_1358():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(var_0)
    dict_0 = {}
    node_1 = module_0.Node(dict_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    var_2 = queue_2.dequeue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(var_4)


def test_case_1359():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(node_4)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_1 = {none_type_1: none_type_1, node_4: bool_0, none_type_1: var_3}
    node_5 = module_0.Node(dict_1)
    queue_9 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(str_1)
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(var_6)
    queue_16 = module_0.Queue()
    var_8 = queue_15.enqueue(queue_15)
    var_9 = queue_16.enqueue(var_8)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_2)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    int_1 = -4556
    node_11 = module_0.Node(int_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_1)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    node_13 = module_0.Node(node_12)
    queue_23 = module_0.Queue()
    var_10 = queue_23.dequeue()
    queue_24 = module_0.Queue()
    var_11 = queue_23.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_14 = module_0.Node(str_3)
    queue_25 = module_0.Queue()
    queue_26 = module_0.Queue()
    queue_27 = module_0.Queue()
    queue_28 = module_0.Queue()


def test_case_1360():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()


def test_case_1361():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(none_type_1)
    var_2 = queue_4.enqueue(none_type_1)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(node_7)
    bytes_0 = b"\xc5\xc3\xa7"
    node_10 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_1)
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_12)
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    node_14 = module_0.Node(str_2)
    var_6 = queue_11.enqueue(node_13)
    queue_12 = module_0.Queue()


def test_case_1362():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_3, node_3: str_0, str_0: str_1, queue_2: str_0}
    node_4 = module_0.Node(dict_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = 1607
    node_7 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    var_4 = queue_7.enqueue(var_3)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_3)
    node_8 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    assert queue_10.tail is None
    var_7 = queue_9.enqueue(var_6)


def test_case_1363():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_3)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_4 = module_0.Node(queue_12)
    node_5 = module_0.Node(none_type_1)
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_1)
    queue_18 = module_0.Queue()
    var_7 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    var_8 = queue_19.dequeue()
    node_11 = module_0.Node(var_7)
    str_3 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_9 = queue_20.enqueue(str_3)
    queue_21 = module_0.Queue()
    var_10 = queue_0.dequeue()


def test_case_1364():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    var_3 = queue_0.dequeue()


def test_case_1365():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(var_2)
    var_3 = queue_3.enqueue(queue_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_6 = module_0.Node(bytes_0)
    bool_1 = True
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(bool_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_0)
    node_7 = module_0.Node(str_0)
    bool_2 = False
    tuple_0 = (bool_2,)
    node_8 = module_0.Node(tuple_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_0.dequeue()


def test_case_1366():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    int_0 = -65
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(int_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    int_1 = -524
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(int_1)
    var_2 = queue_4.dequeue()
    assert var_2 == -524
    assert queue_4.head is None
    assert queue_4.tail is None
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    var_6 = queue_7.enqueue(var_5)
    var_7 = queue_7.dequeue()
    assert queue_7.head is None
    assert queue_7.tail is None
    queue_8 = module_0.Queue()
    var_8 = queue_8.dequeue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(var_8)
    var_9 = queue_8.enqueue(queue_8)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_9 = module_0.Node(node_4)


def test_case_1367():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_1 = module_0.Node(tuple_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_1 = 1607
    node_5 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_6 = queue_11.dequeue()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    var_7 = queue_11.dequeue()
    var_8 = queue_11.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()


def test_case_1368():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_3.enqueue(var_1)


def test_case_1369():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(node_5)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    node_7 = module_0.Node(queue_10)
    var_4 = queue_10.enqueue(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_1 = False
    node_9 = module_0.Node(bool_1)


def test_case_1370():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    bool_1 = True
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(bool_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_1)
    node_4 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    node_5 = module_0.Node(queue_14)
    var_6 = queue_14.enqueue(var_5)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_2)
    queue_17 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    queue_18 = module_0.Queue()
    var_7 = queue_18.enqueue(node_9)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_8 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    var_9 = queue_21.dequeue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    var_10 = queue_22.dequeue()
    queue_25 = module_0.Queue()
    int_1 = 1992
    node_10 = module_0.Node(int_1)
    none_type_2 = None
    queue_26 = module_0.Queue()
    var_11 = queue_26.enqueue(none_type_2)
    queue_27 = module_0.Queue()
    str_4 = "1Yd=9eK W+Bj:"
    node_11 = module_0.Node(str_4)
    queue_28 = module_0.Queue()
    queue_29 = module_0.Queue()
    var_12 = queue_29.dequeue()
    var_13 = queue_5.enqueue(queue_9)


def test_case_1371():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    var_1 = queue_0.enqueue(var_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_0.enqueue(queue_0)


def test_case_1372():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(node_3)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_1)
    dict_0 = {}
    node_6 = module_0.Node(dict_0)
    str_2 = ":LY^21xf6[CVs"
    node_7 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_3)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(var_1)
    queue_8 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_7)
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()


def test_case_1373():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    var_4 = queue_10.dequeue()
    var_5 = queue_9.dequeue()


def test_case_1374():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_4)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(queue_7)
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_6)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(queue_11)
    var_7 = queue_1.enqueue(str_0)


def test_case_1375():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_0)


def test_case_1376():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_2 = module_0.Node(bytes_0)


def test_case_1377():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_2 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_3 = queue_11.dequeue()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(var_3)
    var_4 = queue_0.enqueue(node_0)


def test_case_1378():
    int_0 = 2029
    node_0 = module_0.Node(int_0)


def test_case_1379():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(var_1)
    queue_3 = module_0.Queue()


def test_case_1380():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()


def test_case_1381():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1382():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()


def test_case_1383():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(queue_2)
    var_5 = queue_1.enqueue(node_0)


def test_case_1384():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    str_0 = ":LY^21xf6[CVs"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.enqueue(queue_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_5 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(var_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_2 = "~W:Qn]a>6w"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_2)
    set_0 = {str_2, str_2, str_2, var_6}
    list_1 = [var_6, str_2, set_0]
    node_7 = module_0.Node(list_1)
    var_7 = queue_0.enqueue(queue_8)


def test_case_1385():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_2 = module_0.Node(var_2)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    set_0 = {bool_0, var_3, queue_10, var_3}
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(set_0)
    assert (
        f"{type(queue_11.head).__module__}.{type(queue_11.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_11.tail).__module__}.{type(queue_11.tail).__qualname__}"
        == "queue5.Node"
    )
    node_6 = module_0.Node(var_4)
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(queue_10)
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    str_2 = "~W:Qn]a>6w"
    queue_16 = module_0.Queue()
    var_6 = queue_16.enqueue(str_2)
    set_1 = {str_2, str_2, str_2, var_6}
    list_0 = [var_6, str_2, set_1]
    node_9 = module_0.Node(list_0)
    var_7 = queue_14.dequeue()


def test_case_1386():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_1 = queue_0.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_0, none_type_0: var_2}
    node_3 = module_0.Node(dict_0)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    int_1 = 1992
    node_5 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_6 = module_0.Node(queue_5)
    node_7 = module_0.Node(var_4)
    complex_2 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_2)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_6)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_10 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_11 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_1)
    var_7 = queue_11.dequeue()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(node_13)
    bytes_1 = b"n\x13\xf9\x1d\xd6\xaa\x1b\xda\xf0]"
    dict_1 = {node_10: queue_5, queue_10: queue_1, bytes_1: var_0, var_1: node_1}
    node_14 = module_0.Node(dict_1)


def test_case_1387():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_3 = queue_5.dequeue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(bool_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    int_0 = -524
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(int_0)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    var_6 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    node_7 = module_0.Node(queue_10)
    node_8 = module_0.Node(var_7)
    var_8 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(bytes_0)
    int_1 = -65
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(int_1)
    node_11 = module_0.Node(var_1)


def test_case_1388():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_1 = queue_6.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(var_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    node_9 = module_0.Node(queue_12)
    node_10 = module_0.Node(var_4)
    var_5 = queue_12.enqueue(queue_12)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(str_4)
    dict_0 = {var_7: node_11, node_11: str_3, str_3: str_4, queue_14: str_3}
    node_12 = module_0.Node(dict_0)
    node_13 = module_0.Node(str_3)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_14 = module_0.Node(list_0)
    queue_16 = module_0.Queue()
    node_15 = module_0.Node(bool_0)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_9 = queue_17.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_16 = module_0.Node(list_1)
    queue_19 = module_0.Queue()
    var_10 = queue_19.dequeue()
    dict_1 = {queue_19: node_16, var_10: list_1}
    node_17 = module_0.Node(dict_1)
    var_11 = queue_7.dequeue()


def test_case_1389():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_4 = module_0.Node(bytes_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(queue_7)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    node_11 = module_0.Node(node_10)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_0 = queue_8.enqueue(none_type_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_1 = queue_11.enqueue(none_type_2)
    var_2 = queue_9.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    node_13 = module_0.Node(str_2)


def test_case_1390():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    var_5 = queue_4.dequeue()
    assert queue_4.head is None
    assert queue_4.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_6 = queue_5.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_2)
    queue_6 = module_0.Queue()
    var_7 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_8 = queue_7.enqueue(queue_6)
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(queue_8)
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    var_9 = queue_5.enqueue(queue_11)


def test_case_1391():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()


def test_case_1392():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_3)
    dict_0 = {var_3: node_5, node_5: str_2, str_2: str_3, queue_5: str_2}
    node_6 = module_0.Node(dict_0)
    node_7 = module_0.Node(str_2)
    queue_6 = module_0.Queue()


def test_case_1393():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(node_0)


def test_case_1394():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(none_type_0)


def test_case_1395():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(node_1)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(node_3)
    var_5 = queue_3.dequeue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    var_7 = queue_2.dequeue()
    assert queue_2.tail is None


def test_case_1396():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_3 = module_0.Queue()


def test_case_1397():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(node_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_7 = module_0.Node(queue_3)
    node_8 = module_0.Node(var_2)
    var_3 = queue_3.enqueue(queue_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_0.dequeue()


def test_case_1398():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(queue_8)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    node_6 = module_0.Node(queue_12)
    node_7 = module_0.Node(var_7)
    var_8 = queue_12.enqueue(queue_12)
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(queue_14)
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    queue_15 = module_0.Queue()
    var_10 = queue_15.dequeue()
    var_11 = queue_9.enqueue(var_4)


def test_case_1399():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()


def test_case_1400():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_0 = module_0.Node(queue_5)
    node_1 = module_0.Node(var_3)
    node_2 = module_0.Node(queue_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_4 = queue_1.dequeue()
    assert queue_1.tail is None


def test_case_1401():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.enqueue(var_0)


def test_case_1402():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(node_0)
    str_1 = "~W:Qn]a>6w"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_1)
    set_0 = {str_1, str_1, str_1, var_4}
    list_0 = [var_4, str_1, set_0]
    node_1 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    var_6 = queue_5.enqueue(var_5)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_7 = queue_6.dequeue()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_8 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    var_9 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()


def test_case_1403():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_6 = module_0.Node(node_5)
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(var_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    set_0 = {bool_0, var_5, queue_11, var_5}
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_6)
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(queue_12)
    int_1 = -1472
    node_10 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_13.dequeue()
    str_3 = "1Yd=9eK W+Bj:"
    node_11 = module_0.Node(str_3)
    node_12 = module_0.Node(queue_13)
    int_2 = -1472
    node_13 = module_0.Node(int_2)
    node_14 = module_0.Node(var_4)


def test_case_1404():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(node_3)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_1 = queue_7.dequeue()
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    queue_8 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_2 = queue_9.enqueue(queue_8)
    int_2 = 1992
    node_9 = module_0.Node(int_2)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_3 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_4 = queue_13.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_11 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    int_3 = -4556
    node_12 = module_0.Node(int_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_13 = module_0.Node(node_11)
    int_4 = -4556
    node_14 = module_0.Node(int_4)
    queue_18 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_15 = module_0.Node(str_4)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_5 = queue_19.enqueue(queue_18)
    node_16 = module_0.Node(queue_20)
    complex_1 = -2503.2 - 384.3391j
    node_17 = module_0.Node(complex_1)
    queue_21 = module_0.Queue()
    var_6 = queue_21.enqueue(queue_21)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_18 = module_0.Node(str_5)
    node_19 = module_0.Node(var_5)


def test_case_1405():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(queue_7)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    var_5 = queue_10.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    var_7 = queue_11.dequeue()
    node_8 = module_0.Node(var_2)


def test_case_1406():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    node_0 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    node_2 = module_0.Node(var_6)
    int_1 = -524
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(int_1)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    var_8 = queue_9.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(var_6)


def test_case_1407():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_0 = queue_1.dequeue()
    var_1 = queue_0.enqueue(node_2)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1408():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_2)
    dict_0 = {var_2: node_1, node_1: str_1, str_1: str_2, queue_1: str_1}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_12.dequeue()
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(queue_16)
    bool_2 = False
    node_10 = module_0.Node(bool_2)


def test_case_1409():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    var_4 = queue_7.dequeue()
    assert queue_7.tail is None
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(queue_7)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_9 = module_0.Node(queue_14)
    node_10 = module_0.Node(var_8)
    var_9 = queue_14.enqueue(queue_14)
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(queue_16)
    queue_17 = module_0.Queue()


def test_case_1410():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_2)
    queue_1 = module_0.Queue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    int_1 = -524
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(int_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(var_1)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(str_1)
    var_3 = queue_7.enqueue(node_6)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_8 = module_0.Node(queue_8)
    var_5 = queue_8.enqueue(var_4)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = ":LY^21xf6[CVs"
    node_10 = module_0.Node(str_2)
    bool_4 = True
    node_11 = module_0.Node(bool_4)
    node_12 = module_0.Node(var_0)


def test_case_1411():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0 = queue_5.dequeue()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    bool_2 = False
    tuple_0 = (bool_2,)
    node_5 = module_0.Node(tuple_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    var_1 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    var_2 = queue_10.dequeue()


def test_case_1412():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_3)
    dict_1 = {var_1: node_2, node_2: str_2, str_2: str_3, queue_2: str_2}
    node_3 = module_0.Node(dict_1)
    node_4 = module_0.Node(str_2)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    complex_2 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(str_4)
    var_5 = queue_10.dequeue()
    assert queue_10.tail is None
    node_9 = module_0.Node(var_5)
    complex_3 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_3)
    queue_11 = module_0.Queue()
    node_11 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_5)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_0 = -4556
    node_13 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_6 = queue_6.dequeue()


def test_case_1413():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(var_1)
    int_1 = -524
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(int_1)
    var_3 = queue_5.dequeue()
    assert var_3 == -524
    assert queue_5.head is None
    assert queue_5.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = queue_6.dequeue()
    bool_0 = True
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(bool_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_2 = -4556
    node_7 = module_0.Node(int_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_5.dequeue()


def test_case_1414():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()


def test_case_1415():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_2 = module_0.Node(var_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    node_4 = module_0.Node(none_type_0)
    var_4 = queue_6.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(queue_9)
    var_7 = queue_10.dequeue()
    assert queue_10.tail is None
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(node_5)
    var_9 = queue_11.dequeue()
    int_0 = -524
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(int_0)
    queue_14 = module_0.Queue()
    var_11 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_12 = queue_14.dequeue()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    queue_16 = module_0.Queue()
    var_13 = queue_14.dequeue()
    var_14 = queue_14.dequeue()
    queue_17 = module_0.Queue()


def test_case_1416():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    float_0 = 3092.57
    node_1 = module_0.Node(float_0)


def test_case_1417():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_2 = module_0.Node(bytes_0)
    bytes_1 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(bytes_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    node_5 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_8 = module_0.Node(node_6)
    var_3 = queue_1.dequeue()


def test_case_1418():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_4)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_5 = module_0.Node(var_5)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_8.dequeue()
    node_7 = module_0.Node(var_7)
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(none_type_3)
    queue_11 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(var_9)
    queue_15 = module_0.Queue()
    var_11 = queue_14.enqueue(queue_14)
    var_12 = queue_15.enqueue(var_11)
    var_13 = queue_15.dequeue()
    assert queue_15.tail is None
    queue_16 = module_0.Queue()
    var_14 = queue_16.enqueue(var_7)


def test_case_1419():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    int_0 = -1472
    node_4 = module_0.Node(int_0)
    var_0 = queue_0.dequeue()


def test_case_1420():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(queue_3)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_11 = module_0.Node(list_3)
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    node_13 = module_0.Node(node_12)
    queue_8 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_14 = module_0.Node(str_2)
    none_type_2 = None
    node_15 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(node_15)
    queue_10 = module_0.Queue()
    node_16 = module_0.Node(queue_10)
    var_6 = queue_5.dequeue()


def test_case_1421():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    var_2 = queue_4.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_3)
    var_4 = queue_5.enqueue(var_3)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(queue_8)
    node_5 = module_0.Node(none_type_1)
    var_6 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_8 = queue_10.dequeue()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    queue_12 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(str_2)
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(var_9)
    queue_16 = module_0.Queue()
    var_11 = queue_15.enqueue(queue_15)
    var_12 = queue_16.enqueue(var_11)
    queue_17 = module_0.Queue()
    var_13 = queue_17.enqueue(node_4)


def test_case_1422():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()


def test_case_1423():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    set_0 = {bool_0, var_5, queue_11, var_5}
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(set_0)
    assert (
        f"{type(queue_12.head).__module__}.{type(queue_12.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_12.tail).__module__}.{type(queue_12.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_6)
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(queue_12)
    str_0 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_0)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    queue_15 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_6 = module_0.Node(node_4)
    var_9 = queue_15.enqueue(queue_17)


def test_case_1424():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_1 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(node_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_8)
    int_2 = 1607
    node_10 = module_0.Node(int_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_1)
    queue_19 = module_0.Queue()
    node_12 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_20 = module_0.Queue()
    var_6 = queue_20.enqueue(str_2)
    var_7 = queue_20.dequeue()
    assert queue_20.tail is None
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()


def test_case_1425():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_3 = module_0.Node(queue_1)
    bool_0 = False
    tuple_0 = (bool_0,)
    node_4 = module_0.Node(tuple_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    bool_2 = True
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(bool_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()


def test_case_1426():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_4 = queue_9.dequeue()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(queue_11)


def test_case_1427():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_4.enqueue(queue_4)
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()


def test_case_1428():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_3)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(node_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_2 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    node_8 = module_0.Node(queue_12)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    var_5 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_6 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_7 = queue_16.dequeue()
    node_11 = module_0.Node(var_7)
    node_12 = module_0.Node(var_3)


def test_case_1429():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_0)
    bool_1 = False
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    set_0 = {bool_1, var_1, queue_1, var_1}
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(var_2)
    var_3 = queue_0.enqueue(node_1)


def test_case_1430():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_5 = module_0.Node(bytes_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()


def test_case_1431():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    str_1 = "vOK:\\f"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_2.enqueue(queue_2)
    var_4 = queue_3.enqueue(var_3)
    var_5 = queue_3.dequeue()
    assert queue_3.head is None
    assert queue_3.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()


def test_case_1432():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(var_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(var_4)
    queue_9 = module_0.Queue()
    var_6 = queue_8.enqueue(queue_8)
    var_7 = queue_9.enqueue(var_6)
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_9 = queue_10.dequeue()
    node_3 = module_0.Node(var_9)
    int_0 = -1472
    node_4 = module_0.Node(int_0)
    queue_12 = module_0.Queue()


def test_case_1433():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    var_3 = queue_0.dequeue()
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(queue_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(queue_5)
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(var_7)
    complex_2 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_2)
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_7)
    var_9 = queue_4.dequeue()
    assert queue_4.tail is None


def test_case_1434():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(node_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(queue_7)
    node_5 = module_0.Node(none_type_0)
    var_4 = queue_6.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_11.dequeue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(queue_14)
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    node_8 = module_0.Node(var_9)
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(str_4)
    queue_17 = module_0.Queue()
    int_1 = -524
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(int_1)
    var_12 = queue_18.dequeue()
    assert queue_18.tail is None
    queue_19 = module_0.Queue()
    var_13 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_14 = queue_19.dequeue()
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()


def test_case_1435():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_5 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_6 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_7 = module_0.Node(bytes_0)
    int_1 = 2029
    node_8 = module_0.Node(int_1)
    str_0 = ":LY^21xf6[CVs"
    node_9 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()


def test_case_1436():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(queue_2)


def test_case_1437():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    var_1 = queue_6.enqueue(var_0)
    queue_9 = module_0.Queue()
    var_2 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_3 = queue_9.dequeue()
    node_5 = module_0.Node(var_3)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    node_8 = module_0.Node(bool_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()


def test_case_1438():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(queue_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    var_3 = queue_7.dequeue()
    assert queue_7.tail is None


def test_case_1439():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    var_1 = queue_3.enqueue(node_5)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    var_4 = queue_7.dequeue()
    dict_1 = {}
    node_10 = module_0.Node(dict_1)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_4)
    queue_9 = module_0.Queue()
    node_12 = module_0.Node(str_4)
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_5 = queue_0.enqueue(var_0)


def test_case_1440():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()


def test_case_1441():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.dequeue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_2 = False
    tuple_0 = (bool_2,)
    node_3 = module_0.Node(tuple_0)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_5)
    var_5 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    bool_3 = False
    node_6 = module_0.Node(bool_3)
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(str_2)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(var_8)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    int_0 = 1607
    node_7 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_10 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()


def test_case_1442():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1443():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_0.enqueue(none_type_0)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_3)
    bool_0 = False
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    set_0 = {bool_0, var_3, queue_5, var_3}
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(set_0)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(queue_5)
    bool_1 = False
    tuple_0 = (bool_1,)
    node_7 = module_0.Node(tuple_0)
    queue_7 = module_0.Queue()
    bool_2 = False
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    set_1 = {bool_2, var_5, queue_8, var_5}
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(set_1)
    node_8 = module_0.Node(var_6)
    node_9 = module_0.Node(bool_2)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(var_7)
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(var_8)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_11 = module_0.Node(var_8)
    queue_16 = module_0.Queue()
    var_10 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_11 = queue_16.dequeue()
    bool_3 = False
    node_12 = module_0.Node(bool_3)
    queue_18 = module_0.Queue()
    var_12 = queue_16.dequeue()
    str_3 = "vOK:\\f"
    node_13 = module_0.Node(str_3)
    var_13 = queue_0.enqueue(none_type_0)


def test_case_1444():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_3 = module_0.Node(queue_2)
    var_1 = queue_2.enqueue(var_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_0)


def test_case_1445():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_2 = module_0.Node(bytes_0)
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(str_1)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_2)
    queue_6 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_2 = queue_9.dequeue()
    node_10 = module_0.Node(bool_0)


def test_case_1446():
    str_0 = ":LY^21xf6[CVs"
    node_0 = module_0.Node(str_0)
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == -524
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(var_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    node_2 = module_0.Node(none_type_0)
    var_5 = queue_3.enqueue(none_type_0)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(str_2)
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(var_6)
    queue_8 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(str_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_10 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_11 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_4)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_19 = module_0.Queue()
    var_12 = queue_19.enqueue(node_6)
    queue_20 = module_0.Queue()
    none_type_2 = None
    queue_21 = module_0.Queue()
    var_13 = queue_21.enqueue(none_type_2)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    var_14 = queue_23.dequeue()
    int_1 = 1607
    node_8 = module_0.Node(int_1)
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    var_15 = queue_25.dequeue()
    queue_26 = module_0.Queue()
    queue_27 = module_0.Queue()
    queue_28 = module_0.Queue()
    queue_29 = module_0.Queue()
    node_9 = module_0.Node(queue_28)


def test_case_1447():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_2: node_2, node_2: str_1, str_1: str_2, queue_3: str_1}
    node_3 = module_0.Node(dict_0)
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_5 = module_0.Node(tuple_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_8 = module_0.Node(queue_12)
    node_9 = module_0.Node(var_6)
    var_7 = queue_12.enqueue(queue_12)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_4)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(node_10)
    var_9 = queue_13.dequeue()
    var_10 = queue_14.dequeue()
    assert queue_14.tail is None
    var_11 = queue_3.enqueue(var_4)


def test_case_1448():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )


def test_case_1449():
    bytes_0 = b""
    node_0 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_3 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_3)
    dict_0 = {var_2: node_4, node_4: str_2, str_2: str_3, queue_5: str_2}
    node_5 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    var_4 = queue_6.enqueue(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_12.dequeue()
    node_8 = module_0.Node(var_7)
    node_9 = module_0.Node(var_7)


def test_case_1450():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_2 = "~W:Qn]a>6w"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_2)
    set_0 = {str_2, str_2, str_2, var_3}
    list_0 = [var_3, str_2, set_0]
    node_2 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(complex_0)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()


def test_case_1451():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    node_1 = module_0.Node(var_0)


def test_case_1452():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    dict_0 = {queue_3: node_2, var_1: list_1}
    node_3 = module_0.Node(dict_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_6 = module_0.Node(list_1)


def test_case_1453():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(var_6)
    int_1 = -524
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(int_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    queue_15 = module_0.Queue()
    bool_4 = True
    node_9 = module_0.Node(bool_4)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(var_7)


def test_case_1454():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    node_1 = module_0.Node(queue_7)
    node_2 = module_0.Node(var_4)
    var_5 = queue_7.enqueue(queue_7)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(str_2)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_12.dequeue()
    node_7 = module_0.Node(var_7)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(node_8)
    none_type_1 = None
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(none_type_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_11 = module_0.Node(queue_16)
    node_12 = module_0.Node(none_type_1)
    var_10 = queue_17.enqueue(none_type_1)
    node_13 = module_0.Node(queue_9)


def test_case_1455():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_1 = -524
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(int_1)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_3 = queue_5.enqueue(bool_0)


def test_case_1456():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_2)
    var_3 = queue_5.dequeue()
    str_0 = "vOK:\\f"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    node_3 = module_0.Node(str_1)
    dict_0 = {}
    node_4 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()


def test_case_1457():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(node_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_0)
    var_8 = queue_17.dequeue()
    var_9 = queue_4.enqueue(queue_14)


def test_case_1458():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bytes_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_4 = module_0.Node(queue_6)
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_2)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(var_5)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_5 = module_0.Node(var_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_14 = module_0.Queue()
    node_8 = module_0.Node(queue_14)
    str_3 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(str_3)
    node_9 = module_0.Node(str_3)
    queue_16 = module_0.Queue()
    var_9 = queue_4.enqueue(var_1)


def test_case_1459():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bytes_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(node_0)


def test_case_1460():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    node_1 = module_0.Node(tuple_0)


def test_case_1461():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    queue_5 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(var_1)
    queue_8 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_4)
    var_5 = queue_9.dequeue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_5 = module_0.Node(queue_12)
    node_6 = module_0.Node(none_type_1)
    var_7 = queue_11.enqueue(none_type_1)
    var_8 = queue_6.dequeue()


def test_case_1462():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(queue_0)


def test_case_1463():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -524
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(int_0)
    var_4 = queue_6.dequeue()
    assert var_4 == -524
    assert queue_6.head is None
    assert queue_6.tail is None
    int_1 = 1607
    node_3 = module_0.Node(int_1)
    node_4 = module_0.Node(int_1)


def test_case_1464():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == "~%25QZ3{"
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_1)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_7 = module_0.Node(var_3)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_9 = module_0.Node(node_8)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    var_7 = queue_10.enqueue(node_3)


def test_case_1465():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_2 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    bool_2 = False
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    set_0 = {bool_2, var_1, queue_5, var_1}
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(set_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_2)
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(queue_5)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_10 = module_0.Node(node_9)
    var_4 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.dequeue()
    node_11 = module_0.Node(queue_12)
    node_12 = module_0.Node(var_5)
    var_6 = queue_12.enqueue(queue_12)
    node_13 = module_0.Node(queue_3)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_1.enqueue(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1468():
    queue_0 = module_0.Queue()
    bool_0 = False
    bytes_0 = b"y\x0b\xc8\xeex\xde\xd1\x98\xe1+p\xbb\xc7\x84"
    tuple_0 = (queue_0, bool_0, bytes_0)
    dict_0 = {tuple_0: bytes_0}
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(dict_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


def test_case_1469():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_4)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = 1949
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_2)
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1473():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1474():
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_5 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_5)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1475():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1476():
    complex_0 = 2101 + 1020.54j
    bool_0 = False
    tuple_0 = (complex_0, bool_0, complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_2)
    var_3 = queue_3.dequeue()
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_4 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_4)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_6 = queue_11.dequeue()
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    none_type_6 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    node_5 = module_0.Node(node_4)
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    var_8.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1478():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    var_2 = queue_1.dequeue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    none_type_4 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    none_type_6 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_6)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_7 = queue_12.dequeue()
    none_type_7 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_7)
    queue_14 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1479():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1480():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_4)
    queue_3 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = 2354
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    var_2 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(node_2)
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_5 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_5)
    var_5 = queue_6.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_6 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_6)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_7 = queue_11.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    none_type_7 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_7)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_1)
    var_4.enqueue(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_3 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_3)
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_4)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_7 = queue_9.dequeue()
    var_8 = queue_6.dequeue()
    assert queue_6.tail is None
    var_4.enqueue(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(node_3)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    var_2.enqueue(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_6)
    queue_9 = module_0.Queue()
    none_type_5 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    var_7 = queue_12.dequeue()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    none_type_6 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_6)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6.enqueue(list_2)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_2 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_5.dequeue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_4)
    queue_12 = module_0.Queue()
    var_1.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bytes_0 = b""
    node_1 = module_0.Node(bytes_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_2)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_5 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_6)
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_5 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_5)
    var_7 = queue_9.dequeue()
    var_4.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_3)
    var_3 = queue_2.dequeue()
    none_type_4 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_4)
    queue_6 = module_0.Queue()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1491():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    var_3 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    node_2 = module_0.Node(node_1)
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1493():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_4 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_4)
    var_4 = queue_5.dequeue()
    var_5 = queue_4.enqueue(node_3)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1494():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    var_0.enqueue(queue_1)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_4 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    var_6 = queue_6.enqueue(var_2)
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1497():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    var_4 = queue_2.dequeue()
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_7.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(str_2)
    queue_15 = module_0.Queue()
    var_11 = queue_15.enqueue(var_10)
    var_7.enqueue(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1499():
    set_0 = set()
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_0)
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(var_4)
    queue_14 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(node_1)
    queue_16 = module_0.Queue()
    var_7 = queue_1.dequeue()
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1501():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1502():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_1)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == "~%25QZ3{"
    var_3 = queue_1.dequeue()
    var_3.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    var_0.enqueue(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = queue_6.dequeue()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    var_4.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1505():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_10 = queue_14.dequeue()
    str_1 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(str_1)
    queue_17 = module_0.Queue()
    var_12 = queue_17.enqueue(var_11)
    queue_18 = module_0.Queue()
    var_13 = queue_18.dequeue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1506():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_1: str_0}
    node_3 = module_0.Node(dict_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_4)
    bool_1 = False
    dict_1 = {none_type_2: none_type_2, node_4: bool_1, none_type_2: var_3}
    node_5 = module_0.Node(dict_1)
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_4 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_4)
    var_6 = queue_6.dequeue()
    none_type_5 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_5)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_6 = None
    queue_15 = module_0.Queue()
    var_10 = queue_15.enqueue(none_type_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    node_9 = module_0.Node(node_8)
    none_type_8 = None
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(none_type_8)
    var_0.enqueue(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1508():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1510():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(list_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1512():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_1)
    dict_0 = {var_2: node_1, node_1: str_0, str_0: str_1, queue_3: str_0}
    node_2 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(var_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1514():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_1, str_1: str_2, queue_2: str_1}
    node_2 = module_0.Node(dict_0)
    str_3 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_3)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1515():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_3)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(var_4)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    var_6.enqueue(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    var_2.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1519():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_0)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_1)
    var_6 = queue_10.dequeue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_3 = None
    queue_16 = module_0.Queue()
    var_8 = queue_16.enqueue(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(node_4)
    none_type_5 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_5)
    var_8.enqueue(queue_3)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    var_0.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    bool_0 = False
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    set_0 = {bool_0, var_2, queue_2, var_2}
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(set_0)
    node_1 = module_0.Node(var_3)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1522():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_0}
    node_2 = module_0.Node(dict_0)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == "~%25QZ3{"
    none_type_3 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_3)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(var_8)
    queue_14 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    var_3 = queue_6.dequeue()
    assert var_3 == "~%25QZ3{"
    assert queue_6.head is None
    assert queue_6.tail is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == "~%25QZ3{"
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(var_7)
    queue_14 = module_0.Queue()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(node_5)
    none_type_4 = None
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(none_type_4)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_5 = None
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(none_type_5)
    var_12 = queue_17.dequeue()
    none_type_6 = None
    queue_20 = module_0.Queue()
    var_13 = queue_20.enqueue(none_type_6)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_0.enqueue(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = queue_7.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_5)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(node_6)
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1525():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1526():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    bool_0 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_0, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_3 = module_0.Node(var_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(var_4)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(none_type_3)
    var_10 = queue_13.dequeue()
    queue_16 = module_0.Queue()
    var_11 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_12 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_13 = queue_18.dequeue()
    queue_21 = module_0.Queue()
    var_14 = queue_21.dequeue()
    var_11.enqueue(queue_12)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_3)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_2, node_2: str_2, str_2: str_3, queue_1: str_2}
    node_3 = module_0.Node(dict_0)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1528():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    var_3 = queue_2.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1529():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1530():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    var_2.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    var_0.enqueue(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_7 = queue_9.dequeue()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    queue_16 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_1)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_10 = queue_20.dequeue()
    str_1 = "~%25QZ3{"
    queue_21 = module_0.Queue()
    var_11 = queue_21.enqueue(str_1)
    queue_22 = module_0.Queue()
    var_12 = queue_22.enqueue(var_11)
    queue_23 = module_0.Queue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1533():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(node_2)
    var_0.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1.dequeue()


def test_case_1538():
    set_0 = set()
    node_0 = module_0.Node(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(str_1)
    dict_0 = {var_2: node_1, node_1: str_0, str_0: str_1, queue_7: str_0}
    node_2 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_3 = module_0.Node(var_3)
    queue_10 = module_0.Queue()
    bool_1 = False
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    set_0 = {bool_1, var_5, queue_11, var_5}
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(set_0)
    node_4 = module_0.Node(var_6)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_2)
    var_8 = queue_13.dequeue()
    assert queue_13.tail is None
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_1 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_1 = queue_3.dequeue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_2)
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_2: bool_1, none_type_0: var_4}
    node_3 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_2)
    dict_1 = {var_6: node_4, node_4: str_1, str_1: str_2, queue_8: str_1}
    node_5 = module_0.Node(dict_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5.enqueue(queue_5)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    queue_0 = module_0.Queue()
    bool_0 = False
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    set_0 = {bool_0, var_0, queue_1, var_0}
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(set_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    var_0.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    tuple_0 = ()
    node_0 = module_0.Node(tuple_0)
    str_0 = "kIt6~GB~5GjF \x0c@~P,1"
    bool_0 = False
    str_1 = "b{`t%6FRBD#(piHp"
    dict_0 = {str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_1544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1545():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1546():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_6.dequeue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_0)
    var_7 = queue_11.dequeue()
    assert queue_11.tail is None
    node_1 = module_0.Node(var_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_3)
    queue_15 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    none_type_4 = None
    queue_20 = module_0.Queue()
    var_10 = queue_20.enqueue(none_type_4)
    queue_21 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_2)
    queue_22 = module_0.Queue()
    var_8.enqueue(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_2)
    var_6 = queue_8.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(node_3)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_3 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_3)
    queue_18 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_10 = queue_19.enqueue(str_2)
    var_11 = queue_19.dequeue()
    assert queue_19.tail is None
    node_4 = module_0.Node(var_11)
    none_type_4 = None
    queue_20 = module_0.Queue()
    var_12 = queue_20.enqueue(none_type_4)
    queue_21 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_3)
    queue_22 = module_0.Queue()
    none_type_5 = None
    queue_23 = module_0.Queue()
    var_13 = queue_23.enqueue(none_type_5)
    queue_24 = module_0.Queue()
    var_11.enqueue(queue_9)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1549():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    var_3 = queue_3.dequeue()
    assert queue_3.tail is None
    node_2 = module_0.Node(var_3)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1550():
    set_0 = set()
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(set_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    float_0 = -3301.26
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: float_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    var_1.enqueue(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(str_4)
    dict_0 = {var_4: node_5, node_5: str_3, str_3: str_4, queue_7: str_3}
    node_6 = module_0.Node(dict_0)
    queue_8 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_5)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_6 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_6)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(node_10)
    queue_13 = module_0.Queue()
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1552():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1553():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4.enqueue(queue_6)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    var_1.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    set_0 = {bool_0, var_2, queue_2, var_2}
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_3)
    var_4 = queue_2.dequeue()
    var_4.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_2 = module_0.Node(queue_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    none_type_3 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_3)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(queue_4)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_5)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(var_5)
    queue_10 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    none_type_4 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_4)
    queue_13 = module_0.Queue()
    none_type_5 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_5)
    queue_15 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(str_3)
    var_10 = queue_16.dequeue()
    assert queue_16.tail is None
    node_10 = module_0.Node(var_10)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1557():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_1 = queue_6.enqueue(queue_5)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(node_6)
    queue_10 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_3 = queue_13.enqueue(str_4)
    var_4 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_6 = queue_16.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    node_10 = module_0.Node(node_9)
    none_type_3 = None
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(none_type_3)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_4.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1558():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(node_5)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.enqueue(queue_8)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_9)
    var_0.enqueue(queue_6)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_9.enqueue(queue_8)
    node_5 = module_0.Node(queue_10)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_7 = module_0.Node(var_7)
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1560():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_4}
    node_2 = module_0.Node(dict_0)
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    node_5 = module_0.Node(queue_11)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1561():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(none_type_0)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(node_5)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(node_7)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_1.enqueue(queue_6)


def test_case_1562():
    queue_0 = module_0.Queue()


@pytest.mark.xfail(strict=True)
def test_case_1563():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_0.dequeue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1564():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_2)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(var_1)
    queue_7 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_3)
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_1)
    queue_11 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_4)
    var_5 = queue_12.dequeue()
    assert var_5 == "~%25QZ3{"
    assert queue_12.head is None
    assert queue_12.tail is None
    node_5 = module_0.Node(var_5)
    assert node_5.data == "~%25QZ3{"
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    str_5 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(str_5)
    var_7 = queue_13.dequeue()
    assert var_7 == "~%25QZ3{"
    assert queue_13.head is None
    assert queue_13.tail is None
    none_type_3 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_3)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1565():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    var_2 = queue_2.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_9 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_10 = queue_11.dequeue()
    var_10.enqueue(queue_18)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1567():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_2)
    dict_0 = {var_1: node_1, node_1: str_1, str_1: str_2, queue_2: str_1}
    node_2 = module_0.Node(dict_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_3)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_7 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_6)
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    var_4.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = queue_3.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_9.dequeue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_4 = module_0.Node(queue_13)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    queue_17 = module_0.Queue()
    var_2.enqueue(queue_14)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    node_8 = module_0.Node(node_7)
    var_2 = queue_4.dequeue()
    var_2.dequeue()


def test_case_1572():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1573():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_0 = False
    queue_7 = module_0.Queue()
    var_6 = queue_7.dequeue()
    set_0 = {bool_0, var_6, queue_7, var_6}
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(set_0)
    node_2 = module_0.Node(var_7)
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(none_type_0)
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_10)
    module_1.object(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    var_1.enqueue(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_14 = module_0.Queue()
    var_4 = queue_14.enqueue(node_7)
    bool_2 = False
    dict_0 = {none_type_1: none_type_1, node_7: bool_2, none_type_1: var_4}
    node_8 = module_0.Node(dict_0)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1576():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_2.dequeue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    node_3 = module_0.Node(queue_15)
    node_4 = module_0.Node(var_8)
    bool_1 = True
    var_6.enqueue(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_2)
    dict_0 = {var_1: node_4, node_4: str_1, str_1: str_2, queue_3: str_1}
    node_5 = module_0.Node(dict_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_3)
    var_4 = queue_6.dequeue()
    assert var_4 == "~%25QZ3{"
    assert queue_6.head is None
    assert queue_6.tail is None
    node_6 = module_0.Node(var_4)
    assert node_6.data == "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    bool_1 = False
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    set_0 = {bool_1, var_6, queue_9, var_6}
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(set_0)
    node_7 = module_0.Node(var_7)
    node_8 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_13.dequeue()
    var_6.enqueue(queue_7)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(queue_4)
    node_2 = module_0.Node(none_type_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(none_type_3)
    var_5 = queue_7.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_4 = module_0.Node(queue_10)
    node_5 = module_0.Node(var_6)
    none_type_4 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_4)
    queue_12 = module_0.Queue()
    node_6 = module_0.Node(queue_12)
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_13.dequeue()
    queue_15 = module_0.Queue()
    var_9.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1579():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == "~%25QZ3{"
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_2)
    dict_0 = {var_3: node_2, node_2: str_1, str_1: str_2, queue_3: str_1}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_1)
    str_3 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(str_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_7)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1580():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_4)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    node_7 = module_0.Node(queue_8)
    node_8 = module_0.Node(var_4)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_9 = module_0.Node(bytes_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    var_5 = queue_5.enqueue(queue_6)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1581():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_0)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    node_0 = module_0.Node(var_5)
    none_type_3 = None
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(none_type_3)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(node_1)
    bool_0 = False
    dict_0 = {none_type_4: none_type_4, node_1: bool_0, none_type_4: var_7}
    node_2 = module_0.Node(dict_0)
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_9 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_10 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_11 = queue_12.dequeue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    queue_14 = module_0.Queue()
    var_12 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_4.enqueue(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1583():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_7.dequeue()
    bool_1 = False
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    set_0 = {bool_1, var_4, queue_10, var_4}
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(set_0)
    node_2 = module_0.Node(var_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    node_4 = module_0.Node(bool_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(str_0)
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_1)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_8 = queue_19.dequeue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1585():
    int_0 = -2709
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_6 = module_0.Queue()
    var_1.enqueue(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_12 = module_0.Queue()
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1588():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1589():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(str_3)
    bool_1 = False
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_0 = {bool_1, var_6, queue_11, var_6}
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(set_0)
    node_7 = module_0.Node(var_7)
    node_8 = module_0.Node(bool_1)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_2)
    queue_14 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_4)
    var_10 = queue_15.dequeue()
    assert queue_15.tail is None
    node_9 = module_0.Node(var_10)
    queue_16 = module_0.Queue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1590():
    queue_0 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    set_0 = {bool_1, var_1, queue_2, var_1}
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(set_0)
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_2)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1591():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    int_2 = 1992
    node_4 = module_0.Node(int_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    var_1.enqueue(queue_1)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    var_1.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = queue_5.dequeue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    var_8 = queue_13.dequeue()
    none_type_3 = None
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(none_type_3)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_5 = module_0.Node(queue_17)
    int_1 = -4556
    node_6 = module_0.Node(int_1)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_10 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    var_11 = queue_17.dequeue()
    var_11.enqueue(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_5.dequeue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_8 = queue_9.dequeue()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    var_9.enqueue(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(node_2)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_6.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(node_5)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    queue_13 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_4)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    queue_14 = module_0.Queue()
    var_6 = queue_14.enqueue(node_8)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_5 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_5)
    str_6 = "~%25QZ3{"
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(str_6)
    queue_18 = module_0.Queue()
    var_8 = queue_18.enqueue(var_7)
    var_8.enqueue(node_3)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(complex_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1600():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_3 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_3)
    var_3 = queue_3.dequeue()
    none_type_4 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(queue_7)
    node_5 = module_0.Node(none_type_4)
    var_5 = queue_8.enqueue(none_type_4)
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_0)
    var_7 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1601():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_0 = module_0.Node(var_1)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1602():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = queue_5.dequeue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(var_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    node_2 = module_0.Node(var_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    queue_17 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_18 = module_0.Queue()
    var_2.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    set_0 = {bool_0, var_1, queue_4, var_1}
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(set_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_2)
    node_1 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_3)
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(queue_8)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_4 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(queue_12)
    node_8 = module_0.Node(none_type_1)
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1604():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    node_1 = module_0.Node(var_1)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_6 = module_0.Node(bytes_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_7)
    var_4 = queue_5.dequeue()
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    var_5 = queue_6.enqueue(var_2)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1606():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    var_2 = queue_2.dequeue()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    queue_13 = module_0.Queue()
    node_7 = module_0.Node(bool_0)
    queue_14 = module_0.Queue()
    none_type_5 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_5)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_2)
    queue_18 = module_0.Queue()
    var_5.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(node_2)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_1, none_type_1: var_1}
    node_3 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_4 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_6 = module_0.Node(var_4)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_7 = module_0.Node(var_7)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_0 = 1607
    node_9 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_1)
    node_3 = module_0.Node(none_type_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    dict_0 = {var_1: node_4, node_4: str_0, str_0: str_1, queue_3: str_0}
    node_5 = module_0.Node(dict_0)
    node_6 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(bool_1)
    var_0.enqueue(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_2, node_2: str_1, str_1: str_2, queue_1: str_1}
    node_3 = module_0.Node(dict_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(none_type_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1610():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    none_type_0 = None
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    node_3 = module_0.Node(queue_5)
    node_4 = module_0.Node(var_1)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    var_3 = queue_6.dequeue()
    assert queue_6.tail is None
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    bool_2 = False
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    set_0 = {bool_2, var_4, queue_8, var_4}
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    node_8 = module_0.Node(bool_2)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_2)
    var_4.enqueue(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_5 = queue_8.dequeue()
    str_0 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_0)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    node_1 = module_0.Node(queue_10)
    node_2 = module_0.Node(var_7)
    node_3 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_8 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_9 = queue_11.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_1)
    queue_14 = module_0.Queue()
    var_9.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1613():
    str_0 = "_\x0bP&TD,$-.IFQIE"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(node_3)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_0, none_type_1: var_6}
    node_4 = module_0.Node(dict_0)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_3)
    var_9 = queue_10.dequeue()
    str_1 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(str_1)
    var_11 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    var_12 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_13 = queue_14.dequeue()
    queue_16 = module_0.Queue()
    var_2.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1616():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(node_1)
    var_0.enqueue(queue_1)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    queue_2 = module_0.Queue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    var_3 = queue_5.dequeue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_2)
    var_5 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_9 = module_0.Node(queue_10)
    node_10 = module_0.Node(var_6)
    node_11 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_12 = module_0.Node(queue_11)
    node_13 = module_0.Node(var_7)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1618():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    queue_0 = module_0.Queue()
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(queue_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(queue_7)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(none_type_1)
    var_3 = queue_1.enqueue(var_1)
    var_3.enqueue(queue_3)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    none_type_0 = None
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    bool_0 = False
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    set_0 = {bool_0, var_3, queue_6, var_3}
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(set_0)
    node_2 = module_0.Node(var_4)
    bool_1 = False
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    set_1 = {bool_1, var_5, queue_8, var_5}
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(set_1)
    node_3 = module_0.Node(var_6)
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    node_6 = module_0.Node(queue_10)
    node_7 = module_0.Node(var_7)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_8 = module_0.Node(bytes_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1622():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    var_3 = queue_2.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_7 = module_0.Node(list_2)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_0.enqueue(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(bool_1)
    queue_8 = module_0.Queue()
    bool_2 = False
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    set_0 = {bool_2, var_5, queue_9, var_5}
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(set_0)
    node_4 = module_0.Node(var_6)
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(queue_10)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_7 = module_0.Node(queue_11)
    node_8 = module_0.Node(var_7)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(var_7)
    var_8.enqueue(node_8)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_5 = module_0.Node(var_4)
    var_1.enqueue(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_13 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(str_1)
    node_5 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_10 = queue_17.dequeue()
    node_6 = module_0.Node(var_9)
    str_2 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(str_2)
    var_12 = queue_19.dequeue()
    assert queue_19.tail is None
    queue_20 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    var_2.enqueue(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    node_5 = module_0.Node(var_5)
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    bool_1 = False
    node_7 = module_0.Node(bool_1)
    var_2.enqueue(queue_3)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(str_2)
    dict_0 = {var_3: node_3, node_3: str_1, str_1: str_2, queue_9: str_1}
    node_4 = module_0.Node(dict_0)
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.dequeue()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    queue_13 = module_0.Queue()
    node_8 = module_0.Node(bool_3)
    queue_14 = module_0.Queue()
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_3)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_7 = queue_18.dequeue()
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1628():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_2 = module_0.Node(queue_9)
    node_3 = module_0.Node(var_5)
    node_4 = module_0.Node(queue_9)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1629():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_0)
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1630():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    list_0 = [var_1, queue_1, queue_1]
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    var_2.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1632():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1633():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    node_2 = module_0.Node(var_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_6)
    node_7 = module_0.Node(queue_8)
    bool_2 = False
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    set_1 = {bool_2, var_6, queue_9, var_6}
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(set_1)
    node_8 = module_0.Node(var_7)
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(queue_10)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(str_1)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(queue_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1635():
    dict_0 = {}
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(dict_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1636():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0 = queue_6.enqueue(node_3)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    queue_9 = module_0.Queue()
    var_1 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_2 = queue_9.dequeue()
    bool_1 = False
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    set_0 = {bool_1, var_3, queue_11, var_3}
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(set_0)
    node_6 = module_0.Node(var_4)
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    node_1 = module_0.Node(queue_5)
    node_2 = module_0.Node(var_5)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_6.dequeue()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_5 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    node_8 = module_0.Node(queue_12)
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_0)
    var_2 = queue_5.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == "~%25QZ3{"
    var_2.enqueue(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -3732.73 - 2318.00718j
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(complex_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1643():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(node_7)
    var_4 = queue_5.dequeue()
    var_0.enqueue(queue_5)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    node_3 = module_0.Node(queue_4)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_6)
    var_5 = queue_7.enqueue(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_6 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_2)
    var_9 = queue_13.dequeue()
    assert queue_13.tail is None
    node_7 = module_0.Node(var_9)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(bool_1)
    bool_2 = False
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    set_0 = {bool_2, var_10, queue_14, var_10}
    queue_15 = module_0.Queue()
    var_11 = queue_15.enqueue(set_0)
    node_10 = module_0.Node(var_11)
    var_0.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_1: str_0}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_0)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    set_0 = {bool_1, var_3, queue_7, var_3}
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(set_0)
    node_7 = module_0.Node(var_4)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    var_6 = queue_9.dequeue()
    assert queue_9.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_2.enqueue(node_5)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1647():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    dict_0 = {queue_3: node_2, var_1: list_1}
    node_3 = module_0.Node(dict_0)
    var_0.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    set_0 = {bool_0, var_2, queue_2, var_2}
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_3)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_3)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    node_6 = module_0.Node(var_5)
    var_6 = queue_6.enqueue(queue_6)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(str_1)
    queue_9 = module_0.Queue()
    var_8 = queue_9.dequeue()
    node_8 = module_0.Node(queue_9)
    node_9 = module_0.Node(var_8)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    bool_1 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_1, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(var_2)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    var_2.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bool_0)
    str_1 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_1)
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    var_4 = queue_2.enqueue(str_1)
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_2)
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(var_5)
    queue_7 = module_0.Queue()
    var_7 = queue_6.enqueue(queue_6)
    var_8 = queue_7.enqueue(var_7)
    str_3 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_9 = queue_8.enqueue(str_3)
    var_10 = queue_8.dequeue()
    assert queue_8.tail is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    node_5 = module_0.Node(queue_15)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    node_7 = module_0.Node(bool_2)
    queue_17 = module_0.Queue()
    var_3.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1654():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1655():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_1 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_2 = queue_11.enqueue(none_type_2)
    var_3 = queue_9.dequeue()
    var_4 = queue_6.enqueue(queue_10)
    var_4.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1656():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    var_2 = queue_3.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_3.head is None
    assert queue_3.tail is None
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_1 = module_0.Node(queue_5)
    node_2 = module_0.Node(none_type_1)
    var_4 = queue_6.enqueue(none_type_1)
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    var_2.enqueue(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1658():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_5 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_10.dequeue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(var_5)
    queue_13 = module_0.Queue()
    var_6.enqueue(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bool_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1660():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    dict_0 = {queue_2: node_0, var_2: list_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    var_5 = queue_4.dequeue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1661():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bool_0 = False
    list_0 = [bool_0]
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(var_0)
    node_3 = module_0.Node(queue_1)
    str_0 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_5 = module_0.Node(queue_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    node_8 = module_0.Node(node_7)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(var_5)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1664():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_0 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_1 = queue_5.dequeue()
    node_2 = module_0.Node(var_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_3 = queue_7.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_0 = set()
    var_4 = queue_2.enqueue(var_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_4.enqueue(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    queue_0 = module_0.Queue()
    bytes_0 = b"-\xd3\xce I\xbdfn\xef\x87\xcb+\x1a"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(bytes_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1666():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    node_2 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_3 = queue_1.enqueue(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    var_2.enqueue(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1.enqueue(queue_1)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(node_2)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_2.dequeue()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_5)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    var_7 = queue_10.enqueue(queue_10)
    var_8 = queue_11.enqueue(var_7)
    var_4.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_0 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_1)
    queue_8 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1671():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1672():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_3)
    node_5 = module_0.Node(queue_5)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(queue_12)
    var_0.enqueue(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    int_0 = 2179
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1675():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_4 = module_0.Node(bytes_0)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(queue_7)
    node_6 = module_0.Node(none_type_1)
    var_5 = queue_8.enqueue(none_type_1)
    int_0 = -4556
    node_7 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    none_type_2 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_2)
    queue_11 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(str_1)
    var_8 = queue_12.dequeue()
    assert queue_12.tail is None
    node_8 = module_0.Node(var_8)
    queue_13 = module_0.Queue()
    var_9 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(queue_13)
    var_11 = queue_14.dequeue()
    assert queue_14.tail is None
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_12 = queue_15.enqueue(none_type_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    node_11 = module_0.Node(node_10)
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_3)
    node_4 = module_0.Node(queue_5)
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_1)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(queue_1)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(node_5)
    var_5 = queue_10.dequeue()
    var_6 = queue_3.dequeue()
    assert queue_3.tail is None
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1678():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1679():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    int_0 = 1992
    node_7 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_10 = module_0.Node(bytes_0)
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_4 = queue_14.enqueue(str_2)
    node_11 = module_0.Node(str_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_12 = module_0.Node(list_2)
    queue_15 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    bool_0 = False
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    set_0 = {bool_0, var_2, queue_5, var_2}
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(set_0)
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(queue_6)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(queue_8)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_7 = module_0.Node(queue_9)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_8)
    bool_1 = False
    dict_0 = {none_type_2: none_type_2, node_8: bool_1, none_type_2: var_6}
    node_9 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_3.enqueue(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_1 = module_0.Node(node_0)
    var_3 = queue_1.enqueue(var_2)
    var_3.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(var_1)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_1 = module_0.Node(var_3)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_2 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(var_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_3 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_4 = queue_16.dequeue()
    node_6 = module_0.Node(queue_16)
    queue_17 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_18 = module_0.Queue()
    var_5 = queue_18.enqueue(node_8)
    queue_19 = module_0.Queue()
    int_1 = 1992
    node_9 = module_0.Node(int_1)
    none_type_2 = None
    queue_20 = module_0.Queue()
    var_6 = queue_20.enqueue(none_type_2)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    node_10 = module_0.Node(queue_21)
    var_2.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    complex_0 = 5199 + 3034.25149j
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(complex_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    node_3 = module_0.Node(bool_1)
    queue_10 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(str_2)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_0 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_0)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_21 = module_0.Queue()
    var_11 = queue_21.enqueue(str_4)
    queue_22 = module_0.Queue()
    var_12 = queue_22.enqueue(var_11)
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    node_6 = module_0.Node(var_11)
    var_6.enqueue(list_2)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    int_0 = 1508
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_0 = module_0.Node(queue_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    int_1 = 1992
    node_1 = module_0.Node(int_1)
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    node_4 = module_0.Node(list_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    queue_9 = module_0.Queue()
    var_6 = queue_7.dequeue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1688():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(node_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_2, node_2: str_0, str_0: str_1, queue_3: str_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    node_7 = module_0.Node(var_6)
    str_3 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_3)
    var_8 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1689():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_0)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(str_1)
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(var_8)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_15 = module_0.Queue()
    var_4.enqueue(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_3)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_6 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    queue_6 = module_0.Queue()
    node_8 = module_0.Node(str_3)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    var_5 = queue_10.dequeue()
    dict_1 = {queue_10: node_9, var_5: list_1}
    node_10 = module_0.Node(dict_1)
    bool_2 = False
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    set_0 = {bool_2, var_6, queue_11, var_6}
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(set_0)
    node_11 = module_0.Node(var_7)
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1691():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    dict_1 = {queue_1: node_2, var_1: list_0}
    node_3 = module_0.Node(dict_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_4 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_5 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(var_4)
    queue_8 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(node_6)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(queue_11)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_13.dequeue()
    node_9 = module_0.Node(var_7)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_2)
    queue_15 = module_0.Queue()
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_0 = module_0.Node(queue_3)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1693():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1.enqueue(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_3)
    node_5 = module_0.Node(queue_3)
    module_1.object(*var_2, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    var_2 = queue_2.dequeue()
    assert queue_2.tail is None
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(var_3)
    queue_5 = module_0.Queue()
    var_5 = queue_3.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(queue_6)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(node_2)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_9 = queue_9.enqueue(str_2)
    queue_10 = module_0.Queue()
    var_10 = queue_10.enqueue(var_9)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_11 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_12 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_13 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1696():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_1: node_1, node_1: str_0, str_0: str_1, queue_3: str_0}
    node_2 = module_0.Node(dict_0)
    var_2 = queue_2.enqueue(queue_3)
    var_2.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1699():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1700():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(node_2)
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_2: bool_0, none_type_1: var_5}
    node_3 = module_0.Node(dict_0)
    var_6 = queue_6.enqueue(queue_7)
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1701():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1702():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_0.enqueue(none_type_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1703():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    var_2 = queue_1.dequeue()
    assert queue_1.tail is None
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_6 = module_0.Node(list_1)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(str_1)
    var_7 = queue_7.dequeue()
    assert queue_7.tail is None
    node_7 = module_0.Node(var_7)
    none_type_3 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_3)
    queue_9 = module_0.Queue()
    node_8 = module_0.Node(queue_9)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_2)
    queue_10 = module_0.Queue()
    node_10 = module_0.Node(bool_2)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_11 = module_0.Node(list_3)
    node_12 = module_0.Node(bool_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_4 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(str_1)
    queue_10 = module_0.Queue()
    int_1 = 1607
    node_2 = module_0.Node(int_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_17 = module_0.Queue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1705():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    none_type_2 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    node_4 = module_0.Node(none_type_2)
    var_3 = queue_6.enqueue(none_type_2)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_9 = module_0.Queue()
    var_4 = queue_9.dequeue()
    none_type_3 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_3)
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(queue_11)
    none_type_4 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_4)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_7 = module_0.Node(queue_13)
    node_8 = module_0.Node(none_type_4)
    var_7 = queue_14.enqueue(none_type_4)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_1)
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(queue_15)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    int_0 = -4556
    node_12 = module_0.Node(int_0)
    queue_17 = module_0.Queue()
    var_9 = queue_17.dequeue()
    node_13 = module_0.Node(queue_17)
    node_14 = module_0.Node(var_9)
    var_10 = queue_17.enqueue(queue_17)
    queue_18 = module_0.Queue()
    var_6.enqueue(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_1 = module_0.Node(node_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1707():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    int_1 = 1607
    node_7 = module_0.Node(int_1)
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    var_2 = queue_7.dequeue()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_1)
    queue_9 = module_0.Queue()
    var_3 = queue_9.dequeue()
    var_3.enqueue(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_1 = module_0.Node(queue_1)
    int_1 = -4556
    node_2 = module_0.Node(int_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_1)
    node_5 = module_0.Node(queue_3)
    int_2 = 1607
    node_6 = module_0.Node(int_2)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1709():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(none_type_0)
    var_2 = queue_1.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.dequeue()
    queue_9 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(queue_12)
    var_8 = queue_13.dequeue()
    assert queue_13.tail is None
    queue_14 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    str_0 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    queue_17 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(str_1)
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(var_10)
    queue_20 = module_0.Queue()
    var_12 = queue_19.enqueue(queue_19)
    var_13 = queue_20.enqueue(var_12)
    none_type_1 = None
    queue_21 = module_0.Queue()
    var_14 = queue_21.enqueue(none_type_1)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    node_7 = module_0.Node(queue_22)
    node_8 = module_0.Node(none_type_1)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_0 = module_0.Node(bytes_0)
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_3)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bytes_1 = b"\xc5\xc3\xa7"
    node_4 = module_0.Node(bytes_1)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_3)
    var_3 = queue_4.dequeue()
    assert queue_4.tail is None
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_1)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    node_5 = module_0.Node(list_0)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    var_3 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(str_2)
    var_6 = queue_14.dequeue()
    assert queue_14.tail is None
    node_8 = module_0.Node(var_6)
    queue_15 = module_0.Queue()
    var_7 = queue_15.dequeue()
    queue_16 = module_0.Queue()
    var_8 = queue_15.dequeue()
    node_9 = module_0.Node(var_7)
    var_1.enqueue(queue_4)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    dict_0 = {queue_0: node_0, var_0: list_0}
    node_1 = module_0.Node(dict_0)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(bool_1)
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_7 = module_0.Node(node_6)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_0)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_10)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_1)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_11 = module_0.Node(str_2)
    bytes_0 = b'\xd8\x1a\x0b"\xbf`p^\xb0y\xfb\xa2\xd7\xc7\xa6='
    var_4.enqueue(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(str_1)
    var_0 = queue_4.enqueue(node_2)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(str_2)
    node_4 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(str_3)
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(var_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_5 = module_0.Node(var_3)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1716():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    bool_0 = False
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    set_0 = {bool_0, var_1, queue_3, var_1}
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(set_0)
    node_2 = module_0.Node(var_2)
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(var_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_2.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1718():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    dict_0 = {queue_2: node_1, var_0: list_0}
    node_2 = module_0.Node(dict_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1719():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    int_0 = -524
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(int_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1720():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_1 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    int_1 = 1607
    node_3 = module_0.Node(int_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_5 = queue_15.enqueue(str_1)
    var_6 = queue_15.dequeue()
    assert queue_15.tail is None
    node_4 = module_0.Node(var_6)
    none_type_2 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_2)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_3 = None
    queue_19 = module_0.Queue()
    var_8 = queue_19.enqueue(none_type_3)
    var_9 = queue_17.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1721():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(var_2)
    node_5 = module_0.Node(queue_6)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(node_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_2.dequeue()
    str_2 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    var_3 = queue_4.enqueue(node_2)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_3 = module_0.Node(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(queue_3)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_14.dequeue()
    node_6 = module_0.Node(queue_14)
    node_7 = module_0.Node(var_7)
    node_8 = module_0.Node(queue_14)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(str_1)
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(var_8)
    queue_17 = module_0.Queue()
    var_10 = queue_16.enqueue(queue_16)
    var_11 = queue_17.enqueue(var_10)
    queue_18 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_19 = module_0.Queue()
    var_9.enqueue(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_1 = module_0.Node(str_0)
    var_3 = queue_3.enqueue(node_1)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(queue_4)
    queue_5 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(node_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_5 = module_0.Node(queue_8)
    node_6 = module_0.Node(var_6)
    var_7 = queue_8.enqueue(queue_8)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_9 = queue_10.dequeue()
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(var_10)
    queue_14 = module_0.Queue()
    var_11.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1725():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    var_4 = queue_1.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(str_1)
    var_7 = queue_8.dequeue()
    assert queue_8.tail is None
    queue_9 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(str_2)
    node_2 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_10 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    node_3 = module_0.Node(queue_15)
    queue_17 = module_0.Queue()
    var_11 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_12 = queue_18.dequeue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_13 = queue_19.dequeue()
    queue_22 = module_0.Queue()
    bool_0 = True
    queue_23 = module_0.Queue()
    var_14 = queue_23.enqueue(bool_0)
    none_type_2 = None
    queue_24 = module_0.Queue()
    var_15 = queue_24.enqueue(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(node_5)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_25 = module_0.Queue()
    var_16 = queue_25.dequeue()
    node_8 = module_0.Node(node_7)
    var_7.enqueue(queue_17)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    var_1 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(queue_5)
    var_3 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1727():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    var_1 = queue_0.enqueue(node_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    bool_1 = False
    tuple_0 = (bool_1,)
    node_6 = module_0.Node(tuple_0)
    queue_8 = module_0.Queue()
    var_3 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(str_1)
    node_7 = module_0.Node(str_1)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    str_2 = "1Yd=9eK W+Bj:"
    node_10 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    var_7 = queue_13.dequeue()
    node_11 = module_0.Node(queue_13)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    int_1 = 1992
    node_12 = module_0.Node(int_1)
    queue_16 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "~W:Qn]a>6w"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_0, str_0, str_0, var_0}
    list_0 = [var_0, str_0, set_0]
    node_0 = module_0.Node(list_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    node_3 = module_0.Node(queue_3)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    node_6 = module_0.Node(queue_6)
    int_1 = 1607
    node_7 = module_0.Node(int_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(node_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_2)
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_11 = module_0.Node(list_2)
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    node_13 = module_0.Node(node_12)
    bool_2 = False
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    set_1 = {bool_2, var_5, queue_14, var_5}
    queue_15 = module_0.Queue()
    var_6 = queue_15.enqueue(set_1)
    node_14 = module_0.Node(var_6)
    node_15 = module_0.Node(bool_2)
    node_16 = module_0.Node(queue_15)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1730():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    none_type_0 = None
    var_0 = queue_0.enqueue(complex_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_3 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    queue_5 = module_0.Queue()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    node_7 = module_0.Node(node_6)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_8)
    var_3 = queue_6.dequeue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(str_3)
    var_8 = queue_15.dequeue()
    assert queue_15.tail is None
    node_10 = module_0.Node(var_8)
    str_4 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(str_4)
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(var_9)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_11 = queue_19.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1732():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_3)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(node_3)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(var_4)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_10.dequeue()
    queue_12 = module_0.Queue()
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(str_4)
    node_6 = module_0.Node(str_4)
    var_9 = queue_13.enqueue(node_6)
    queue_14 = module_0.Queue()
    var_10 = queue_14.dequeue()
    var_10.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1733():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_6 = module_0.Node(queue_2)
    node_7 = module_0.Node(none_type_0)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_9 = module_0.Node(node_8)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    var_4 = queue_7.enqueue(queue_7)
    var_5 = queue_8.enqueue(var_4)
    str_2 = "~%25QZ3{"
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(str_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_10 = module_0.Node(list_1)
    queue_10 = module_0.Queue()
    node_11 = module_0.Node(bool_1)
    queue_11 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_3)
    queue_12 = module_0.Queue()
    var_0.enqueue(node_12)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_0 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(queue_4)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(node_3)
    queue_8 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    var_3 = queue_10.dequeue()
    node_6 = module_0.Node(list_0)
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(queue_11)
    var_6 = queue_12.dequeue()
    assert queue_12.tail is None
    str_2 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_2)
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(var_7)
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_9 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1735():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(none_type_0)
    var_4 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    var_5 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_6)
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_7 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1736():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    node_2 = module_0.Node(var_0)
    var_1 = queue_2.enqueue(queue_2)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_3)
    var_5 = queue_8.dequeue()
    queue_10 = module_0.Queue()
    node_4 = module_0.Node(queue_10)
    var_4.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1737():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_2 = module_0.Node(node_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    dict_0 = {var_5: node_5, node_5: str_0, str_0: str_1, queue_8: str_0}
    node_6 = module_0.Node(dict_0)
    node_7 = module_0.Node(str_0)
    var_3.enqueue(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_1.dequeue()
    var_2.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_0)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    node_3 = module_0.Node(var_6)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(bool_1)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_1)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_7 = module_0.Node(queue_10)
    var_8 = queue_3.enqueue(var_1)
    var_8.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    int_0 = -524
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(int_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_1 = -65
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(int_1)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1742():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_2)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    int_0 = -65
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(int_0)
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    complex_1 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_1)
    var_3.enqueue(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bool_0 = False
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_8 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_2)
    var_2 = queue_2.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    queue_3 = module_0.Queue()
    node_9 = module_0.Node(queue_2)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_2)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    node_12 = module_0.Node(queue_5)
    node_13 = module_0.Node(var_4)
    node_14 = module_0.Node(queue_5)
    str_3 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_3)
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(var_5)
    var_3.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(node_3)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_3: bool_1, none_type_1: var_2}
    node_4 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_5 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    node_7 = module_0.Node(none_type_2)
    var_7 = queue_11.enqueue(none_type_2)
    str_0 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(str_0)
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(var_8)
    queue_14 = module_0.Queue()
    var_10 = queue_12.enqueue(str_0)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_11 = queue_15.enqueue(str_1)
    queue_16 = module_0.Queue()
    var_12 = queue_16.enqueue(var_11)
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(queue_1)
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_3.dequeue()
    assert queue_3.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    node_4 = module_0.Node(queue_4)
    node_5 = module_0.Node(var_3)
    var_4 = queue_4.enqueue(queue_4)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(node_6)
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_6: bool_0, none_type_0: var_5}
    node_7 = module_0.Node(dict_0)
    var_6 = queue_3.enqueue(node_7)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_4 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    var_4.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    var_3 = queue_1.dequeue()
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_6 = module_0.Node(bytes_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    dict_0 = {queue_7: node_7, var_4: list_0}
    node_8 = module_0.Node(dict_0)
    str_1 = "~W:Qn]a>6w"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_1)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_1, str_1, str_1, var_5}
    list_1 = [var_5, str_1, set_0]
    node_9 = module_0.Node(list_1)
    var_1.enqueue(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_1)
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    node_6 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(str_1)
    str_2 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(str_2)
    node_7 = module_0.Node(str_2)
    var_6 = queue_7.enqueue(node_7)
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_8 = queue_8.dequeue()
    node_8 = module_0.Node(var_8)
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    var_9 = queue_10.dequeue()
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_10 = queue_11.enqueue(str_3)
    queue_12 = module_0.Queue()
    var_11 = queue_12.enqueue(var_10)
    queue_13 = module_0.Queue()
    var_12 = queue_12.enqueue(queue_12)
    var_13 = queue_13.enqueue(var_12)
    queue_14 = module_0.Queue()
    var_14 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    var_15 = queue_14.dequeue()
    queue_16 = module_0.Queue()
    var_4.enqueue(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    var_0 = queue_4.enqueue(node_3)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(queue_6)
    queue_8 = module_0.Queue()
    var_2 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    var_2.enqueue(queue_4)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(none_type_0)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    node_2 = module_0.Node(var_1)
    queue_9 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_2 = queue_12.enqueue(node_4)
    var_3 = queue_11.dequeue()
    queue_13 = module_0.Queue()
    var_4 = queue_13.dequeue()
    node_5 = module_0.Node(queue_13)
    node_6 = module_0.Node(var_4)
    var_5 = queue_13.enqueue(queue_13)
    complex_2 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_2)
    queue_14 = module_0.Queue()
    var_6 = queue_14.dequeue()
    node_8 = module_0.Node(node_7)
    none_type_1 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_1)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_9 = module_0.Node(queue_16)
    bool_1 = False
    queue_18 = module_0.Queue()
    var_8 = queue_18.dequeue()
    set_0 = {bool_1, var_8, queue_18, var_8}
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(set_0)
    node_10 = module_0.Node(var_9)
    node_11 = module_0.Node(bool_1)
    node_12 = module_0.Node(queue_18)
    var_8.enqueue(queue_7)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    int_0 = 1607
    node_4 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(str_1)
    var_5 = queue_12.dequeue()
    assert queue_12.tail is None
    int_1 = -4556
    node_5 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_6 = queue_14.enqueue(queue_13)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(none_type_0)
    queue_18 = module_0.Queue()
    node_8 = module_0.Node(var_7)
    queue_19 = module_0.Queue()
    var_8 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_9 = queue_20.dequeue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    var_10 = queue_21.dequeue()
    queue_24 = module_0.Queue()
    var_11 = queue_24.dequeue()
    queue_25 = module_0.Queue()
    var_12 = queue_24.dequeue()
    node_9 = module_0.Node(var_11)
    queue_26 = module_0.Queue()
    var_13 = queue_26.dequeue()
    queue_27 = module_0.Queue()
    var_14 = queue_26.dequeue()
    var_13.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    int_1 = -524
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(int_1)
    var_2 = queue_2.dequeue()
    assert var_2 == -524
    assert queue_2.head is None
    assert queue_2.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bool_2 = False
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    set_0 = {bool_2, var_3, queue_4, var_3}
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(set_0)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(queue_5)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(bool_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_0)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(node_10)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1755():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_1)
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_4)
    var_4 = queue_3.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    int_0 = -524
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(int_0)
    var_6 = queue_7.dequeue()
    assert queue_7.tail is None
    complex_1 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_1)
    queue_8 = module_0.Queue()
    node_7 = module_0.Node(queue_8)
    queue_9 = module_0.Queue()
    var_7 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    dict_0 = {}
    node_8 = module_0.Node(dict_0)
    var_0.enqueue(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_2 = module_0.Node(queue_5)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_5)
    assert (
        f"{type(queue_7.head).__module__}.{type(queue_7.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_7.tail).__module__}.{type(queue_7.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_0 = -524
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(int_0)
    var_5 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_6 = module_0.Node(var_7)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1757():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == -524
    assert queue_0.head is None
    assert queue_0.tail is None
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_2 = queue_1.enqueue(str_0)
    queue_2 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(queue_5)
    var_5 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    int_1 = -4556
    node_4 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    node_5 = module_0.Node(queue_10)
    var_7 = queue_10.enqueue(var_6)
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(queue_11)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_12 = module_0.Queue()
    var_8 = queue_12.dequeue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1758():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    var_2 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2.enqueue(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    list_0 = []
    list_1 = [list_0, list_0]
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(list_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bytes_0 = b"\xf8gb\x8b\xb9\xd2\x1b.\xc4p\x90_w\xaf"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    node_2 = module_0.Node(str_0)
    var_3 = queue_2.enqueue(node_2)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(var_4)
    var_5 = queue_3.enqueue(queue_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(bool_0)
    queue_6 = module_0.Queue()
    dict_0 = {}
    node_8 = module_0.Node(dict_0)
    int_0 = 1607
    node_9 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_7 = queue_8.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_10 = module_0.Node(bytes_0)
    var_1.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(str_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    node_2 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_5 = module_0.Node(node_4)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    node_7 = module_0.Node(queue_9)
    var_6 = queue_9.enqueue(var_5)
    var_7 = queue_1.enqueue(bytes_0)
    var_7.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    int_0 = 1607
    node_3 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_5 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    int_1 = 1992
    node_6 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(node_7)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    var_4 = queue_11.dequeue()
    int_2 = 1607
    node_10 = module_0.Node(int_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_5.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_2 = module_0.Node(var_1)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_3 = module_0.Node(bytes_0)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    node_7 = module_0.Node(node_6)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(node_8)
    var_3 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_11.dequeue()
    node_9 = module_0.Node(var_4)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_1)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    node_10 = module_0.Node(queue_14)
    node_11 = module_0.Node(none_type_1)
    var_7 = queue_13.enqueue(none_type_1)
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1765():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(str_1)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_5.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_5.head is None
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(queue_5)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_2 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(var_2)
    queue_10 = module_0.Queue()
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_3 = queue_11.enqueue(none_type_1)
    queue_12 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(str_2)
    var_4 = queue_13.enqueue(node_5)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_5 = queue_15.enqueue(node_7)
    var_6 = queue_14.dequeue()
    var_7 = queue_15.dequeue()
    assert queue_15.tail is None
    var_4.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"\x08`\xd9\xf9\xb7w\x89\xd2\x86\xae\x81\xa8]u\xf4"
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    var_1.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1769():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_3 = queue_1.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(node_3)
    queue_6 = module_0.Queue()
    node_4 = module_0.Node(queue_6)
    var_3.enqueue(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1771():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    node_6 = module_0.Node(complex_1)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = -4556
    node_9 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_3 = queue_12.enqueue(none_type_2)
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_4 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    var_2.enqueue(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 956
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(node_3)
    var_3 = queue_3.dequeue()
    var_4 = queue_4.dequeue()
    assert queue_4.tail is None
    str_3 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(str_3)
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(var_5)
    queue_7 = module_0.Queue()
    var_7 = queue_6.enqueue(queue_6)
    var_8 = queue_7.enqueue(var_7)
    queue_8 = module_0.Queue()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_4)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_9 = module_0.Queue()
    var_9 = queue_9.enqueue(node_5)
    queue_10 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_6 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(node_6)
    str_5 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_5)
    queue_13 = module_0.Queue()
    var_10 = queue_12.dequeue()
    queue_14 = module_0.Queue()
    var_11 = queue_14.dequeue()
    node_9 = module_0.Node(queue_14)
    node_10 = module_0.Node(var_11)
    var_12 = queue_14.enqueue(queue_14)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_11 = module_0.Node(list_0)
    queue_17 = module_0.Queue()
    node_12 = module_0.Node(bool_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1774():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    var_0.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    queue_0 = module_0.Queue()
    node_0 = module_0.Node(queue_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(str_0)
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1776():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(node_1)
    var_4 = queue_4.dequeue()
    var_5 = queue_5.dequeue()
    assert queue_5.tail is None
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    var_3.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_0.head is None
    assert queue_0.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    dict_0 = {queue_5: node_0, var_3: list_0}
    node_1 = module_0.Node(dict_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_2 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    int_1 = 1992
    node_4 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_11 = module_0.Queue()
    var_6 = queue_11.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_1)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_2 = -4556
    node_8 = module_0.Node(int_2)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_7 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    str_2 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_2)
    var_2 = queue_1.dequeue()
    assert var_2 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_1)
    var_1.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    var_2.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    node_0 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    node_6 = module_0.Node(str_0)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    var_5 = queue_13.dequeue()
    var_0.enqueue(queue_10)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    queue_2 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(str_2)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(var_2)
    queue_8 = module_0.Queue()
    var_4 = queue_7.enqueue(queue_7)
    var_5 = queue_8.enqueue(var_4)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_0)
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(node_5)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.dequeue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = queue_15.dequeue()
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1783():
    int_0 = -524
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_0.dequeue()
    assert var_1 == -524
    assert queue_0.head is None
    assert queue_0.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_1 = module_0.Node(node_0)
    queue_2 = module_0.Queue()
    var_3 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_5 = queue_4.dequeue()
    queue_7 = module_0.Queue()
    var_6 = queue_7.enqueue(queue_2)
    var_6.enqueue(queue_6)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_1.enqueue(queue_1)
    var_3 = queue_2.enqueue(var_2)
    var_4 = queue_2.dequeue()
    assert queue_2.head is None
    assert queue_2.tail is None
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_5 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_6 = queue_4.enqueue(var_5)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_7 = queue_6.dequeue()
    node_0 = module_0.Node(queue_6)
    node_1 = module_0.Node(var_7)
    node_2 = module_0.Node(queue_6)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1785():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    int_0 = -524
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(int_0)
    var_2 = queue_4.dequeue()
    assert var_2 == -524
    assert queue_4.head is None
    assert queue_4.tail is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(str_1)
    dict_0 = {var_3: node_2, node_2: str_0, str_0: str_1, queue_5: str_0}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_0)
    bool_0 = True
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(bool_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_0.enqueue(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(bool_0)


def test_case_1787():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    node_2 = module_0.Node(queue_4)
    var_2 = queue_4.enqueue(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(node_4)
    bool_1 = False
    dict_0 = {none_type_1: none_type_1, node_4: bool_1, none_type_1: var_3}
    node_5 = module_0.Node(dict_0)
    none_type_2 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    node_8 = module_0.Node(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    node_1 = module_0.Node(queue_2)
    var_1 = queue_2.enqueue(var_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    node_3 = module_0.Node(var_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_0 = -4556
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_0.enqueue(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_3.dequeue()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    var_5 = queue_6.dequeue()
    int_0 = -4556
    node_3 = module_0.Node(int_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    node_4 = module_0.Node(queue_8)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_2)
    queue_9 = module_0.Queue()
    int_1 = 1607
    node_8 = module_0.Node(int_1)
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1790():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_2 = module_0.Node(bytes_0)
    int_0 = -524
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(int_0)
    var_2 = queue_4.dequeue()
    assert var_2 == -524
    assert queue_4.head is None
    assert queue_4.tail is None
    var_2.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_4 = queue_3.dequeue()
    queue_5 = module_0.Queue()
    str_1 = ":LY^21xf6[CVs"
    node_2 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(str_2)
    var_6 = queue_6.dequeue()
    assert queue_6.tail is None
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_7)
    str_3 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_3)
    bool_1 = False
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    set_0 = {bool_1, var_7, queue_8, var_7}
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(set_0)
    node_5 = module_0.Node(var_8)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_9)
    var_7.enqueue(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = 'QAKZ"a.}9+!'
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1793():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_1)
    var_2 = queue_1.dequeue()
    none_type_2 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_2)
    queue_5 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(str_2)
    dict_0 = {var_5: node_1, node_1: str_1, str_1: str_2, queue_8: str_1}
    node_2 = module_0.Node(dict_0)
    node_3 = module_0.Node(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    none_type_3 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(queue_10)
    node_6 = module_0.Node(none_type_3)
    var_7 = queue_11.enqueue(none_type_3)
    complex_1 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_1)
    queue_12 = module_0.Queue()
    node_8 = module_0.Node(queue_12)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_3)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(node_10)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    complex_2 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_2)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_12 = module_0.Node(node_11)
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_4)
    queue_20 = module_0.Queue()
    var_9 = queue_19.dequeue()
    str_5 = "w8<H^+~qIrArq]1_$"
    node_14 = module_0.Node(str_5)
    var_3.enqueue(node_10)


def test_case_1794():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_1.dequeue()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    queue_3 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    node_4 = module_0.Node(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    int_0 = 908
    complex_0 = 2640.862 - 1733j
    dict_0 = {complex_0: int_0, complex_0: int_0}
    int_1 = -100
    tuple_0 = (int_0, complex_0, dict_0, int_1)
    int_2 = -407
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_2)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(queue_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(var_0)
    queue_3 = module_0.Queue()
    var_2 = queue_2.enqueue(queue_2)
    var_3 = queue_3.enqueue(var_2)
    var_4 = queue_3.dequeue()
    assert queue_3.head is None
    assert queue_3.tail is None
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_5 = queue_4.dequeue()
    node_6 = module_0.Node(queue_4)
    bool_1 = False
    queue_5 = module_0.Queue()
    var_6 = queue_5.dequeue()
    set_0 = {bool_1, var_6, queue_5, var_6}
    queue_6 = module_0.Queue()
    var_7 = queue_6.enqueue(set_0)
    node_7 = module_0.Node(var_7)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(queue_5)
    queue_7 = module_0.Queue()
    var_8 = queue_7.dequeue()
    node_10 = module_0.Node(queue_7)
    node_11 = module_0.Node(var_8)
    complex_0 = -2503.2 - 384.3391j
    node_12 = module_0.Node(complex_0)
    queue_8 = module_0.Queue()
    var_9 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_10 = queue_9.dequeue()
    str_2 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_11 = queue_10.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_12 = queue_11.enqueue(var_11)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    node_13 = module_0.Node(var_11)
    var_6.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_2 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(queue_4)
    var_4 = queue_5.dequeue()
    assert queue_5.tail is None
    queue_6 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_4 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    bool_2 = False
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    set_0 = {bool_2, var_3, queue_7, var_3}
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(set_0)
    assert (
        f"{type(queue_8.head).__module__}.{type(queue_8.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_8.tail).__module__}.{type(queue_8.tail).__qualname__}"
        == "queue5.Node"
    )
    node_8 = module_0.Node(var_4)
    node_9 = module_0.Node(bool_2)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_10 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_3)
    str_4 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(str_4)
    dict_0 = {var_7: node_12, node_12: str_3, str_3: str_4, queue_14: str_3}
    node_13 = module_0.Node(dict_0)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_14 = module_0.Node(list_2)
    queue_15 = module_0.Queue()
    var_8 = queue_15.dequeue()
    dict_1 = {queue_15: node_14, var_8: list_2}
    node_15 = module_0.Node(dict_1)
    var_7.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1799():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_1.dequeue()
    node_2 = module_0.Node(var_2)
    bytes_0 = b"\xc5\xc3\xa7"
    node_3 = module_0.Node(bytes_0)
    bool_0 = True
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(bool_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    int_0 = 1992
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(node_5)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_6 = module_0.Node(queue_7)
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    int_1 = 1992
    node_7 = module_0.Node(int_1)
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_2)
    queue_12 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_9 = queue_15.enqueue(none_type_3)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    var_10 = queue_17.dequeue()
    int_2 = -4556
    node_10 = module_0.Node(int_2)
    var_9.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1800():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = -65
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(int_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = queue_6.dequeue()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(node_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_1 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    node_2 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    var_1 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_1 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(complex_1)
    complex_2 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_2)
    queue_5 = module_0.Queue()
    node_6 = module_0.Node(queue_5)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_1.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(none_type_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_8 = module_0.Queue()
    var_1 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(node_8)
    queue_11 = module_0.Queue()
    node_9 = module_0.Node(queue_11)
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_3 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_10 = module_0.Node(queue_13)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_4 = queue_15.enqueue(str_1)
    queue_16 = module_0.Queue()
    var_5 = queue_16.enqueue(var_4)
    queue_17 = module_0.Queue()
    var_6 = queue_15.enqueue(str_1)
    complex_0 = -2503.2 - 384.3391j
    node_11 = module_0.Node(complex_0)
    queue_18 = module_0.Queue()
    var_7 = queue_18.dequeue()
    node_12 = module_0.Node(node_11)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_13 = module_0.Node(list_2)
    node_14 = module_0.Node(bool_3)
    node_15 = module_0.Node(node_14)
    queue_19 = module_0.Queue()
    var_8 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_8.enqueue(queue_7)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_0 = queue_5.enqueue(str_0)
    assert (
        f"{type(queue_5.head).__module__}.{type(queue_5.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_5.tail).__module__}.{type(queue_5.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(str_0)
    var_1 = queue_5.enqueue(node_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(queue_6)
    var_0.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_1 = -4556
    node_3 = module_0.Node(int_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_0 = queue_6.dequeue()
    node_4 = module_0.Node(queue_6)
    node_5 = module_0.Node(var_0)
    var_1 = queue_6.enqueue(queue_6)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1805():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(queue_0)
    str_0 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(str_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_1.head is None
    assert queue_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    node_2 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_7 = module_0.Queue()
    str_2 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_2)
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(var_4)
    queue_10 = module_0.Queue()
    var_6 = queue_8.enqueue(str_2)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_5 = module_0.Node(queue_11)
    node_6 = module_0.Node(var_7)
    var_8 = queue_11.enqueue(queue_11)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_0 = None
    var_4.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_2 = module_0.Node(var_1)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bool_0 = False
    tuple_0 = (bool_0,)
    node_3 = module_0.Node(tuple_0)
    queue_10 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node(str_0)
    var_4 = queue_11.enqueue(node_4)
    var_2.dequeue()


def test_case_1807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1808():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    int_0 = -524
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(int_0)
    var_2 = queue_4.dequeue()
    assert var_2 == -524
    assert queue_4.head is None
    assert queue_4.tail is None
    var_2.enqueue(queue_3)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "1Yd=9eK W+Bj:"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    node_4 = module_0.Node(str_1)
    int_0 = 1607
    node_5 = module_0.Node(int_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_0 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_1 = queue_12.enqueue(none_type_0)
    assert (
        f"{type(queue_12.head).__module__}.{type(queue_12.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_12.tail).__module__}.{type(queue_12.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_9 = module_0.Node(queue_13)
    node_10 = module_0.Node(none_type_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_11 = module_0.Node(list_2)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_1.enqueue(node_9)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.dequeue()
    queue_3 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(node_2)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_5 = module_0.Queue()
    node_3 = module_0.Node(queue_5)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    node_5 = module_0.Node(var_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    var_0.enqueue(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    dict_0 = {}
    node_1 = module_0.Node(dict_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(bool_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    bool_1 = False
    tuple_0 = (bool_1,)
    node_4 = module_0.Node(tuple_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    var_2 = queue_6.dequeue()
    node_6 = module_0.Node(queue_6)
    node_7 = module_0.Node(var_2)
    node_8 = module_0.Node(queue_6)
    none_type_2 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_2)
    queue_8 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    node_10 = module_0.Node(str_0)
    var_4 = queue_9.enqueue(node_9)
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(str_1)
    node_11 = module_0.Node(str_1)
    queue_11 = module_0.Queue()
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()
    int_0 = -4556
    node_12 = module_0.Node(int_0)
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(queue_14)
    var_1.enqueue(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = 1992
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_6 = module_0.Node(var_1)
    int_1 = -4556
    node_7 = module_0.Node(int_1)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    var_3 = queue_5.dequeue()
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    assert (
        f"{type(queue_6.head).__module__}.{type(queue_6.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_6.tail).__module__}.{type(queue_6.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    node_11 = module_0.Node(node_10)
    var_4.enqueue(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_2 = module_0.Node(queue_4)
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node(node_3)
    var_3 = queue_6.dequeue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_5 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_11.dequeue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    queue_12 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    complex_1 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_1)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    queue_14 = module_0.Queue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_9 = module_0.Node(bytes_0)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_2)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_10 = module_0.Node(list_1)
    var_8 = queue_17.dequeue()
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_18 = module_0.Queue()
    var_9 = queue_18.enqueue(queue_18)
    str_1 = "~%25QZ3{"
    queue_19 = module_0.Queue()
    var_10 = queue_19.enqueue(str_1)
    queue_20 = module_0.Queue()
    var_11 = queue_20.enqueue(var_10)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_10.enqueue(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.dequeue()
    var_1.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    node_1 = module_0.Node(var_0)
    var_1.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_1 = True
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(bool_1)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(set_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1818():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    node_2 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    node_3 = module_0.Node(queue_6)
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(queue_6)
    queue_7 = module_0.Queue()
    var_5 = queue_7.dequeue()
    node_6 = module_0.Node(queue_7)
    node_7 = module_0.Node(var_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(bool_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_10 = module_0.Node(bytes_0)
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_8 = queue_11.dequeue()
    bool_1 = False
    node_11 = module_0.Node(bool_1)
    queue_13 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(str_1)
    queue_15 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_12 = module_0.Node(str_2)
    queue_16 = module_0.Queue()
    bool_2 = False
    queue_17 = module_0.Queue()
    var_10 = queue_17.dequeue()
    set_0 = {bool_2, var_10, queue_17, var_10}
    queue_18 = module_0.Queue()
    var_11 = queue_18.enqueue(set_0)
    node_13 = module_0.Node(var_11)
    node_14 = module_0.Node(bool_2)
    node_15 = module_0.Node(queue_18)
    queue_19 = module_0.Queue()
    var_12 = queue_19.dequeue()
    queue_20 = module_0.Queue()
    var_13 = queue_20.enqueue(queue_19)
    var_14 = queue_20.dequeue()
    assert queue_20.tail is None
    queue_21 = module_0.Queue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1819():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_0 = queue_3.enqueue(str_1)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(str_1)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1820():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    queue_1 = module_0.Queue()
    var_1 = queue_0.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    var_2.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    int_0 = 1992
    node_1 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    queue_4 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1822():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(queue_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_7 = module_0.Queue()
    var_2 = queue_7.dequeue()
    node_5 = module_0.Node(node_4)
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    var_3 = queue_2.dequeue()
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1823():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    set_0 = {bool_0, var_0, queue_2, var_0}
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(set_0)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    node_4 = module_0.Node(var_1)
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(queue_3)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(str_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(var_3)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = 2346
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.dequeue()
    queue_8 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1827():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_0 = module_0.Node(queue_1)
    node_1 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = queue_5.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    queue_9 = module_0.Queue()
    var_4 = queue_9.enqueue(node_5)
    queue_10 = module_0.Queue()
    node_6 = module_0.Node(queue_10)
    complex_0 = -2503.2 - 384.3391j
    node_7 = module_0.Node(complex_0)
    queue_11 = module_0.Queue()
    node_8 = module_0.Node(queue_11)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_5 = queue_11.dequeue()
    var_5.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_2)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bool_1 = True
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(bool_1)
    queue_5 = module_0.Queue()
    var_2 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    var_3 = queue_5.dequeue()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_2)
    var_6 = queue_9.dequeue()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_3 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_3)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    node_5 = module_0.Node(queue_13)
    node_6 = module_0.Node(none_type_3)
    var_8 = queue_14.enqueue(none_type_3)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_0)
    queue_15 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_8 = module_0.Node(complex_0)
    queue_16 = module_0.Queue()
    var_9 = queue_16.dequeue()
    node_9 = module_0.Node(list_0)
    var_8.enqueue(queue_10)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = -65
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_1 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    int_1 = 1607
    node_2 = module_0.Node(int_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(bool_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_1 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_2 = queue_9.enqueue(none_type_1)
    var_3 = queue_7.dequeue()
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    node_7 = module_0.Node(str_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.dequeue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_9 = module_0.Node(complex_0)
    node_10 = module_0.Node(complex_0)
    str_1 = "~%25QZ3{"
    queue_15 = module_0.Queue()
    var_5 = queue_15.enqueue(str_1)
    node_11 = module_0.Node(str_1)
    var_6 = queue_15.enqueue(node_11)
    str_2 = ":LY^21xf6[CVs"
    node_12 = module_0.Node(str_2)
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    int_0 = -4556
    node_6 = module_0.Node(int_0)
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(queue_4)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    queue_7 = module_0.Queue()
    bool_2 = True
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(bool_2)
    str_2 = "vOK:\\f"
    node_7 = module_0.Node(str_2)
    int_1 = -4556
    node_8 = module_0.Node(int_1)
    queue_9 = module_0.Queue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_9 = module_0.Node(str_3)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_10.enqueue(queue_9)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_1)
    queue_12 = module_0.Queue()
    var_6 = queue_12.dequeue()
    dict_0 = {queue_12: node_10, var_6: list_1}
    node_11 = module_0.Node(dict_0)
    str_4 = "~%25QZ3{"
    queue_13 = module_0.Queue()
    var_7 = queue_13.enqueue(str_4)
    node_12 = module_0.Node(str_4)
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_13 = module_0.Node(queue_14)
    var_9 = queue_14.enqueue(var_8)
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1831():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    var_1 = queue_0.dequeue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_0)
    node_2 = module_0.Node(str_0)
    var_2 = queue_3.enqueue(node_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    queue_4 = module_0.Queue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_6 = module_0.Node(queue_7)
    node_7 = module_0.Node(none_type_1)
    var_4 = queue_6.enqueue(none_type_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    var_0.enqueue(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = "&Yyk^f+"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(str_0)
    int_0 = 1607
    node_1 = module_0.Node(int_0)
    var_0.enqueue(queue_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_1 = module_0.Node(node_0)
    int_0 = 1607
    node_2 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    node_3 = module_0.Node(queue_11)
    var_5 = queue_11.enqueue(var_4)
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    queue_12 = module_0.Queue()
    int_2 = -4556
    node_5 = module_0.Node(int_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    var_6 = queue_13.dequeue()
    node_7 = module_0.Node(queue_13)
    var_7 = queue_13.enqueue(var_6)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_8 = module_0.Node(list_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_1)
    queue_16 = module_0.Queue()
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_12 = module_0.Node(list_2)
    queue_17 = module_0.Queue()
    node_13 = module_0.Node(bool_3)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_8 = queue_18.dequeue()
    var_6.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = -1472
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node(queue_1)
    node_2 = module_0.Node(none_type_0)
    var_1 = queue_2.enqueue(none_type_0)
    str_0 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(str_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    var_0.enqueue(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_3 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(node_2)
    complex_0 = -2503.2 - 384.3391j
    node_4 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_5 = module_0.Node(node_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    queue_6 = module_0.Queue()
    node_7 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_0)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_12.enqueue(node_8)
    var_5 = queue_11.dequeue()
    none_type_3 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_3)
    queue_14 = module_0.Queue()
    var_2.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1839():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(queue_0)
    str_0 = "~W:Qn]a>6w"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    set_1 = {str_0, str_0, str_0, var_2}
    list_0 = [var_2, str_0, set_1]
    node_3 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    var_3 = queue_3.dequeue()
    node_4 = module_0.Node(queue_3)
    node_5 = module_0.Node(var_3)
    var_4 = queue_3.enqueue(queue_3)
    queue_4 = module_0.Queue()
    var_5 = queue_4.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_6 = module_0.Node(str_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    int_0 = 1607
    node_8 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_4.enqueue(queue_12)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    bytes_0 = b"\xc5\xc3\xa7"
    node_1 = module_0.Node(bytes_0)
    bool_0 = True
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(bool_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    queue_3 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_3 = module_0.Node(complex_0)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_4 = module_0.Node(list_0)
    var_1.enqueue(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    complex_0 = -2503.2 - 384.3391j
    node_0 = module_0.Node(complex_0)
    queue_0 = module_0.Queue()
    int_0 = -524
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(int_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_1.dequeue()
    assert var_1 == -524
    assert queue_1.head is None
    assert queue_1.tail is None
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    var_1.enqueue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(node_1)
    var_2 = queue_2.enqueue(var_1)
    bool_0 = True
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(bool_0)
    queue_5 = module_0.Queue()
    var_4 = queue_5.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    var_3 = queue_3.dequeue()
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_0 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    var_4 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_5 = queue_6.dequeue()
    node_1 = module_0.Node(var_4)
    int_0 = -4556
    node_2 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.enqueue(queue_8)
    node_4 = module_0.Node(queue_10)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    str_3 = "~%25QZ3{"
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(str_3)
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(var_7)
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_4)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(node_8)
    var_10 = queue_13.enqueue(var_9)
    var_5.enqueue(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1.enqueue(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(var_0)
    int_0 = -4556
    node_1 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_2 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(queue_4)
    str_1 = "~%25QZ3{"
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(str_1)
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(var_2)
    int_1 = 1607
    node_4 = module_0.Node(int_1)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    queue_9 = module_0.Queue()
    var_5 = queue_8.dequeue()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = queue_10.dequeue()
    int_2 = 2029
    node_7 = module_0.Node(int_2)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(str_3)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1847():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_0.Node(tuple_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(node_1)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_1 = False
    dict_0 = {none_type_0: none_type_0, node_1: bool_1, none_type_0: var_0}
    node_2 = module_0.Node(dict_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_2 = queue_4.dequeue()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    queue_6 = module_0.Queue()
    var_3 = queue_4.dequeue()
    var_4 = queue_4.dequeue()
    bytes_0 = b"\xc5\xc3\xa7"
    node_4 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(bytes_0)
    bool_3 = False
    queue_8 = module_0.Queue()
    var_6 = queue_8.dequeue()
    set_0 = {bool_3, var_6, queue_8, var_6}
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(set_0)
    node_6 = module_0.Node(var_7)
    node_7 = module_0.Node(bool_3)
    int_0 = -1472
    node_8 = module_0.Node(int_0)
    queue_10 = module_0.Queue()
    var_8 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    var_9 = queue_10.dequeue()
    str_1 = "1Yd=9eK W+Bj:"
    node_9 = module_0.Node(str_1)
    node_10 = module_0.Node(queue_10)
    str_2 = "~%25QZ3{"
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(str_2)
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(var_10)
    queue_14 = module_0.Queue()
    var_12 = queue_12.enqueue(str_2)
    var_8.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1848():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, node_0: bool_0, none_type_0: var_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(node_3)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node(queue_3)
    queue_4 = module_0.Queue()
    var_2 = queue_4.dequeue()
    node_5 = module_0.Node(queue_4)
    node_6 = module_0.Node(var_2)
    node_7 = module_0.Node(queue_4)
    queue_5 = module_0.Queue()
    var_3 = queue_5.dequeue()
    node_8 = module_0.Node(queue_5)
    node_9 = module_0.Node(var_3)
    var_3.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1849():
    list_0 = []
    int_0 = 2028
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(int_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.enqueue(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    str_0 = "~W:Qn]a>6w"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    set_0 = {str_0, str_0, str_0, var_0}
    list_0 = [var_0, str_0, set_0]
    node_0 = module_0.Node(list_0)
    str_1 = "~%25QZ3{"
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(str_1)
    queue_2 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_2)
    queue_3 = module_0.Queue()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_3)
    queue_4 = module_0.Queue()
    node_3 = module_0.Node(str_3)
    str_4 = "1Yd=9eK W+Bj:"
    node_4 = module_0.Node(str_4)
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(queue_5)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(bool_0)
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_2)
    queue_6 = module_0.Queue()
    node_9 = module_0.Node(bool_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    str_5 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_10 = module_0.Node(str_5)
    int_0 = -4556
    node_11 = module_0.Node(int_0)
    queue_9 = module_0.Queue()
    var_3 = queue_9.enqueue(queue_9)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1851():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1852():
    int_0 = -4556
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_0 = queue_1.enqueue(queue_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_2 = module_0.Node(queue_2)
    queue_3 = module_0.Queue()
    var_1 = queue_3.dequeue()
    node_3 = module_0.Node(queue_3)
    node_4 = module_0.Node(var_1)
    node_5 = module_0.Node(queue_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_6 = module_0.Node(str_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_7.dequeue()
    bool_0 = False
    queue_8 = module_0.Queue()
    var_4 = queue_8.dequeue()
    set_0 = {bool_0, var_4, queue_8, var_4}
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(set_0)
    node_7 = module_0.Node(var_5)
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(queue_9)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(str_3)
    dict_0 = {var_6: node_10, node_10: str_2, str_2: str_3, queue_10: str_2}
    node_11 = module_0.Node(dict_0)
    queue_11 = module_0.Queue()
    var_5.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1853():
    bool_0 = False
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    set_0 = {bool_0, var_0, queue_0, var_0}
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(set_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(bool_0)
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(var_0)
    queue_2 = module_0.Queue()
    var_2 = queue_0.enqueue(str_0)
    bytes_0 = b""
    node_0 = module_0.Node(bytes_0)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(bool_0)
    queue_1 = module_0.Queue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_0 = queue_2.enqueue(str_0)
    assert (
        f"{type(queue_2.head).__module__}.{type(queue_2.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_2.tail).__module__}.{type(queue_2.tail).__qualname__}"
        == "queue5.Node"
    )
    var_1 = queue_2.dequeue()
    assert var_1 == "~%25QZ3{"
    assert queue_2.head is None
    assert queue_2.tail is None
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    queue_4 = module_0.Queue()
    node_5 = module_0.Node(str_1)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(queue_6)
    var_2.enqueue(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bytes_0 = b"\xdee\x8a\xcc\xf1\xe3\x89}\xf7\xae\x80N(\xa3\x8a\xe4\x89"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(bytes_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1857():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    queue_0 = module_0.Queue()
    tuple_0 = (queue_0,)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(tuple_0)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1858():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = queue_2.dequeue()
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_1)
    var_2.enqueue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    var_0 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(bool_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_9.enqueue(none_type_0)
    assert (
        f"{type(queue_9.head).__module__}.{type(queue_9.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_9.tail).__module__}.{type(queue_9.tail).__qualname__}"
        == "queue5.Node"
    )
    str_0 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_2 = queue_10.enqueue(str_0)
    var_3 = queue_10.dequeue()
    assert queue_10.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.dequeue()
    queue_12 = module_0.Queue()
    var_5 = queue_11.dequeue()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1860():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    queue_1 = module_0.Queue()
    var_1 = queue_1.dequeue()
    queue_2 = module_0.Queue()
    var_2 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_3.dequeue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    queue_8 = module_0.Queue()
    var_5 = queue_7.dequeue()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = queue_9.dequeue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.dequeue()
    node_3 = module_0.Node(queue_11)
    var_8 = queue_11.enqueue(var_7)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_0)
    queue_13 = module_0.Queue()
    node_6 = module_0.Node(queue_13)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_9 = queue_13.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(none_type_1)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_2 = None
    queue_19 = module_0.Queue()
    var_11 = queue_19.enqueue(none_type_2)
    var_12 = queue_17.dequeue()
    var_11.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1861():
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(node_1)
    assert (
        f"{type(queue_1.head).__module__}.{type(queue_1.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_1.tail).__module__}.{type(queue_1.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_2 = module_0.Queue()
    node_2 = module_0.Node(queue_2)
    str_1 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_3 = module_0.Node(str_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    int_0 = -4556
    node_4 = module_0.Node(int_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_5 = module_0.Node(node_3)
    bytes_0 = b"\xc5\xc3\xa7"
    node_6 = module_0.Node(bytes_0)
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_8 = module_0.Node(str_3)
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(queue_7)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_9 = module_0.Node(list_0)
    queue_8 = module_0.Queue()
    node_10 = module_0.Node(bool_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    int_1 = -4556
    node_11 = module_0.Node(int_1)
    queue_13 = module_0.Queue()
    str_4 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_12 = module_0.Node(str_4)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_2 = queue_14.enqueue(queue_13)
    node_13 = module_0.Node(queue_15)
    none_type_1 = None
    queue_16 = module_0.Queue()
    var_3 = queue_16.enqueue(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_14 = module_0.Node(list_1)
    none_type_2 = None
    node_15 = module_0.Node(none_type_2)
    node_16 = module_0.Node(node_15)
    queue_17 = module_0.Queue()
    var_4 = queue_17.dequeue()
    queue_18 = module_0.Queue()
    var_5 = queue_17.dequeue()
    node_17 = module_0.Node(var_4)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1862():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    node_0 = module_0.Node(queue_0)
    node_1 = module_0.Node(var_0)
    var_1 = queue_0.enqueue(queue_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    var_2 = queue_1.dequeue()
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(var_3)
    queue_4 = module_0.Queue()
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_5 = module_0.Queue()
    var_5 = queue_5.dequeue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_2)
    complex_1 = -2503.2 - 384.3391j
    node_5 = module_0.Node(complex_1)
    queue_6 = module_0.Queue()
    var_6 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_7 = queue_8.dequeue()
    node_6 = module_0.Node(queue_8)
    node_7 = module_0.Node(var_7)
    var_8 = queue_8.enqueue(queue_8)
    queue_9 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(str_1)
    queue_11 = module_0.Queue()
    str_2 = "1Yd=9eK W+Bj:"
    node_8 = module_0.Node(str_2)
    queue_12 = module_0.Queue()
    bool_1 = True
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(bool_1)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    str_3 = "~%25QZ3{"
    queue_16 = module_0.Queue()
    var_12 = queue_16.enqueue(str_3)
    var_13 = queue_16.dequeue()
    assert queue_16.tail is None
    node_9 = module_0.Node(var_13)
    queue_17 = module_0.Queue()
    var_14 = queue_17.dequeue()
    node_10 = module_0.Node(queue_17)
    var_15 = queue_17.enqueue(var_14)
    var_16 = queue_17.enqueue(queue_17)
    var_16.enqueue(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    int_0 = 2029
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    str_0 = "1Yd=9eK W+Bj:"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    str_1 = "~%25QZ3{"
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(str_1)
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_2)
    str_3 = "~%25QZ3{"
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(str_3)
    dict_0 = {var_3: node_2, node_2: str_2, str_2: str_3, queue_7: str_2}
    node_3 = module_0.Node(dict_0)
    node_4 = module_0.Node(str_2)
    str_4 = "~%25QZ3{"
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(str_4)
    queue_9 = module_0.Queue()
    var_5 = queue_9.dequeue()
    queue_10 = module_0.Queue()
    var_6 = queue_10.dequeue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_11.dequeue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.dequeue()
    node_5 = module_0.Node(queue_14)
    var_9 = queue_1.enqueue(none_type_0)
    var_9.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1864():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(node_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    bool_0 = False
    dict_0 = {none_type_1: none_type_1, node_1: bool_0, none_type_1: var_0}
    node_2 = module_0.Node(dict_0)
    none_type_2 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_3 = module_0.Node(queue_2)
    node_4 = module_0.Node(none_type_2)
    var_2 = queue_3.enqueue(none_type_2)
    bytes_0 = b"\xeaD\xc7\x94L-)JO\xd97\x86\x83"
    node_5 = module_0.Node(bytes_0)
    queue_4 = module_0.Queue()
    var_3 = queue_4.dequeue()
    queue_5 = module_0.Queue()
    var_4 = queue_4.dequeue()
    node_6 = module_0.Node(var_4)
    str_0 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_7 = module_0.Node(str_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    int_0 = -4556
    node_8 = module_0.Node(int_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    str_1 = "vOK:\\f"
    node_9 = module_0.Node(str_1)
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    node_1 = module_0.Node(str_0)
    complex_0 = -2503.2 - 384.3391j
    node_2 = module_0.Node(complex_0)
    queue_1 = module_0.Queue()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    queue_2 = module_0.Queue()
    node_4 = module_0.Node(bool_0)
    bool_1 = False
    queue_3 = module_0.Queue()
    var_0 = queue_3.dequeue()
    set_0 = {bool_1, var_0, queue_3, var_0}
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(set_0)
    assert (
        f"{type(queue_4.head).__module__}.{type(queue_4.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_4.tail).__module__}.{type(queue_4.tail).__qualname__}"
        == "queue5.Node"
    )
    node_5 = module_0.Node(var_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    queue_5 = module_0.Queue()
    str_1 = "1Yd=9eK W+Bj:"
    node_7 = module_0.Node(str_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = {node_5}
    list_3 = [bool_3, set_1, bool_2, node_8]
    var_0.enqueue(list_3)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    int_0 = 1607
    node_0 = module_0.Node(int_0)
    queue_0 = module_0.Queue()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    node_2 = module_0.Node(str_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(queue_1)
    bool_1 = False
    tuple_0 = (bool_1,)
    node_6 = module_0.Node(tuple_0)
    queue_2 = module_0.Queue()
    var_0 = queue_2.dequeue()
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(queue_2)
    assert (
        f"{type(queue_3.head).__module__}.{type(queue_3.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_3.tail).__module__}.{type(queue_3.tail).__qualname__}"
        == "queue5.Node"
    )
    var_2 = queue_3.dequeue()
    assert queue_3.tail is None
    var_1.enqueue(queue_2)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    queue_0 = module_0.Queue()
    var_0 = queue_0.dequeue()
    var_0.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1868():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = "~%25QZ3{"
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(str_1)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    dict_0 = {var_0: node_0, node_0: str_0, str_0: str_1, queue_0: str_0}
    node_1 = module_0.Node(dict_0)
    node_2 = module_0.Node(str_0)
    int_0 = 1992
    node_3 = module_0.Node(int_0)
    queue_1 = module_0.Queue()
    str_2 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_4 = module_0.Node(str_2)
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(queue_2)
    queue_3 = module_0.Queue()
    var_2 = queue_3.dequeue()
    queue_4 = module_0.Queue()
    int_1 = 1607
    node_6 = module_0.Node(int_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_7 = module_0.Node(list_0)
    queue_5 = module_0.Queue()
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    complex_0 = -2503.2 - 384.3391j
    node_10 = module_0.Node(complex_0)
    queue_6 = module_0.Queue()
    var_3 = queue_6.dequeue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.dequeue()
    var_1.dequeue()


@pytest.mark.xfail(strict=True)
def test_case_1869():
    none_type_0 = None
    queue_0 = module_0.Queue()
    var_0 = queue_0.enqueue(none_type_0)
    assert (
        f"{type(queue_0.head).__module__}.{type(queue_0.head).__qualname__}"
        == "queue5.Node"
    )
    assert (
        f"{type(queue_0.tail).__module__}.{type(queue_0.tail).__qualname__}"
        == "queue5.Node"
    )
    queue_1 = module_0.Queue()
    node_0 = module_0.Node(var_0)
    str_0 = "~%25QZ3{"
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(str_0)
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_1 = module_0.Node(var_1)
    str_1 = "~%25QZ3{"
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(str_1)
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(var_3)
    queue_8 = module_0.Queue()
    var_5 = queue_7.enqueue(queue_7)
    var_6 = queue_8.enqueue(var_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    queue_9 = module_0.Queue()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_10 = module_0.Queue()
    var_7 = queue_10.dequeue()
    str_3 = "T;\x0c2OWbraI?GJNJ`c3gh"
    node_5 = module_0.Node(str_3)
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    var_9 = queue_14.dequeue()
    int_0 = 2029
    node_7 = module_0.Node(int_0)
    var_10 = queue_4.dequeue()
    var_8.enqueue(var_10)
