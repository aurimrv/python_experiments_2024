[*] Start mutation process:
   - targets: linkedList1.py
   - tests: ./RANDOM
[*] 2195 tests passed:
   - test_linkedList1_RANDOM [2.93764 s]
[*] Start mutants generation and execution:
   - [#   1] AOD linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
- 189:     print(test[-1])
+ 189:     print(test[1])
--------------------------------------------------------------------------------
[2.98229 s] survived
   - [#   2] AOR linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
- 130:         elif index == self.size - 1:
+ 130:         elif index == self.size + 1:
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[6.99742 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
        var_11 = var_4.insert(singly_linked_node_2, bool_9)
>       assert len(doubly_linked_list_5) == 3
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29023: AssertionError
   - [#   3] AOR linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
- 151:             for x in range(index - 1):
+ 151:             for x in range(index + 1):
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[2.85731 s] survived
   - [#   4] AOR linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
- 189:     print(test[-1])
+ 189:     print(test[+1])
--------------------------------------------------------------------------------
[2.82272 s] survived
   - [#   5] ASR linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
-  80:         self.size += 1
+  80:         self.size -= 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[6.45590 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
>       assert len(singly_linked_list_0) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_linkedList1_RANDOM.py:897: ValueError
   - [#   6] ASR linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
- 120:         self.size += 1
+ 120:         self.size -= 1
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[6.17280 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        var_1 = doubly_linked_list_3.append(singly_linked_node_3)
>       assert len(doubly_linked_list_3) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_linkedList1_RANDOM.py:366: ValueError
   - [#   7] ASR linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
- 171:         self.size += 1
+ 171:         self.size -= 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[6.35143 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
        var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)
>       assert len(doubly_linked_list_1) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_linkedList1_RANDOM.py:9710: ValueError
   - [#   8] CDI linkedList1: 
--------------------------------------------------------------------------------
    5: 
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
-   9:     def __init__(self):
-  10:         self.head = None
-  11:         self.size = 0
-  12:         self.cursor = None
-  13:     
+   9:     @classmethod
+  10:     def __init__(self):
+  11:         self.head = None
+  12:         self.size = 0
+  13:         self.cursor = None
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
--------------------------------------------------------------------------------
[2.94519 s] survived
   - [#   9] CDI linkedList1: 
--------------------------------------------------------------------------------
   10:         self.head = None
   11:         self.size = 0
   12:         self.cursor = None
   13:     
-  14:     def __len__(self):
-  15:         return self.size
-  16:     
+  14:     @classmethod
+  15:     def __len__(self):
+  16:         return self.size
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
--------------------------------------------------------------------------------
[6.50437 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_linkedList1_RANDOM.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:16: AttributeError
   - [#  10] CDI linkedList1: 
--------------------------------------------------------------------------------
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
-  17:     def __iter__(self):
-  18:         return self
-  19:     
+  17:     @classmethod
+  18:     def __iter__(self):
+  19:         return self
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
--------------------------------------------------------------------------------
[6.42456 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:168: TypeError: object of type 'type' has no len()

   - [#  11] CDI linkedList1: 
--------------------------------------------------------------------------------
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
-  20:     def __contains__(self, item):
-  21:         if self.head is not None:
-  22:             cur = self.head
-  23:             while cur is not None:
-  24:                 if cur.data is item:
-  25:                     return True
-  26:                 cur = cur.next
-  27:         return False
-  28:     
+  20:     @classmethod
+  21:     def __contains__(self, item):
+  22:         if self.head is not None:
+  23:             cur = self.head
+  24:             while cur is not None:
+  25:                 if cur.data is item:
+  26:                     return True
+  27:                 cur = cur.next
+  28:         return False
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[6.32850 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_15

def test_case_15():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_0.__contains__(singly_linked_node_0)

RANDOM/test_linkedList1_RANDOM.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>
item = <linkedList1.SinglyLinkedNode object at 0x7fd0ee75d540>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'head'

linkedList1:22: AttributeError
   - [#  12] CDI linkedList1: 
--------------------------------------------------------------------------------
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
-  34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
-  36:             raise IndexError()
-  37:         else:
-  38:             cur = self.head
-  39:             for x in range(index):
-  40:                 cur = cur.next
-  41:             return cur.data
-  42:     
+  34:     @classmethod
+  35:     def __getitem__(self, index):
+  36:         if (index >= self.size or index < 0):
+  37:             raise IndexError()
+  38:         else:
+  39:             cur = self.head
+  40:             for x in range(index):
+  41:                 cur = cur.next
+  42:             return cur.data
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
--------------------------------------------------------------------------------
[7.03521 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>, index = False

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:36: AttributeError
   - [#  13] CDI linkedList1: 
--------------------------------------------------------------------------------
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
-  43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
-  45:             raise IndexError()
-  46:         else:
-  47:             cur = self.head
-  48:             for x in range(index):
-  49:                 cur = cur.next
-  50:             cur.data = value
-  51:     
+  43:     @classmethod
+  44:     def __setitem__(self, index, value):
+  45:         if (index >= self.size or index < 0):
+  46:             raise IndexError()
+  47:         else:
+  48:             cur = self.head
+  49:             for x in range(index):
+  50:                 cur = cur.next
+  51:             cur.data = value
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
--------------------------------------------------------------------------------
[6.63504 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ede175e0>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:45: AttributeError
   - [#  14] CDI linkedList1: 
--------------------------------------------------------------------------------
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
-  52:     def next(self):
-  53:         if self.cursor is None:
-  54:             raise StopIteration()
-  55:         else:
-  56:             node = self.cursor.data
-  57:             self.cursor = self.cursor.next
-  58:             return node
-  59:     
+  52:     @classmethod
+  53:     def next(self):
+  54:         if self.cursor is None:
+  55:             raise StopIteration()
+  56:         else:
+  57:             node = self.cursor.data
+  58:             self.cursor = self.cursor.next
+  59:             return node
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
--------------------------------------------------------------------------------
[6.14244 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'cursor'

linkedList1:54: AttributeError
   - [#  15] CDI linkedList1: 
--------------------------------------------------------------------------------
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
-  60:     def append(self, data):
-  61:         ''' Note: The average time for append is O(n)
-  62:             however, insertion is O(1), giving it an
-  63:             advantage over arrays.
-  64:         '''
-  65:         if self.head is None:
-  66:             self.head = SinglyLinkedNode(data)
-  67:             self.cursor = self.head
-  68:         else:
-  69:             node = self.head
-  70:             
-  71:             while node.next is not None:
-  72:                 node = node.next
-  73:             
+  60:     @classmethod
+  61:     def append(self, data):
+  62:         ''' Note: The average time for append is O(n)
+  63:             however, insertion is O(1), giving it an
+  64:             advantage over arrays.
+  65:         '''
+  66:         if self.head is None:
+  67:             self.head = SinglyLinkedNode(data)
+  68:             self.cursor = self.head
+  69:         else:
+  70:             node = self.head
+  71:             
+  72:             while node.next is not None:
+  73:                 node = node.next
   74:             
-  75:             new_node = SinglyLinkedNode(data)
-  76:             
+  75:             
+  76:             new_node = SinglyLinkedNode(data)
   77:             
-  78:             node.next = new_node
-  79:         
-  80:         self.size += 1
-  81: 
+  78:             
+  79:             node.next = new_node
+  80:         
+  81:         self.size += 1
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
--------------------------------------------------------------------------------
[6.22627 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:896: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.SinglyLinkedList'>, data = None

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute 'head'

linkedList1:66: AttributeError
   - [#  16] CDI linkedList1: 
--------------------------------------------------------------------------------
   80:         self.size += 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
-  84:     def __init__(self, data):
-  85:         self.data = data
-  86:         self.next = None
-  87: 
+  84:     @classmethod
+  85:     def __init__(self, data):
+  86:         self.data = data
+  87:         self.next = None
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
--------------------------------------------------------------------------------
[6.24645 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:3322: TypeError: object of type 'bool' has no len()

   - [#  17] CDI linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
-  90:     def __init__(self):
-  91:         
-  92:         super(DoublyLinkedList, self).__init__()
-  93:     
+  90:     @classmethod
+  91:     def __init__(self):
+  92:         
+  93:         super(DoublyLinkedList, self).__init__()
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
--------------------------------------------------------------------------------
[6.30481 s] incompetent

TypeError: linkedList1:93: TypeError: SinglyLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  18] CDI linkedList1: 
--------------------------------------------------------------------------------
   90:     def __init__(self):
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
-  94:     def previous(self):
-  95:         if self.cursor.prev is None:
-  96:             raise StopIteration()
-  97:         else:
-  98:             self.cursor.prev
-  99:             self.cursor = self.cursor.prev
- 100:             return self.cursor.data
- 101:     
+  94:     @classmethod
+  95:     def previous(self):
+  96:         if self.cursor.prev is None:
+  97:             raise StopIteration()
+  98:         else:
+  99:             self.cursor.prev
+ 100:             self.cursor = self.cursor.prev
+ 101:             return self.cursor.data
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
--------------------------------------------------------------------------------
[7.33651 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1206

def test_case_1206():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        bool_1 = False
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_1.previous()

RANDOM/test_linkedList1_RANDOM.py:67708: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'cursor'

linkedList1:96: AttributeError
   - [#  19] CDI linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
- 102:     def append(self, data):
- 103:         ''' Note: The average time for append is O(n)
- 104:             however, insertion is O(1), giving it an
- 105:             advantage over arrays.
- 106:         '''
- 107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
- 110:         else:
- 111:             node = self.head
- 112:             
- 113:             while node.next is not None:
- 114:                 node = node.next
- 115:             
+ 102:     @classmethod
+ 103:     def append(self, data):
+ 104:         ''' Note: The average time for append is O(n)
+ 105:             however, insertion is O(1), giving it an
+ 106:             advantage over arrays.
+ 107:         '''
+ 108:         if self.head is None:
+ 109:             self.head = DoublyLinkedNode(data)
+ 110:             self.cursor = self.head
+ 111:         else:
+ 112:             node = self.head
+ 113:             
+ 114:             while node.next is not None:
+ 115:                 node = node.next
  116:             
- 117:             new_node = DoublyLinkedNode(data)
- 118:             node.next = new_node
- 119:             new_node.prev = node
- 120:         self.size += 1
- 121:     
+ 117:             
+ 118:             new_node = DoublyLinkedNode(data)
+ 119:             node.next = new_node
+ 120:             new_node.prev = node
+ 121:         self.size += 1
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[6.10321 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_1 = doubly_linked_list_3.append(singly_linked_node_3)

RANDOM/test_linkedList1_RANDOM.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ebd74670>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'head'

linkedList1:108: AttributeError
   - [#  20] CDI linkedList1: 
--------------------------------------------------------------------------------
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
- 122:     def insert(self, data, index):
- 123:         if index >= self.size:
- 124:             raise IndexError()
- 125:         if self.head is None:
- 126:             self.head = DoublyLinkedNode(data)
- 127:             self.cursor = self.head
- 128:         
+ 122:     @classmethod
+ 123:     def insert(self, data, index):
+ 124:         if index >= self.size:
+ 125:             raise IndexError()
+ 126:         if self.head is None:
+ 127:             self.head = DoublyLinkedNode(data)
+ 128:             self.cursor = self.head
  129:         
- 130:         elif index == self.size - 1:
- 131:             
- 132:             self.append(data)
- 133:         
- 134:         elif index == 0:
- 135:             
+ 130:         
+ 131:         elif index == self.size - 1:
+ 132:             
+ 133:             self.append(data)
+ 134:         
+ 135:         elif index == 0:
  136:             
  137:             
- 138:             a = self.head
- 139:             c = DoublyLinkedNode(data)
- 140:             
+ 138:             
+ 139:             a = self.head
+ 140:             c = DoublyLinkedNode(data)
  141:             
  142:             
  143:             
- 144:             self.head = c
- 145:             c.next = a
- 146:             a.prev = c
- 147:             self.cursor = self.head
- 148:         else:
- 149:             
- 150:             a = self.head
- 151:             for x in range(index - 1):
- 152:                 a = a.next
- 153:             
+ 144:             
+ 145:             self.head = c
+ 146:             c.next = a
+ 147:             a.prev = c
+ 148:             self.cursor = self.head
+ 149:         else:
+ 150:             
+ 151:             a = self.head
+ 152:             for x in range(index - 1):
+ 153:                 a = a.next
  154:             
  155:             
- 156:             b = a.next
- 157:             c = DoublyLinkedNode(data)
- 158:             
+ 156:             
+ 157:             b = a.next
+ 158:             c = DoublyLinkedNode(data)
  159:             
  160:             
  161:             
- 162:             b.prev = c
- 163:             c.next = b
- 164:             
+ 162:             
+ 163:             b.prev = c
+ 164:             c.next = b
  165:             
  166:             
  167:             
- 168:             a.next = c
- 169:             c.prev = a
- 170:         
- 171:         self.size += 1
- 172: 
+ 168:             
+ 169:             a.next = c
+ 170:             c.prev = a
+ 171:         
+ 172:         self.size += 1
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
--------------------------------------------------------------------------------
[6.25289 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec119cc0>, index = -2582.0

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:124: AttributeError
   - [#  21] CDI linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
- 175:     def __init__(self, data):
- 176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
- 179: 
+ 175:     @classmethod
+ 176:     def __init__(self, data):
+ 177:         
+ 178:         super(DoublyLinkedNode, self).__init__(data)
+ 179:         self.prev = None
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
--------------------------------------------------------------------------------
[6.24308 s] incompetent

TypeError: linkedList1:178: TypeError: SinglyLinkedNode.__init__() missing 1 required positional argument: 'data'

   - [#  22] COI linkedList1: 
--------------------------------------------------------------------------------
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
-  21:         if self.head is not None:
+  21:         if not (self.head is not None):
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
--------------------------------------------------------------------------------
[6.47849 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_257

def test_case_257():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_0 = doubly_linked_list_4.__contains__(singly_linked_node_7)
        assert var_0 is False
        var_1 = doubly_linked_list_5.__iter__()
        assert len(var_1) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_2 = doubly_linked_list_7.__iter__()
        assert len(var_2) == 0
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        none_type_0 = None
        var_3 = doubly_linked_list_8.append(none_type_0)
        assert len(doubly_linked_list_8) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_4 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_6)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_5 = doubly_linked_list_10.append(doubly_linked_list_10)
        assert len(doubly_linked_list_10) == 1
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(var_5)
        assert doubly_linked_node_2.data is None
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        bool_8 = True
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        var_6 = doubly_linked_list_11.__contains__(singly_linked_node_16)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_3.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        var_7 = singly_linked_list_0.__contains__(var_3)
>       assert var_7 is True
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:11683: AssertionError
   - [#  23] COI linkedList1: 
--------------------------------------------------------------------------------
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
-  23:             while cur is not None:
+  23:             while not (cur is not None):
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
   27:         return False
--------------------------------------------------------------------------------
[6.37341 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_257

def test_case_257():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_0 = doubly_linked_list_4.__contains__(singly_linked_node_7)
        assert var_0 is False
        var_1 = doubly_linked_list_5.__iter__()
        assert len(var_1) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_2 = doubly_linked_list_7.__iter__()
        assert len(var_2) == 0
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        none_type_0 = None
        var_3 = doubly_linked_list_8.append(none_type_0)
        assert len(doubly_linked_list_8) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_4 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_6)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_5 = doubly_linked_list_10.append(doubly_linked_list_10)
        assert len(doubly_linked_list_10) == 1
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(var_5)
        assert doubly_linked_node_2.data is None
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        bool_8 = True
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        var_6 = doubly_linked_list_11.__contains__(singly_linked_node_16)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_3.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        var_7 = singly_linked_list_0.__contains__(var_3)
>       assert var_7 is True
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:11683: AssertionError
   - [#  24] COI linkedList1: 
--------------------------------------------------------------------------------
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
-  24:                 if cur.data is item:
+  24:                 if not (cur.data is item):
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
--------------------------------------------------------------------------------
[6.30298 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_116

def test_case_116():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        var_2 = doubly_linked_list_2.__iter__()
        assert len(var_2) == 0
        none_type_0 = None
        singly_linked_node_5 = module_0.SinglyLinkedNode(none_type_0)
        var_3 = doubly_linked_list_0.__contains__(var_0)
>       assert var_3 is False
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:4477: AssertionError
   - [#  25] COI linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if not ((index >= self.size or index < 0)):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.05973 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebd75630>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
   - [#  26] COI linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if not ((index >= self.size or index < 0)):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[6.58479 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec156b90>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ec157d60>

>   ???
E   IndexError

linkedList1:45: IndexError
   - [#  27] COI linkedList1: 
--------------------------------------------------------------------------------
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
-  53:         if self.cursor is None:
+  53:         if not (self.cursor is None):
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
--------------------------------------------------------------------------------
[6.55468 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebffa2c0>

>   ???
E   StopIteration

linkedList1:54: StopIteration
   - [#  28] COI linkedList1: 
--------------------------------------------------------------------------------
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
-  65:         if self.head is None:
+  65:         if not (self.head is None):
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
--------------------------------------------------------------------------------
[6.42350 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:896: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ec787040>, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:71: AttributeError
   - [#  29] COI linkedList1: 
--------------------------------------------------------------------------------
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
-  71:             while node.next is not None:
+  71:             while not (node.next is not None):
   72:                 node = node.next
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
--------------------------------------------------------------------------------
[6.35076 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_41

def test_case_41():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_0)
        assert var_0 is False
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_2 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_6 = False
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
>       var_3 = singly_linked_list_0.append(singly_linked_node_13)

RANDOM/test_linkedList1_RANDOM.py:1245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ebf8c070>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ebf8ce80>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:71: AttributeError
   - [#  30] COI linkedList1: 
--------------------------------------------------------------------------------
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
   94:     def previous(self):
-  95:         if self.cursor.prev is None:
+  95:         if not (self.cursor.prev is None):
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
--------------------------------------------------------------------------------
[7.38010 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1206

def test_case_1206():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        bool_1 = False
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_1.previous()

RANDOM/test_linkedList1_RANDOM.py:67708: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec1e32b0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:100: AttributeError
   - [#  31] COI linkedList1: 
--------------------------------------------------------------------------------
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
- 107:         if self.head is None:
+ 107:         if not (self.head is None):
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
--------------------------------------------------------------------------------
[6.15074 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_1 = doubly_linked_list_3.append(singly_linked_node_3)

RANDOM/test_linkedList1_RANDOM.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed6c0220>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ed6c2020>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:113: AttributeError
   - [#  32] COI linkedList1: 
--------------------------------------------------------------------------------
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
- 113:             while node.next is not None:
+ 113:             while not (node.next is not None):
  114:                 node = node.next
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
--------------------------------------------------------------------------------
[6.21344 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_64

def test_case_64():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_2)
        assert var_1 is False
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
>       var_4 = doubly_linked_list_3.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:2252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf8fd30>, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:113: AttributeError
   - [#  33] COI linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
- 123:         if index >= self.size:
+ 123:         if not (index >= self.size):
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[6.23053 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc0730>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0e9fc10c0>, index = -2582.0

>   ???
E   IndexError

linkedList1:124: IndexError
   - [#  34] COI linkedList1: 
--------------------------------------------------------------------------------
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
- 125:         if self.head is None:
+ 125:         if not (self.head is None):
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
--------------------------------------------------------------------------------
[6.43906 s] incompetent

TypeError: linkedList1:151: TypeError: 'float' object cannot be interpreted as an integer

   - [#  35] COI linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
- 130:         elif index == self.size - 1:
+ 130:         elif not (index == self.size - 1):
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[6.73085 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
        var_11 = var_4.insert(singly_linked_node_2, bool_9)
>       assert len(doubly_linked_list_5) == 3
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29023: AssertionError
   - [#  36] COI linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
- 134:         elif index == 0:
+ 134:         elif not (index == 0):
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[2.82746 s] survived
   - [#  37] COI linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
- 180: if __name__ == '__main__':
+ 180: if not (__name__ == '__main__'):
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
2
3
4
[0.00000 s] incompetent

IndexError

   - [#  38] CRP linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
-  11:         self.size = 0
+  11:         self.size = 1
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[6.16810 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29: AssertionError
   - [#  39] CRP linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
-  29:     ''' Both getitem and setitem represent the magic methods
-  30:         for the object[index] and object[index] = other operations
-  31:         for linked lists they run in O(n) time making them less
-  32:         efficient than a list() for lookups
-  33:     '''
+  29:     '''mutpy'''
+  30:     
+  31:     
+  32:     
+  33:     
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[2.79083 s] survived
   - [#  40] CRP linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
-  29:     ''' Both getitem and setitem represent the magic methods
-  30:         for the object[index] and object[index] = other operations
-  31:         for linked lists they run in O(n) time making them less
-  32:         efficient than a list() for lookups
-  33:     '''
+  29:     ''''''
+  30:     
+  31:     
+  32:     
+  33:     
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[2.77848 s] survived
   - [#  41] CRP linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index >= self.size or index < 1):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.19516 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf8d390>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
   - [#  42] CRP linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index >= self.size or index < 1):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[6.65957 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee8d5d20>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ee8d7430>

>   ???
E   IndexError

linkedList1:45: IndexError
   - [#  43] CRP linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
-  80:         self.size += 1
+  80:         self.size += 2
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[6.18977 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
>       assert len(singly_linked_list_0) == 1
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:897: AssertionError
   - [#  44] CRP linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
- 120:         self.size += 1
+ 120:         self.size += 2
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[6.13240 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        var_1 = doubly_linked_list_3.append(singly_linked_node_3)
>       assert len(doubly_linked_list_3) == 1
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:366: AssertionError
   - [#  45] CRP linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
- 130:         elif index == self.size - 1:
+ 130:         elif index == self.size - 2:
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[6.66880 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
        var_11 = var_4.insert(singly_linked_node_2, bool_9)
>       assert len(doubly_linked_list_5) == 3
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29023: AssertionError
   - [#  46] CRP linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
- 134:         elif index == 0:
+ 134:         elif index == 1:
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[2.75838 s] survived
   - [#  47] CRP linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
- 151:             for x in range(index - 1):
+ 151:             for x in range(index - 2):
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[2.72642 s] survived
   - [#  48] CRP linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
- 171:         self.size += 1
+ 171:         self.size += 2
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[6.39398 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
        var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)
>       assert len(doubly_linked_list_1) == 1
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:9710: AssertionError
   - [#  49] CRP linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
- 180: if __name__ == '__main__':
+ 180: if __name__ == 'mutpy':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
[2.76370 s] survived
   - [#  50] CRP linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
- 180: if __name__ == '__main__':
+ 180: if __name__ == '':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
[2.71571 s] survived
   - [#  51] CRP linkedList1: 
--------------------------------------------------------------------------------
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
- 182:     test.append(2)
+ 182:     test.append(3)
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
--------------------------------------------------------------------------------
[2.76160 s] survived
   - [#  52] CRP linkedList1: 
--------------------------------------------------------------------------------
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
- 183:     test.append(3)
+ 183:     test.append(4)
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
--------------------------------------------------------------------------------
[2.75079 s] survived
   - [#  53] CRP linkedList1: 
--------------------------------------------------------------------------------
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
- 184:     test.append(4)
+ 184:     test.append(5)
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
--------------------------------------------------------------------------------
[2.71068 s] survived
   - [#  54] CRP linkedList1: 
--------------------------------------------------------------------------------
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
- 186:     print(test[0])
+ 186:     print(test[1])
  187:     print(test[1])
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.78776 s] survived
   - [#  55] CRP linkedList1: 
--------------------------------------------------------------------------------
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
- 187:     print(test[1])
+ 187:     print(test[2])
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.72198 s] survived
   - [#  56] CRP linkedList1: 
--------------------------------------------------------------------------------
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
- 188:     print(test[2])
+ 188:     print(test[3])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.68155 s] survived
   - [#  57] CRP linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
- 189:     print(test[-1])
+ 189:     print(test[-2])
--------------------------------------------------------------------------------
[2.71609 s] survived
   - [#  58] IOD linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
-  90:     def __init__(self):
-  91:         
-  92:         super(DoublyLinkedList, self).__init__()
+  90:     pass
+  91:     
+  92:     
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[2.74817 s] survived
   - [#  59] IOD linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
- 102:     def append(self, data):
- 103:         ''' Note: The average time for append is O(n)
- 104:             however, insertion is O(1), giving it an
- 105:             advantage over arrays.
- 106:         '''
- 107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
- 110:         else:
- 111:             node = self.head
- 112:             
- 113:             while node.next is not None:
- 114:                 node = node.next
- 115:             
- 116:             
- 117:             new_node = DoublyLinkedNode(data)
- 118:             node.next = new_node
- 119:             new_node.prev = node
- 120:         self.size += 1
+ 102:     pass
+ 103:     
+ 104:     
+ 105:     
+ 106:     
+ 107:     
+ 108:     
+ 109:     
+ 110:     
+ 111:     
+ 112:     
+ 113:     
+ 114:     
+ 115:     
+ 116:     
+ 117:     
+ 118:     
+ 119:     
+ 120:     
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[7.43403 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1206

def test_case_1206():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        bool_1 = False
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_1.previous()

RANDOM/test_linkedList1_RANDOM.py:67708: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee8e7730>

>   ???
E   AttributeError: 'SinglyLinkedNode' object has no attribute 'prev'

linkedList1:95: AttributeError
   - [#  60] IOD linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
- 175:     def __init__(self, data):
- 176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
+ 175:     pass
+ 176: 
+ 177: 
+ 178: 
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[6.22528 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_4

def test_case_4():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
>       assert doubly_linked_node_0.prev is None
E       AttributeError: 'DoublyLinkedNode' object has no attribute 'prev'

RANDOM/test_linkedList1_RANDOM.py:57: AttributeError
   - [#  61] IOP linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
+ 177:         self.prev = None
+ 178:         super(DoublyLinkedNode, self).__init__(data)
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[2.79002 s] survived
   - [#  62] LCR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index >= self.size and index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.65794 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1182

def test_case_1182():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        with pytest.raises(IndexError):
>           singly_linked_list_0.__getitem__(bool_0)

RANDOM/test_linkedList1_RANDOM.py:67103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0e9fc2500>, index = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:40: AttributeError
   - [#  63] LCR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index >= self.size and index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[7.53482 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1213

def test_case_1213():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        none_type_0 = None
        with pytest.raises(IndexError):
>           doubly_linked_list_1.__setitem__(bool_1, none_type_0)

RANDOM/test_linkedList1_RANDOM.py:67994: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee8e5a50>, index = True
value = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:49: AttributeError
   - [#  64] OIL linkedList1: 
--------------------------------------------------------------------------------
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
-  27:         return False
-  28:     
+  27:                 break
+  28:         return False
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[2.77609 s] survived
   - [#  65] OIL linkedList1: 
--------------------------------------------------------------------------------
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
   40:                 cur = cur.next
-  41:             return cur.data
+  41:                 breakreturn cur.data
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
--------------------------------------------------------------------------------
[2.79737 s] survived
   - [#  66] OIL linkedList1: 
--------------------------------------------------------------------------------
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
   49:                 cur = cur.next
-  50:             cur.data = value
+  50:                 breakcur.data = value
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
--------------------------------------------------------------------------------
[2.90145 s] survived
   - [#  67] OIL linkedList1: 
--------------------------------------------------------------------------------
   69:             node = self.head
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
-  73:             
+  73:                 break
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
   77:             
--------------------------------------------------------------------------------
[2.90274 s] survived
   - [#  68] OIL linkedList1: 
--------------------------------------------------------------------------------
  111:             node = self.head
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
- 115:             
+ 115:                 break
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
--------------------------------------------------------------------------------
[2.74279 s] survived
   - [#  69] OIL linkedList1: 
--------------------------------------------------------------------------------
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
  152:                 a = a.next
- 153:             
+ 153:                 break
  154:             
  155:             
  156:             b = a.next
  157:             c = DoublyLinkedNode(data)
--------------------------------------------------------------------------------
[2.89194 s] survived
   - [#  70] RIL linkedList1: 
--------------------------------------------------------------------------------
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
-  39:             for x in range(index):
+  39:             for x in reversed(range(index)):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
--------------------------------------------------------------------------------
[2.87202 s] survived
   - [#  71] RIL linkedList1: 
--------------------------------------------------------------------------------
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
-  48:             for x in range(index):
+  48:             for x in reversed(range(index)):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
--------------------------------------------------------------------------------
[2.87832 s] survived
   - [#  72] RIL linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
- 151:             for x in range(index - 1):
+ 151:             for x in reversed(range(index - 1)):
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[2.92044 s] survived
   - [#  73] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index <= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.53560 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed57e860>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
   - [#  74] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index > self.size or index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.82716 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1232

def test_case_1232():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_4 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_2 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        with pytest.raises(IndexError):
>           singly_linked_list_0.__getitem__(bool_4)

RANDOM/test_linkedList1_RANDOM.py:68494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ef012e90>, index = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:41: AttributeError
   - [#  75] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index >= self.size or index > 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.88647 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1453

def test_case_1453():
        int_0 = -1743
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__getitem__(int_0)

RANDOM/test_linkedList1_RANDOM.py:79487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec1e8490>, index = -1743

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:41: AttributeError
   - [#  76] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index >= self.size or index <= 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.33687 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf80a90>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
   - [#  77] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index <= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[6.79861 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf80f40>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ebf83f70>

>   ???
E   IndexError

linkedList1:45: IndexError
   - [#  78] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index > self.size or index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[7.62104 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1222

def test_case_1222():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_1.__len__()
        assert var_0 == 0
        int_0 = -704
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__setitem__(var_0, int_0)

RANDOM/test_linkedList1_RANDOM.py:68259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee8d6590>, index = 0
value = -704

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:50: AttributeError
   - [#  79] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index >= self.size or index > 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[2.87981 s] survived
   - [#  80] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index >= self.size or index <= 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[7.09999 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee6c2ec0>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ec1c1330>

>   ???
E   IndexError

linkedList1:45: IndexError
   - [#  81] ROR linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
- 123:         if index >= self.size:
+ 123:         if index <= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[6.65055 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec10f820>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec10f5e0>, index = -2582.0

>   ???
E   IndexError

linkedList1:124: IndexError
   - [#  82] ROR linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
- 123:         if index >= self.size:
+ 123:         if index > self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[7.80736 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1267

def test_case_1267():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_3)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_1 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_4)
        assert len(singly_linked_node_11.data) == 0
        bool_6 = False
>       with pytest.raises(IndexError):
E       Failed: DID NOT RAISE <class 'IndexError'>

RANDOM/test_linkedList1_RANDOM.py:70188: Failed
   - [#  83] ROR linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
- 130:         elif index == self.size - 1:
+ 130:         elif index != self.size - 1:
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[7.39127 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
        var_11 = var_4.insert(singly_linked_node_2, bool_9)
>       assert len(doubly_linked_list_5) == 3
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29023: AssertionError
   - [#  84] ROR linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
- 134:         elif index == 0:
+ 134:         elif index != 0:
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[2.80351 s] survived
   - [#  85] ROR linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
- 180: if __name__ == '__main__':
+ 180: if __name__ != '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
2
3
4
[0.00000 s] incompetent

IndexError

   - [#  86] SCD linkedList1: 
--------------------------------------------------------------------------------
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
-  92:         super(DoublyLinkedList, self).__init__()
+  92:         pass
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[6.57081 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_linkedList1_RANDOM.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebd74550>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
   - [#  87] SCD linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
+ 177:         pass
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
--------------------------------------------------------------------------------
[6.67187 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_4

def test_case_4():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
>       assert doubly_linked_node_0.data is True
E       AttributeError: 'DoublyLinkedNode' object has no attribute 'data'

RANDOM/test_linkedList1_RANDOM.py:55: AttributeError
   - [#  88] SCI linkedList1: 
--------------------------------------------------------------------------------
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
- 103:         ''' Note: The average time for append is O(n)
- 104:             however, insertion is O(1), giving it an
- 105:             advantage over arrays.
- 106:         '''
- 107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
- 110:         else:
- 111:             node = self.head
- 112:             
- 113:             while node.next is not None:
- 114:                 node = node.next
- 115:             
+ 103:         super().append(data)
+ 104:         ''' Note: The average time for append is O(n)
+ 105:             however, insertion is O(1), giving it an
+ 106:             advantage over arrays.
+ 107:         '''
+ 108:         if self.head is None:
+ 109:             self.head = DoublyLinkedNode(data)
+ 110:             self.cursor = self.head
+ 111:         else:
+ 112:             node = self.head
+ 113:             
+ 114:             while node.next is not None:
+ 115:                 node = node.next
  116:             
- 117:             new_node = DoublyLinkedNode(data)
- 118:             node.next = new_node
- 119:             new_node.prev = node
- 120:         self.size += 1
- 121:     
+ 117:             
+ 118:             new_node = DoublyLinkedNode(data)
+ 119:             node.next = new_node
+ 120:             new_node.prev = node
+ 121:         self.size += 1
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[6.50801 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        var_1 = doubly_linked_list_3.append(singly_linked_node_3)
>       assert len(doubly_linked_list_3) == 1
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:366: AssertionError
   - [#  89] SDI linkedList1: 
--------------------------------------------------------------------------------
    5: 
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
-   9:     def __init__(self):
-  10:         self.head = None
-  11:         self.size = 0
-  12:         self.cursor = None
-  13:     
+   9:     @staticmethod
+  10:     def __init__(self):
+  11:         self.head = None
+  12:         self.size = 0
+  13:         self.cursor = None
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
--------------------------------------------------------------------------------
[6.74469 s] incompetent

TypeError: linkedList1:92: TypeError: SinglyLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  90] SDI linkedList1: 
--------------------------------------------------------------------------------
   10:         self.head = None
   11:         self.size = 0
   12:         self.cursor = None
   13:     
-  14:     def __len__(self):
-  15:         return self.size
-  16:     
+  14:     @staticmethod
+  15:     def __len__(self):
+  16:         return self.size
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
--------------------------------------------------------------------------------
[6.61247 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:29: TypeError: SinglyLinkedList.__len__() missing 1 required positional argument: 'self'

   - [#  91] SDI linkedList1: 
--------------------------------------------------------------------------------
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
-  17:     def __iter__(self):
-  18:         return self
-  19:     
+  17:     @staticmethod
+  18:     def __iter__(self):
+  19:         return self
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
--------------------------------------------------------------------------------
[6.71970 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:167: TypeError: SinglyLinkedList.__iter__() missing 1 required positional argument: 'self'

   - [#  92] SDI linkedList1: 
--------------------------------------------------------------------------------
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
-  20:     def __contains__(self, item):
-  21:         if self.head is not None:
-  22:             cur = self.head
-  23:             while cur is not None:
-  24:                 if cur.data is item:
-  25:                     return True
-  26:                 cur = cur.next
-  27:         return False
-  28:     
+  20:     @staticmethod
+  21:     def __contains__(self, item):
+  22:         if self.head is not None:
+  23:             cur = self.head
+  24:             while cur is not None:
+  25:                 if cur.data is item:
+  26:                     return True
+  27:                 cur = cur.next
+  28:         return False
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[6.80544 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:317: TypeError: SinglyLinkedList.__contains__() missing 1 required positional argument: 'item'

   - [#  93] SDI linkedList1: 
--------------------------------------------------------------------------------
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
-  34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
-  36:             raise IndexError()
-  37:         else:
-  38:             cur = self.head
-  39:             for x in range(index):
-  40:                 cur = cur.next
-  41:             return cur.data
-  42:     
+  34:     @staticmethod
+  35:     def __getitem__(self, index):
+  36:         if (index >= self.size or index < 0):
+  37:             raise IndexError()
+  38:         else:
+  39:             cur = self.head
+  40:             for x in range(index):
+  41:                 cur = cur.next
+  42:             return cur.data
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
--------------------------------------------------------------------------------
[7.44541 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:49748: TypeError: SinglyLinkedList.__getitem__() missing 1 required positional argument: 'index'

   - [#  94] SDI linkedList1: 
--------------------------------------------------------------------------------
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
-  43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
-  45:             raise IndexError()
-  46:         else:
-  47:             cur = self.head
-  48:             for x in range(index):
-  49:                 cur = cur.next
-  50:             cur.data = value
-  51:     
+  43:     @staticmethod
+  44:     def __setitem__(self, index, value):
+  45:         if (index >= self.size or index < 0):
+  46:             raise IndexError()
+  47:         else:
+  48:             cur = self.head
+  49:             for x in range(index):
+  50:                 cur = cur.next
+  51:             cur.data = value
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
--------------------------------------------------------------------------------
[6.67207 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:23477: TypeError: SinglyLinkedList.__setitem__() missing 1 required positional argument: 'value'

   - [#  95] SDI linkedList1: 
--------------------------------------------------------------------------------
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
-  52:     def next(self):
-  53:         if self.cursor is None:
-  54:             raise StopIteration()
-  55:         else:
-  56:             node = self.cursor.data
-  57:             self.cursor = self.cursor.next
-  58:             return node
-  59:     
+  52:     @staticmethod
+  53:     def next(self):
+  54:         if self.cursor is None:
+  55:             raise StopIteration()
+  56:         else:
+  57:             node = self.cursor.data
+  58:             self.cursor = self.cursor.next
+  59:             return node
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
--------------------------------------------------------------------------------
[6.34497 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:3497: TypeError: SinglyLinkedList.next() missing 1 required positional argument: 'self'

   - [#  96] SDI linkedList1: 
--------------------------------------------------------------------------------
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
-  60:     def append(self, data):
-  61:         ''' Note: The average time for append is O(n)
-  62:             however, insertion is O(1), giving it an
-  63:             advantage over arrays.
-  64:         '''
-  65:         if self.head is None:
-  66:             self.head = SinglyLinkedNode(data)
-  67:             self.cursor = self.head
-  68:         else:
-  69:             node = self.head
-  70:             
-  71:             while node.next is not None:
-  72:                 node = node.next
-  73:             
+  60:     @staticmethod
+  61:     def append(self, data):
+  62:         ''' Note: The average time for append is O(n)
+  63:             however, insertion is O(1), giving it an
+  64:             advantage over arrays.
+  65:         '''
+  66:         if self.head is None:
+  67:             self.head = SinglyLinkedNode(data)
+  68:             self.cursor = self.head
+  69:         else:
+  70:             node = self.head
+  71:             
+  72:             while node.next is not None:
+  73:                 node = node.next
   74:             
-  75:             new_node = SinglyLinkedNode(data)
-  76:             
+  75:             
+  76:             new_node = SinglyLinkedNode(data)
   77:             
-  78:             node.next = new_node
-  79:         
-  80:         self.size += 1
-  81: 
+  78:             
+  79:             node.next = new_node
+  80:         
+  81:         self.size += 1
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
--------------------------------------------------------------------------------
[6.34838 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:896: TypeError: SinglyLinkedList.append() missing 1 required positional argument: 'data'

   - [#  97] SDI linkedList1: 
--------------------------------------------------------------------------------
   80:         self.size += 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
-  84:     def __init__(self, data):
-  85:         self.data = data
-  86:         self.next = None
-  87: 
+  84:     @staticmethod
+  85:     def __init__(self, data):
+  86:         self.data = data
+  87:         self.next = None
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
--------------------------------------------------------------------------------
[6.11287 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:8: TypeError: SinglyLinkedNode.__init__() missing 1 required positional argument: 'data'

   - [#  98] SDI linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
-  90:     def __init__(self):
-  91:         
-  92:         super(DoublyLinkedList, self).__init__()
-  93:     
+  90:     @staticmethod
+  91:     def __init__(self):
+  92:         
+  93:         super(DoublyLinkedList, self).__init__()
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
--------------------------------------------------------------------------------
[6.28191 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:28: TypeError: DoublyLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  99] SDI linkedList1: 
--------------------------------------------------------------------------------
   90:     def __init__(self):
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
-  94:     def previous(self):
-  95:         if self.cursor.prev is None:
-  96:             raise StopIteration()
-  97:         else:
-  98:             self.cursor.prev
-  99:             self.cursor = self.cursor.prev
- 100:             return self.cursor.data
- 101:     
+  94:     @staticmethod
+  95:     def previous(self):
+  96:         if self.cursor.prev is None:
+  97:             raise StopIteration()
+  98:         else:
+  99:             self.cursor.prev
+ 100:             self.cursor = self.cursor.prev
+ 101:             return self.cursor.data
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
--------------------------------------------------------------------------------
[7.68984 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:67708: TypeError: DoublyLinkedList.previous() missing 1 required positional argument: 'self'

   - [# 100] SDI linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
- 102:     def append(self, data):
- 103:         ''' Note: The average time for append is O(n)
- 104:             however, insertion is O(1), giving it an
- 105:             advantage over arrays.
- 106:         '''
- 107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
- 110:         else:
- 111:             node = self.head
- 112:             
- 113:             while node.next is not None:
- 114:                 node = node.next
- 115:             
+ 102:     @staticmethod
+ 103:     def append(self, data):
+ 104:         ''' Note: The average time for append is O(n)
+ 105:             however, insertion is O(1), giving it an
+ 106:             advantage over arrays.
+ 107:         '''
+ 108:         if self.head is None:
+ 109:             self.head = DoublyLinkedNode(data)
+ 110:             self.cursor = self.head
+ 111:         else:
+ 112:             node = self.head
+ 113:             
+ 114:             while node.next is not None:
+ 115:                 node = node.next
  116:             
- 117:             new_node = DoublyLinkedNode(data)
- 118:             node.next = new_node
- 119:             new_node.prev = node
- 120:         self.size += 1
- 121:     
+ 117:             
+ 118:             new_node = DoublyLinkedNode(data)
+ 119:             node.next = new_node
+ 120:             new_node.prev = node
+ 121:         self.size += 1
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[6.41842 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:365: TypeError: DoublyLinkedList.append() missing 1 required positional argument: 'data'

   - [# 101] SDI linkedList1: 
--------------------------------------------------------------------------------
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
- 122:     def insert(self, data, index):
- 123:         if index >= self.size:
- 124:             raise IndexError()
- 125:         if self.head is None:
- 126:             self.head = DoublyLinkedNode(data)
- 127:             self.cursor = self.head
- 128:         
+ 122:     @staticmethod
+ 123:     def insert(self, data, index):
+ 124:         if index >= self.size:
+ 125:             raise IndexError()
+ 126:         if self.head is None:
+ 127:             self.head = DoublyLinkedNode(data)
+ 128:             self.cursor = self.head
  129:         
- 130:         elif index == self.size - 1:
- 131:             
- 132:             self.append(data)
- 133:         
- 134:         elif index == 0:
- 135:             
+ 130:         
+ 131:         elif index == self.size - 1:
+ 132:             
+ 133:             self.append(data)
+ 134:         
+ 135:         elif index == 0:
  136:             
  137:             
- 138:             a = self.head
- 139:             c = DoublyLinkedNode(data)
- 140:             
+ 138:             
+ 139:             a = self.head
+ 140:             c = DoublyLinkedNode(data)
  141:             
  142:             
  143:             
- 144:             self.head = c
- 145:             c.next = a
- 146:             a.prev = c
- 147:             self.cursor = self.head
- 148:         else:
- 149:             
- 150:             a = self.head
- 151:             for x in range(index - 1):
- 152:                 a = a.next
- 153:             
+ 144:             
+ 145:             self.head = c
+ 146:             c.next = a
+ 147:             a.prev = c
+ 148:             self.cursor = self.head
+ 149:         else:
+ 150:             
+ 151:             a = self.head
+ 152:             for x in range(index - 1):
+ 153:                 a = a.next
  154:             
  155:             
- 156:             b = a.next
- 157:             c = DoublyLinkedNode(data)
- 158:             
+ 156:             
+ 157:             b = a.next
+ 158:             c = DoublyLinkedNode(data)
  159:             
  160:             
  161:             
- 162:             b.prev = c
- 163:             c.next = b
- 164:             
+ 162:             
+ 163:             b.prev = c
+ 164:             c.next = b
  165:             
  166:             
  167:             
- 168:             a.next = c
- 169:             c.prev = a
- 170:         
- 171:         self.size += 1
- 172: 
+ 168:             
+ 169:             a.next = c
+ 170:             c.prev = a
+ 171:         
+ 172:         self.size += 1
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
--------------------------------------------------------------------------------
[6.73398 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:9709: TypeError: DoublyLinkedList.insert() missing 1 required positional argument: 'index'

   - [# 102] SDI linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
- 175:     def __init__(self, data):
- 176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
- 179: 
+ 175:     @staticmethod
+ 176:     def __init__(self, data):
+ 177:         
+ 178:         super(DoublyLinkedNode, self).__init__(data)
+ 179:         self.prev = None
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
--------------------------------------------------------------------------------
[6.36524 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:54: TypeError: DoublyLinkedNode.__init__() missing 1 required positional argument: 'data'

   - [# 103] SDL linkedList1: 
--------------------------------------------------------------------------------
    3:     thomas moll 2015
    4: '''
    5: 
    6: class SinglyLinkedList(object):
-   7:     __next__ = next
+   7:     pass
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
--------------------------------------------------------------------------------
[2.75684 s] survived
   - [# 104] SDL linkedList1: 
--------------------------------------------------------------------------------
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
    9:     def __init__(self):
-  10:         self.head = None
+  10:         pass
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
--------------------------------------------------------------------------------
[6.53312 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_15

def test_case_15():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_0.__contains__(singly_linked_node_0)

RANDOM/test_linkedList1_RANDOM.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc2290>
item = <linkedList1.SinglyLinkedNode object at 0x7fd0e9fc2fe0>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'head'

linkedList1:21: AttributeError
   - [# 105] SDL linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
-  11:         self.size = 0
+  11:         pass
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[6.98805 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_linkedList1_RANDOM.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec9e5ed0>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
   - [# 106] SDL linkedList1: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
-  12:         self.cursor = None
+  12:         pass
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
--------------------------------------------------------------------------------
[7.79907 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1183

def test_case_1183():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.next()

RANDOM/test_linkedList1_RANDOM.py:67123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ede14d90>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'cursor'

linkedList1:53: AttributeError
   - [# 107] SDL linkedList1: 
--------------------------------------------------------------------------------
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
-  15:         return self.size
+  15:         pass
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
--------------------------------------------------------------------------------
[6.57174 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:29: TypeError: 'NoneType' object cannot be interpreted as an integer

   - [# 108] SDL linkedList1: 
--------------------------------------------------------------------------------
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
-  18:         return self
+  18:         pass
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
--------------------------------------------------------------------------------
[6.54224 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList1/RANDOM/test_linkedList1_RANDOM.py:168: TypeError: object of type 'NoneType' has no len()

   - [# 109] SDL linkedList1: 
--------------------------------------------------------------------------------
   18:         return self
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
-  22:             cur = self.head
+  22:             pass
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
--------------------------------------------------------------------------------
[6.74815 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_116

def test_case_116():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        var_2 = doubly_linked_list_2.__iter__()
        assert len(var_2) == 0
        none_type_0 = None
        singly_linked_node_5 = module_0.SinglyLinkedNode(none_type_0)
>       var_3 = doubly_linked_list_0.__contains__(var_0)

RANDOM/test_linkedList1_RANDOM.py:4476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec1c26e0>, item = None

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:23: UnboundLocalError
   - [# 110] SDL linkedList1: 
--------------------------------------------------------------------------------
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
-  25:                     return True
+  25:                     pass
   26:                 cur = cur.next
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
--------------------------------------------------------------------------------
[6.68531 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_257

def test_case_257():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_0 = doubly_linked_list_4.__contains__(singly_linked_node_7)
        assert var_0 is False
        var_1 = doubly_linked_list_5.__iter__()
        assert len(var_1) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_2 = doubly_linked_list_7.__iter__()
        assert len(var_2) == 0
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        none_type_0 = None
        var_3 = doubly_linked_list_8.append(none_type_0)
        assert len(doubly_linked_list_8) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_4 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_6)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_5 = doubly_linked_list_10.append(doubly_linked_list_10)
        assert len(doubly_linked_list_10) == 1
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(var_5)
        assert doubly_linked_node_2.data is None
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        bool_8 = True
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        var_6 = doubly_linked_list_11.__contains__(singly_linked_node_16)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_3.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        var_7 = singly_linked_list_0.__contains__(var_3)
>       assert var_7 is True
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:11683: AssertionError
   - [# 111] SDL linkedList1: 
--------------------------------------------------------------------------------
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
-  26:                 cur = cur.next
+  26:                 pass
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
--------------------------------------------------------------------------------
[14.70631 s] timeout
   - [# 112] SDL linkedList1: 
--------------------------------------------------------------------------------
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
-  27:         return False
+  27:         pass
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
--------------------------------------------------------------------------------
[6.64927 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_15

def test_case_15():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = doubly_linked_list_0.__contains__(singly_linked_node_0)
>       assert var_0 is False
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:318: AssertionError
   - [# 113] SDL linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
-  29:     ''' Both getitem and setitem represent the magic methods
-  30:         for the object[index] and object[index] = other operations
-  31:         for linked lists they run in O(n) time making them less
-  32:         efficient than a list() for lookups
-  33:     '''
+  29:     pass
+  30:     
+  31:     
+  32:     
+  33:     
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[2.95846 s] survived
   - [# 114] SDL linkedList1: 
--------------------------------------------------------------------------------
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
-  38:             cur = self.head
+  38:             pass
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
--------------------------------------------------------------------------------
[7.45353 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec0769b0>, index = False

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:41: UnboundLocalError
   - [# 115] SDL linkedList1: 
--------------------------------------------------------------------------------
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
-  40:                 cur = cur.next
+  40:                 pass
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
--------------------------------------------------------------------------------
[2.93641 s] survived
   - [# 116] SDL linkedList1: 
--------------------------------------------------------------------------------
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
   40:                 cur = cur.next
-  41:             return cur.data
+  41:             pass
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
--------------------------------------------------------------------------------
[7.60933 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        var_5 = doubly_linked_list_1.__getitem__(var_1)
>       assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList1.DoublyLinkedList'
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:49749: AssertionError
   - [# 117] SDL linkedList1: 
--------------------------------------------------------------------------------
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
-  47:             cur = self.head
+  47:             pass
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
--------------------------------------------------------------------------------
[6.85200 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc26b0>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ee73f610>

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:50: UnboundLocalError
   - [# 118] SDL linkedList1: 
--------------------------------------------------------------------------------
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
-  49:                 cur = cur.next
+  49:                 pass
   50:             cur.data = value
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
--------------------------------------------------------------------------------
[2.83657 s] survived
   - [# 119] SDL linkedList1: 
--------------------------------------------------------------------------------
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
   49:                 cur = cur.next
-  50:             cur.data = value
+  50:             pass
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
--------------------------------------------------------------------------------
[2.86587 s] survived
   - [# 120] SDL linkedList1: 
--------------------------------------------------------------------------------
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
-  56:             node = self.cursor.data
+  56:             pass
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
--------------------------------------------------------------------------------
[6.42378 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec786fe0>

>   ???
E   NameError: name 'node' is not defined

linkedList1:58: NameError
   - [# 121] SDL linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
-  57:             self.cursor = self.cursor.next
+  57:             pass
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[2.73127 s] survived
   - [# 122] SDL linkedList1: 
--------------------------------------------------------------------------------
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
-  58:             return node
+  58:             pass
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[6.47261 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        var_4 = doubly_linked_list_4.next()
>       assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList1.DoublyLinkedList'
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:3498: AssertionError
   - [# 123] SDL linkedList1: 
--------------------------------------------------------------------------------
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
-  66:             self.head = SinglyLinkedNode(data)
+  66:             pass
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
--------------------------------------------------------------------------------
[6.47271 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_257

def test_case_257():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_0 = doubly_linked_list_4.__contains__(singly_linked_node_7)
        assert var_0 is False
        var_1 = doubly_linked_list_5.__iter__()
        assert len(var_1) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_2 = doubly_linked_list_7.__iter__()
        assert len(var_2) == 0
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        none_type_0 = None
        var_3 = doubly_linked_list_8.append(none_type_0)
        assert len(doubly_linked_list_8) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_4 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_6)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_5 = doubly_linked_list_10.append(doubly_linked_list_10)
        assert len(doubly_linked_list_10) == 1
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(var_5)
        assert doubly_linked_node_2.data is None
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        bool_8 = True
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        var_6 = doubly_linked_list_11.__contains__(singly_linked_node_16)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_3.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        var_7 = singly_linked_list_0.__contains__(var_3)
>       assert var_7 is True
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:11683: AssertionError
   - [# 124] SDL linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
-  67:             self.cursor = self.head
+  67:             pass
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[6.40685 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_277

def test_case_277():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_0 = module_0.SinglyLinkedNode(doubly_linked_list_0)
        assert len(singly_linked_node_0.data) == 0
        bool_0 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_2)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_4)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_0 = doubly_linked_list_5.append(doubly_linked_list_5)
        assert len(doubly_linked_list_5) == 1
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_8)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_1 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_3.data is True
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_4.data is None
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_node_5 = module_0.DoublyLinkedNode(singly_linked_node_16)
        assert f'{type(doubly_linked_node_5.data).__module__}.{type(doubly_linked_node_5.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_5.next is None
        assert doubly_linked_node_5.prev is None
        var_2 = doubly_linked_list_8.__len__()
        assert var_2 == 0
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_3 = doubly_linked_list_9.__contains__(singly_linked_node_18)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_6 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_6.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_6.next is None
        assert doubly_linked_node_6.prev is None
        doubly_linked_node_7 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_7.data).__module__}.{type(doubly_linked_node_7.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_7.next is None
        assert doubly_linked_node_7.prev is None
>       var_4 = singly_linked_list_0.next()

RANDOM/test_linkedList1_RANDOM.py:13068: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ef012e90>

>   ???
E   StopIteration

linkedList1:54: StopIteration
   - [# 125] SDL linkedList1: 
--------------------------------------------------------------------------------
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
-  69:             node = self.head
+  69:             pass
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
--------------------------------------------------------------------------------
[6.48926 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_41

def test_case_41():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_0)
        assert var_0 is False
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_2 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_6 = False
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
>       var_3 = singly_linked_list_0.append(singly_linked_node_13)

RANDOM/test_linkedList1_RANDOM.py:1245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ec118970>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec11b160>

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

linkedList1:71: UnboundLocalError
   - [# 126] SDL linkedList1: 
--------------------------------------------------------------------------------
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
-  72:                 node = node.next
+  72:                 pass
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
--------------------------------------------------------------------------------
[2.79640 s] survived
   - [# 127] SDL linkedList1: 
--------------------------------------------------------------------------------
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
   74:             
-  75:             new_node = SinglyLinkedNode(data)
+  75:             pass
   76:             
   77:             
   78:             node.next = new_node
   79:         
--------------------------------------------------------------------------------
[6.35346 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_41

def test_case_41():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_0)
        assert var_0 is False
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_2 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_6 = False
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
>       var_3 = singly_linked_list_0.append(singly_linked_node_13)

RANDOM/test_linkedList1_RANDOM.py:1245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ec074040>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec077d30>

>   ???
E   NameError: name 'new_node' is not defined

linkedList1:78: NameError
   - [# 128] SDL linkedList1: 
--------------------------------------------------------------------------------
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
   77:             
-  78:             node.next = new_node
+  78:             pass
   79:         
   80:         self.size += 1
   81: 
   82: 
--------------------------------------------------------------------------------
[2.84592 s] survived
   - [# 129] SDL linkedList1: 
--------------------------------------------------------------------------------
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
-  85:         self.data = data
+  85:         pass
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
--------------------------------------------------------------------------------
[6.21534 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_0

def test_case_0():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
>       assert singly_linked_node_0.data is True
E       AttributeError: 'SinglyLinkedNode' object has no attribute 'data'

RANDOM/test_linkedList1_RANDOM.py:10: AttributeError
   - [# 130] SDL linkedList1: 
--------------------------------------------------------------------------------
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
-  86:         self.next = None
+  86:         pass
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
--------------------------------------------------------------------------------
[6.13459 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_0

def test_case_0():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
>       assert singly_linked_node_0.next is None
E       AttributeError: 'SinglyLinkedNode' object has no attribute 'next'

RANDOM/test_linkedList1_RANDOM.py:11: AttributeError
   - [# 131] SDL linkedList1: 
--------------------------------------------------------------------------------
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
-  92:         super(DoublyLinkedList, self).__init__()
+  92:         pass
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[6.46269 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_linkedList1_RANDOM.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ede167d0>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
   - [# 132] SDL linkedList1: 
--------------------------------------------------------------------------------
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
-  98:             self.cursor.prev
+  98:             pass
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
--------------------------------------------------------------------------------
[2.78315 s] survived
   - [# 133] SDL linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
-  99:             self.cursor = self.cursor.prev
+  99:             pass
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[2.91096 s] survived
   - [# 134] SDL linkedList1: 
--------------------------------------------------------------------------------
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
- 100:             return self.cursor.data
+ 100:             pass
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[2.90856 s] survived
   - [# 135] SDL linkedList1: 
--------------------------------------------------------------------------------
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
+ 108:             pass
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
--------------------------------------------------------------------------------
[6.45511 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee6c37f0>

>   ???
E   StopIteration

linkedList1:54: StopIteration
   - [# 136] SDL linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
+ 109:             pass
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[6.60564 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec1834c0>

>   ???
E   StopIteration

linkedList1:54: StopIteration
   - [# 137] SDL linkedList1: 
--------------------------------------------------------------------------------
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
- 111:             node = self.head
+ 111:             pass
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
--------------------------------------------------------------------------------
[6.74135 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_64

def test_case_64():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_2)
        assert var_1 is False
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
>       var_4 = doubly_linked_list_3.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:2252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee8d5de0>, data = None

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

linkedList1:113: UnboundLocalError
   - [# 138] SDL linkedList1: 
--------------------------------------------------------------------------------
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
- 114:                 node = node.next
+ 114:                 pass
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
--------------------------------------------------------------------------------
[3.02176 s] survived
   - [# 139] SDL linkedList1: 
--------------------------------------------------------------------------------
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
  116:             
- 117:             new_node = DoublyLinkedNode(data)
+ 117:             pass
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
--------------------------------------------------------------------------------
[6.96773 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_64

def test_case_64():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_2)
        assert var_1 is False
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
>       var_4 = doubly_linked_list_3.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:2252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee752fe0>, data = None

>   ???
E   NameError: name 'new_node' is not defined

linkedList1:118: NameError
   - [# 140] SDL linkedList1: 
--------------------------------------------------------------------------------
  114:                 node = node.next
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
- 118:             node.next = new_node
+ 118:             pass
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
--------------------------------------------------------------------------------
[3.00263 s] survived
   - [# 141] SDL linkedList1: 
--------------------------------------------------------------------------------
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
- 119:             new_node.prev = node
+ 119:             pass
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
--------------------------------------------------------------------------------
[2.95864 s] survived
   - [# 142] SDL linkedList1: 
--------------------------------------------------------------------------------
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
- 126:             self.head = DoublyLinkedNode(data)
+ 126:             pass
  127:             self.cursor = self.head
  128:         
  129:         
  130:         elif index == self.size - 1:
--------------------------------------------------------------------------------
[3.05818 s] survived
   - [# 143] SDL linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
- 127:             self.cursor = self.head
+ 127:             pass
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[2.95445 s] survived
   - [# 144] SDL linkedList1: 
--------------------------------------------------------------------------------
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
- 132:             self.append(data)
+ 132:             pass
  133:         
  134:         elif index == 0:
  135:             
  136:             
--------------------------------------------------------------------------------
[7.11453 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
        var_11 = var_4.insert(singly_linked_node_2, bool_9)
>       assert len(doubly_linked_list_5) == 3
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:29023: AssertionError
   - [# 145] SDL linkedList1: 
--------------------------------------------------------------------------------
  134:         elif index == 0:
  135:             
  136:             
  137:             
- 138:             a = self.head
+ 138:             pass
  139:             c = DoublyLinkedNode(data)
  140:             
  141:             
  142:             
--------------------------------------------------------------------------------
[2.84422 s] survived
   - [# 146] SDL linkedList1: 
--------------------------------------------------------------------------------
  135:             
  136:             
  137:             
  138:             a = self.head
- 139:             c = DoublyLinkedNode(data)
+ 139:             pass
  140:             
  141:             
  142:             
  143:             
--------------------------------------------------------------------------------
[2.90614 s] survived
   - [# 147] SDL linkedList1: 
--------------------------------------------------------------------------------
  140:             
  141:             
  142:             
  143:             
- 144:             self.head = c
+ 144:             pass
  145:             c.next = a
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
--------------------------------------------------------------------------------
[2.95727 s] survived
   - [# 148] SDL linkedList1: 
--------------------------------------------------------------------------------
  141:             
  142:             
  143:             
  144:             self.head = c
- 145:             c.next = a
+ 145:             pass
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
--------------------------------------------------------------------------------
[2.93871 s] survived
   - [# 149] SDL linkedList1: 
--------------------------------------------------------------------------------
  142:             
  143:             
  144:             self.head = c
  145:             c.next = a
- 146:             a.prev = c
+ 146:             pass
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
--------------------------------------------------------------------------------
[2.83246 s] survived
   - [# 150] SDL linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
- 147:             self.cursor = self.head
+ 147:             pass
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[2.92904 s] survived
   - [# 151] SDL linkedList1: 
--------------------------------------------------------------------------------
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
- 150:             a = self.head
+ 150:             pass
  151:             for x in range(index - 1):
  152:                 a = a.next
  153:             
  154:             
--------------------------------------------------------------------------------
[2.84593 s] survived
   - [# 152] SDL linkedList1: 
--------------------------------------------------------------------------------
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
- 152:                 a = a.next
+ 152:                 pass
  153:             
  154:             
  155:             
  156:             b = a.next
--------------------------------------------------------------------------------
[2.95904 s] survived
   - [# 153] SDL linkedList1: 
--------------------------------------------------------------------------------
  152:                 a = a.next
  153:             
  154:             
  155:             
- 156:             b = a.next
+ 156:             pass
  157:             c = DoublyLinkedNode(data)
  158:             
  159:             
  160:             
--------------------------------------------------------------------------------
[2.99727 s] survived
   - [# 154] SDL linkedList1: 
--------------------------------------------------------------------------------
  153:             
  154:             
  155:             
  156:             b = a.next
- 157:             c = DoublyLinkedNode(data)
+ 157:             pass
  158:             
  159:             
  160:             
  161:             
--------------------------------------------------------------------------------
[3.00099 s] survived
   - [# 155] SDL linkedList1: 
--------------------------------------------------------------------------------
  158:             
  159:             
  160:             
  161:             
- 162:             b.prev = c
+ 162:             pass
  163:             c.next = b
  164:             
  165:             
  166:             
--------------------------------------------------------------------------------
[3.03014 s] survived
   - [# 156] SDL linkedList1: 
--------------------------------------------------------------------------------
  159:             
  160:             
  161:             
  162:             b.prev = c
- 163:             c.next = b
+ 163:             pass
  164:             
  165:             
  166:             
  167:             
--------------------------------------------------------------------------------
[2.80084 s] survived
   - [# 157] SDL linkedList1: 
--------------------------------------------------------------------------------
  164:             
  165:             
  166:             
  167:             
- 168:             a.next = c
+ 168:             pass
  169:             c.prev = a
  170:         
  171:         self.size += 1
  172: 
--------------------------------------------------------------------------------
[2.85384 s] survived
   - [# 158] SDL linkedList1: 
--------------------------------------------------------------------------------
  165:             
  166:             
  167:             
  168:             a.next = c
- 169:             c.prev = a
+ 169:             pass
  170:         
  171:         self.size += 1
  172: 
  173: 
--------------------------------------------------------------------------------
[2.88676 s] survived
   - [# 159] SDL linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
- 177:         super(DoublyLinkedNode, self).__init__(data)
+ 177:         pass
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
--------------------------------------------------------------------------------
[6.45608 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_4

def test_case_4():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
>       assert doubly_linked_node_0.data is True
E       AttributeError: 'DoublyLinkedNode' object has no attribute 'data'

RANDOM/test_linkedList1_RANDOM.py:55: AttributeError
   - [# 160] SDL linkedList1: 
--------------------------------------------------------------------------------
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
+ 178:         pass
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[6.38942 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_4

def test_case_4():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
>       assert doubly_linked_node_0.prev is None
E       AttributeError: 'DoublyLinkedNode' object has no attribute 'prev'

RANDOM/test_linkedList1_RANDOM.py:57: AttributeError
   - [# 161] SDL linkedList1: 
--------------------------------------------------------------------------------
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
- 181:     test = SinglyLinkedList()
+ 181:     pass
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
--------------------------------------------------------------------------------
[2.94272 s] survived
   - [# 162] SDL linkedList1: 
--------------------------------------------------------------------------------
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
- 182:     test.append(2)
+ 182:     pass
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
--------------------------------------------------------------------------------
[2.95967 s] survived
   - [# 163] SDL linkedList1: 
--------------------------------------------------------------------------------
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
- 183:     test.append(3)
+ 183:     pass
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
--------------------------------------------------------------------------------
[2.94057 s] survived
   - [# 164] SDL linkedList1: 
--------------------------------------------------------------------------------
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
- 184:     test.append(4)
+ 184:     pass
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
--------------------------------------------------------------------------------
[2.94633 s] survived
   - [# 165] SDL linkedList1: 
--------------------------------------------------------------------------------
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
- 186:     print(test[0])
+ 186:     pass
  187:     print(test[1])
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.85119 s] survived
   - [# 166] SDL linkedList1: 
--------------------------------------------------------------------------------
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
- 187:     print(test[1])
+ 187:     pass
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.95287 s] survived
   - [# 167] SDL linkedList1: 
--------------------------------------------------------------------------------
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
- 188:     print(test[2])
+ 188:     pass
  189:     print(test[-1])
--------------------------------------------------------------------------------
[2.90558 s] survived
   - [# 168] SDL linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
- 189:     print(test[-1])
+ 189:     pass
--------------------------------------------------------------------------------
[2.96792 s] survived
   - [# 169] SVD linkedList1: 
--------------------------------------------------------------------------------
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
    9:     def __init__(self):
-  10:         self.head = None
+  10:         head = None
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 170] SVD linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
-  11:         self.size = 0
+  11:         size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 171] SVD linkedList1: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
-  12:         self.cursor = None
+  12:         cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 172] SVD linkedList1: 
--------------------------------------------------------------------------------
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
-  15:         return self.size
+  15:         return size
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
--------------------------------------------------------------------------------
[6.77949 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_2

def test_case_2():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_linkedList1_RANDOM.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebd77be0>

>   ???
E   NameError: name 'size' is not defined

linkedList1:15: NameError
   - [# 173] SVD linkedList1: 
--------------------------------------------------------------------------------
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
-  21:         if self.head is not None:
+  21:         if head is not None:
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
--------------------------------------------------------------------------------
[6.70788 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_15

def test_case_15():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_0.__contains__(singly_linked_node_0)

RANDOM/test_linkedList1_RANDOM.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed5a8e20>
item = <linkedList1.SinglyLinkedNode object at 0x7fd0ed5a8d90>

>   ???
E   NameError: name 'head' is not defined

linkedList1:21: NameError
   - [# 174] SVD linkedList1: 
--------------------------------------------------------------------------------
   18:         return self
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
-  22:             cur = self.head
+  22:             cur = head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
--------------------------------------------------------------------------------
[6.83706 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_116

def test_case_116():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        var_2 = doubly_linked_list_2.__iter__()
        assert len(var_2) == 0
        none_type_0 = None
        singly_linked_node_5 = module_0.SinglyLinkedNode(none_type_0)
>       var_3 = doubly_linked_list_0.__contains__(var_0)

RANDOM/test_linkedList1_RANDOM.py:4476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed5a9840>, item = None

>   ???
E   NameError: name 'head' is not defined

linkedList1:22: NameError
   - [# 175] SVD linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
-  35:         if (index >= self.size or index < 0):
+  35:         if (index >= size or index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[7.57981 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec037040>, index = False

>   ???
E   NameError: name 'size' is not defined

linkedList1:35: NameError
   - [# 176] SVD linkedList1: 
--------------------------------------------------------------------------------
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
-  38:             cur = self.head
+  38:             cur = head
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
--------------------------------------------------------------------------------
[7.44555 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_901

def test_case_901():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        singly_linked_node_2 = module_0.SinglyLinkedNode(singly_linked_node_1)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(doubly_linked_list_0)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_0.data) == 0
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        singly_linked_node_3 = module_0.SinglyLinkedNode(doubly_linked_list_1)
        assert len(singly_linked_node_3.data) == 0
        var_0 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        assert len(singly_linked_node_3.data) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = '*rKvD\nl'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(str_0)
        assert doubly_linked_node_1.data == '*rKvD\nl'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_1 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        var_1 = doubly_linked_list_3.__contains__(bool_1)
        bool_2 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_2 = doubly_linked_list_4.__iter__()
        assert len(var_2) == 0
        bool_3 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_3 = doubly_linked_list_7.append(doubly_linked_list_7)
        assert len(doubly_linked_list_7) == 1
        var_4 = doubly_linked_list_6.append(var_3)
        assert len(doubly_linked_list_6) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        doubly_linked_node_2 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_2.data is True
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_6 = True
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        none_type_0 = None
        doubly_linked_node_3 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_3.data is None
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_5 = doubly_linked_list_1.__getitem__(var_1)

RANDOM/test_linkedList1_RANDOM.py:49748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed5a84f0>, index = False

>   ???
E   NameError: name 'head' is not defined

linkedList1:38: NameError
   - [# 177] SVD linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
-  44:         if (index >= self.size or index < 0):
+  44:         if (index >= size or index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[6.85061 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0f007b2b0>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ec0e8dc0>

>   ???
E   NameError: name 'size' is not defined

linkedList1:44: NameError
   - [# 178] SVD linkedList1: 
--------------------------------------------------------------------------------
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
-  47:             cur = self.head
+  47:             cur = head
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
--------------------------------------------------------------------------------
[7.24352 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_458

def test_case_458():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        bool_3 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_3)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        singly_linked_node_6 = module_0.SinglyLinkedNode(singly_linked_node_5)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        var_3 = doubly_linked_list_2.append(var_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        singly_linked_node_9 = module_0.SinglyLinkedNode(var_3)
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_5 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        doubly_linked_node_1 = module_0.DoublyLinkedNode(singly_linked_node_11)
        assert f'{type(doubly_linked_node_1.data).__module__}.{type(doubly_linked_node_1.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        var_4 = doubly_linked_list_5.__len__()
        assert var_4 == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_5 = doubly_linked_list_6.__contains__(singly_linked_node_12)
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        singly_linked_node_16 = module_0.SinglyLinkedNode(singly_linked_node_14)
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_14)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_8 = True
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_19 = module_0.SinglyLinkedNode(singly_linked_node_18)
        doubly_linked_node_3 = module_0.DoublyLinkedNode(doubly_linked_list_9)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_node_3.data) == 0
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
>       var_7 = doubly_linked_list_3.__setitem__(var_5, singly_linked_node_18)

RANDOM/test_linkedList1_RANDOM.py:23477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf8fa60>, index = False
value = <linkedList1.SinglyLinkedNode object at 0x7fd0ebf8fb50>

>   ???
E   NameError: name 'head' is not defined

linkedList1:47: NameError
   - [# 179] SVD linkedList1: 
--------------------------------------------------------------------------------
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
-  53:         if self.cursor is None:
+  53:         if cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
--------------------------------------------------------------------------------
[6.74430 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc1390>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:53: NameError
   - [# 180] SVD linkedList1: 
--------------------------------------------------------------------------------
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
-  56:             node = self.cursor.data
+  56:             node = cursor.data
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
--------------------------------------------------------------------------------
[6.53523 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc2290>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:56: NameError
   - [# 181] SVD linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
-  57:             self.cursor = self.cursor.next
+  57:             cursor = self.cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 182] SVD linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
-  57:             self.cursor = self.cursor.next
+  57:             self.cursor = cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[6.66014 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_93

def test_case_93():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(singly_linked_node_1)
        assert f'{type(doubly_linked_node_0.data).__module__}.{type(doubly_linked_node_0.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_1 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_2 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        bool_3 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_2.__contains__(singly_linked_node_7)
        assert var_1 is False
        bool_4 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        var_2 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        none_type_1 = None
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = singly_linked_list_1.append(none_type_1)
        assert len(singly_linked_list_1) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_4 = doubly_linked_list_4.next()

RANDOM/test_linkedList1_RANDOM.py:3497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0e9fc0a00>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:57: NameError
   - [# 183] SVD linkedList1: 
--------------------------------------------------------------------------------
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
-  65:         if self.head is None:
+  65:         if head is None:
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
--------------------------------------------------------------------------------
[6.57970 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:896: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ee8e69b0>, data = None

>   ???
E   NameError: name 'head' is not defined

linkedList1:65: NameError
   - [# 184] SVD linkedList1: 
--------------------------------------------------------------------------------
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
-  66:             self.head = SinglyLinkedNode(data)
+  66:             head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 185] SVD linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
-  67:             self.cursor = self.head
+  67:             cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 186] SVD linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
-  67:             self.cursor = self.head
+  67:             self.cursor = head
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[6.79688 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:896: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ede176d0>, data = None

>   ???
E   NameError: name 'head' is not defined

linkedList1:67: NameError
   - [# 187] SVD linkedList1: 
--------------------------------------------------------------------------------
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
-  69:             node = self.head
+  69:             node = head
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
--------------------------------------------------------------------------------
[6.67850 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_41

def test_case_41():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert f'{type(doubly_linked_list_0).__module__}.{type(doubly_linked_list_0).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_0)
        assert var_0 is False
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_2 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_5)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_6 = False
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
>       var_3 = singly_linked_list_0.append(singly_linked_node_13)

RANDOM/test_linkedList1_RANDOM.py:1245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fd0ec775660>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec774760>

>   ???
E   NameError: name 'head' is not defined

linkedList1:69: NameError
   - [# 188] SVD linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
-  80:         self.size += 1
+  80:         size += 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 189] SVD linkedList1: 
--------------------------------------------------------------------------------
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
-  85:         self.data = data
+  85:         data = data
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 190] SVD linkedList1: 
--------------------------------------------------------------------------------
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
-  86:         self.next = None
+  86:         next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 191] SVD linkedList1: 
--------------------------------------------------------------------------------
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
   94:     def previous(self):
-  95:         if self.cursor.prev is None:
+  95:         if cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
--------------------------------------------------------------------------------
[7.92201 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_1206

def test_case_1206():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        bool_1 = False
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.append(doubly_linked_list_1)
        assert len(doubly_linked_list_1) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_1.previous()

RANDOM/test_linkedList1_RANDOM.py:67708: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ee752260>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:95: NameError
   - [# 192] SVD linkedList1: 
--------------------------------------------------------------------------------
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
-  98:             self.cursor.prev
+  98:             cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
--------------------------------------------------------------------------------
[2.64417 s] survived
   - [# 193] SVD linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
-  99:             self.cursor = self.cursor.prev
+  99:             cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 194] SVD linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
-  99:             self.cursor = self.cursor.prev
+  99:             self.cursor = cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[2.82874 s] survived
   - [# 195] SVD linkedList1: 
--------------------------------------------------------------------------------
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
- 100:             return self.cursor.data
+ 100:             return cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[2.78702 s] survived
   - [# 196] SVD linkedList1: 
--------------------------------------------------------------------------------
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
- 107:         if self.head is None:
+ 107:         if head is None:
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
--------------------------------------------------------------------------------
[6.44119 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_1 = doubly_linked_list_3.append(singly_linked_node_3)

RANDOM/test_linkedList1_RANDOM.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec157250>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec1569e0>

>   ???
E   NameError: name 'head' is not defined

linkedList1:107: NameError
   - [# 197] SVD linkedList1: 
--------------------------------------------------------------------------------
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
- 108:             self.head = DoublyLinkedNode(data)
+ 108:             head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 198] SVD linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
+ 109:             cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 199] SVD linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
- 109:             self.cursor = self.head
+ 109:             self.cursor = head
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[6.41946 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_16

def test_case_16():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_0 = doubly_linked_list_3.__contains__(singly_linked_node_5)
        assert var_0 is False
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        bool_6 = True
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_6)
        bool_7 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
>       var_1 = doubly_linked_list_3.append(singly_linked_node_3)

RANDOM/test_linkedList1_RANDOM.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ebf81e10>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec180190>

>   ???
E   NameError: name 'head' is not defined

linkedList1:109: NameError
   - [# 200] SVD linkedList1: 
--------------------------------------------------------------------------------
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
- 111:             node = self.head
+ 111:             node = head
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
--------------------------------------------------------------------------------
[6.38709 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_64

def test_case_64():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_1 = True
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_1 = doubly_linked_list_1.__contains__(singly_linked_node_2)
        assert var_1 is False
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        var_2 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        bool_4 = False
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        bool_5 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
>       var_4 = doubly_linked_list_3.append(none_type_0)

RANDOM/test_linkedList1_RANDOM.py:2252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec180d60>, data = None

>   ???
E   NameError: name 'head' is not defined

linkedList1:111: NameError
   - [# 201] SVD linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
- 120:         self.size += 1
+ 120:         size += 1
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 202] SVD linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
- 123:         if index >= self.size:
+ 123:         if index >= size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[6.50069 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec9e7250>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec9e4af0>, index = -2582.0

>   ???
E   NameError: name 'size' is not defined

linkedList1:123: NameError
   - [# 203] SVD linkedList1: 
--------------------------------------------------------------------------------
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
- 125:         if self.head is None:
+ 125:         if head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
--------------------------------------------------------------------------------
[6.39644 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ede14e80>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ede17160>, index = -2582.0

>   ???
E   NameError: name 'head' is not defined

linkedList1:125: NameError
   - [# 204] SVD linkedList1: 
--------------------------------------------------------------------------------
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
- 126:             self.head = DoublyLinkedNode(data)
+ 126:             head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
  130:         elif index == self.size - 1:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 205] SVD linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
- 127:             self.cursor = self.head
+ 127:             cursor = self.head
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 206] SVD linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
- 127:             self.cursor = self.head
+ 127:             self.cursor = head
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[6.56738 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_220

def test_case_220():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_1)
        var_0 = doubly_linked_list_0.__len__()
        assert var_0 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_1 = doubly_linked_list_1.__iter__()
        assert len(var_1) == 0
        bool_2 = True
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_2 = doubly_linked_list_2.append(doubly_linked_list_2)
        assert len(doubly_linked_list_2) == 1
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        bool_3 = True
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        var_3 = doubly_linked_list_4.append(doubly_linked_list_4)
        assert len(doubly_linked_list_4) == 1
        var_4 = doubly_linked_list_3.append(var_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        bool_4 = True
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_4)
        none_type_0 = None
        doubly_linked_node_0 = module_0.DoublyLinkedNode(none_type_0)
        assert doubly_linked_node_0.data is None
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        dict_0 = {}
        doubly_linked_node_1 = module_0.DoublyLinkedNode(dict_0)
        assert doubly_linked_node_1.data == {}
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        float_0 = -2582.0
>       var_5 = doubly_linked_list_1.insert(singly_linked_node_1, float_0)

RANDOM/test_linkedList1_RANDOM.py:9709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec0762c0>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec0742e0>, index = -2582.0

>   ???
E   NameError: name 'head' is not defined

linkedList1:127: NameError
   - [# 207] SVD linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
- 130:         elif index == self.size - 1:
+ 130:         elif index == size - 1:
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[6.81888 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
>       var_11 = var_4.insert(singly_linked_node_2, bool_9)

RANDOM/test_linkedList1_RANDOM.py:29022: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ed6c3f70>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ee75d420>, index = False

>   ???
E   NameError: name 'size' is not defined

linkedList1:130: NameError
   - [# 208] SVD linkedList1: 
--------------------------------------------------------------------------------
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
- 132:             self.append(data)
+ 132:             append(data)
  133:         
  134:         elif index == 0:
  135:             
  136:             
--------------------------------------------------------------------------------
[6.91071 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_556

def test_case_556():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_1)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        var_0 = doubly_linked_list_1.__contains__(singly_linked_node_3)
        assert var_0 is False
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_1.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        doubly_linked_node_2 = module_0.DoublyLinkedNode(singly_linked_node_4)
        assert f'{type(doubly_linked_node_2.data).__module__}.{type(doubly_linked_node_2.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        var_1 = doubly_linked_list_3.append(doubly_linked_list_3)
        assert len(doubly_linked_list_3) == 1
        singly_linked_node_7 = module_0.SinglyLinkedNode(singly_linked_node_5)
        bool_4 = False
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_2 = doubly_linked_list_4.__contains__(singly_linked_node_9)
        var_3 = doubly_linked_list_4.__len__()
        assert var_3 == 0
        var_4 = doubly_linked_list_5.__iter__()
        assert len(var_4) == 0
        var_5 = doubly_linked_list_5.append(var_4)
        assert len(doubly_linked_list_5) == 1
        assert len(var_4) == 1
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        singly_linked_node_11 = module_0.SinglyLinkedNode(doubly_linked_list_6)
        assert len(singly_linked_node_11.data) == 0
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        var_6 = doubly_linked_list_8.append(doubly_linked_list_8)
        assert len(doubly_linked_list_8) == 1
        var_7 = doubly_linked_list_7.append(var_6)
        assert len(doubly_linked_list_7) == 1
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        singly_linked_node_14 = module_0.SinglyLinkedNode(var_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        bool_7 = True
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        var_8 = doubly_linked_list_10.__contains__(singly_linked_node_15)
        var_9 = doubly_linked_list_10.__len__()
        assert var_9 == 0
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        singly_linked_node_17 = module_0.SinglyLinkedNode(doubly_linked_list_12)
        assert len(singly_linked_node_17.data) == 0
        doubly_linked_node_3 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_3.data).__module__}.{type(doubly_linked_node_3.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_10 = singly_linked_list_0.__iter__()
        assert len(var_10) == 0
        bool_8 = True
        singly_linked_node_18 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_19 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_13 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_13) == 0
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_19)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        doubly_linked_list_14 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_14) == 0
        bool_9 = False
>       var_11 = var_4.insert(singly_linked_node_2, bool_9)

RANDOM/test_linkedList1_RANDOM.py:29022: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fd0ec075090>
data = <linkedList1.SinglyLinkedNode object at 0x7fd0ec077cd0>, index = False

>   ???
E   NameError: name 'append' is not defined

linkedList1:132: NameError
   - [# 209] SVD linkedList1: 
--------------------------------------------------------------------------------
  134:         elif index == 0:
  135:             
  136:             
  137:             
- 138:             a = self.head
+ 138:             a = head
  139:             c = DoublyLinkedNode(data)
  140:             
  141:             
  142:             
--------------------------------------------------------------------------------
[2.79025 s] survived
   - [# 210] SVD linkedList1: 
--------------------------------------------------------------------------------
  140:             
  141:             
  142:             
  143:             
- 144:             self.head = c
+ 144:             head = c
  145:             c.next = a
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 211] SVD linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
- 147:             self.cursor = self.head
+ 147:             cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 212] SVD linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
- 147:             self.cursor = self.head
+ 147:             self.cursor = head
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[2.77567 s] survived
   - [# 213] SVD linkedList1: 
--------------------------------------------------------------------------------
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
- 150:             a = self.head
+ 150:             a = head
  151:             for x in range(index - 1):
  152:                 a = a.next
  153:             
  154:             
--------------------------------------------------------------------------------
[2.87744 s] survived
   - [# 214] SVD linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
- 171:         self.size += 1
+ 171:         size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 215] SVD linkedList1: 
--------------------------------------------------------------------------------
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
- 178:         self.prev = None
+ 178:         prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 216] ZIL linkedList1: 
--------------------------------------------------------------------------------
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
-  24:                 if cur.data is item:
-  25:                     return True
-  26:                 cur = cur.next
+  24:                 break
+  25:         
+  26:         
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
--------------------------------------------------------------------------------
[6.66501 s] killed by RANDOM/test_linkedList1_RANDOM.py::test_case_257

def test_case_257():
        bool_0 = True
        singly_linked_node_0 = module_0.SinglyLinkedNode(bool_0)
        assert f'{type(singly_linked_node_0).__module__}.{type(singly_linked_node_0).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert singly_linked_node_0.data is True
        assert singly_linked_node_0.next is None
        bool_1 = True
        singly_linked_node_1 = module_0.SinglyLinkedNode(bool_1)
        singly_linked_node_2 = module_0.SinglyLinkedNode(bool_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        bool_2 = True
        singly_linked_node_3 = module_0.SinglyLinkedNode(bool_2)
        singly_linked_node_4 = module_0.SinglyLinkedNode(bool_2)
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_2)
        assert doubly_linked_node_0.data is True
        assert doubly_linked_node_0.next is None
        assert doubly_linked_node_0.prev is None
        bool_3 = True
        singly_linked_node_5 = module_0.SinglyLinkedNode(bool_3)
        singly_linked_node_6 = module_0.SinglyLinkedNode(bool_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_3) == 0
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_4) == 0
        bool_4 = True
        singly_linked_node_7 = module_0.SinglyLinkedNode(bool_4)
        singly_linked_node_8 = module_0.SinglyLinkedNode(bool_4)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_5) == 0
        var_0 = doubly_linked_list_4.__contains__(singly_linked_node_7)
        assert var_0 is False
        var_1 = doubly_linked_list_5.__iter__()
        assert len(var_1) == 0
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_6) == 0
        bool_5 = True
        singly_linked_node_9 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_10 = module_0.SinglyLinkedNode(bool_5)
        singly_linked_node_11 = module_0.SinglyLinkedNode(bool_5)
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_7) == 0
        var_2 = doubly_linked_list_7.__iter__()
        assert len(var_2) == 0
        doubly_linked_list_8 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_8) == 0
        none_type_0 = None
        var_3 = doubly_linked_list_8.append(none_type_0)
        assert len(doubly_linked_list_8) == 1
        bool_6 = True
        singly_linked_node_12 = module_0.SinglyLinkedNode(bool_6)
        singly_linked_node_13 = module_0.SinglyLinkedNode(bool_6)
        doubly_linked_list_9 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_9) == 0
        none_type_1 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_4 = singly_linked_list_0.append(none_type_1)
        assert len(singly_linked_list_0) == 1
        doubly_linked_node_1 = module_0.DoublyLinkedNode(bool_6)
        assert doubly_linked_node_1.data is True
        assert doubly_linked_node_1.next is None
        assert doubly_linked_node_1.prev is None
        bool_7 = True
        singly_linked_node_14 = module_0.SinglyLinkedNode(bool_7)
        singly_linked_node_15 = module_0.SinglyLinkedNode(bool_7)
        doubly_linked_list_10 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_10) == 0
        var_5 = doubly_linked_list_10.append(doubly_linked_list_10)
        assert len(doubly_linked_list_10) == 1
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        doubly_linked_node_2 = module_0.DoublyLinkedNode(var_5)
        assert doubly_linked_node_2.data is None
        assert doubly_linked_node_2.next is None
        assert doubly_linked_node_2.prev is None
        doubly_linked_list_11 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_11) == 0
        bool_8 = True
        singly_linked_node_16 = module_0.SinglyLinkedNode(bool_8)
        singly_linked_node_17 = module_0.SinglyLinkedNode(bool_8)
        doubly_linked_list_12 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_12) == 0
        var_6 = doubly_linked_list_11.__contains__(singly_linked_node_16)
        bytes_0 = b'\xb1\x86\xe7\xde\xd7\xfbp'
        doubly_linked_node_3 = module_0.DoublyLinkedNode(bytes_0)
        assert doubly_linked_node_3.data == b'\xb1\x86\xe7\xde\xd7\xfbp'
        assert doubly_linked_node_3.next is None
        assert doubly_linked_node_3.prev is None
        doubly_linked_node_4 = module_0.DoublyLinkedNode(singly_linked_node_17)
        assert f'{type(doubly_linked_node_4.data).__module__}.{type(doubly_linked_node_4.data).__qualname__}' == 'linkedList1.SinglyLinkedNode'
        assert doubly_linked_node_4.next is None
        assert doubly_linked_node_4.prev is None
        var_7 = singly_linked_list_0.__contains__(var_3)
>       assert var_7 is True
E       AssertionError

RANDOM/test_linkedList1_RANDOM.py:11683: AssertionError
   - [# 217] ZIL linkedList1: 
--------------------------------------------------------------------------------
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
-  40:                 cur = cur.next
+  40:                 break
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
--------------------------------------------------------------------------------
[2.84210 s] survived
   - [# 218] ZIL linkedList1: 
--------------------------------------------------------------------------------
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
-  49:                 cur = cur.next
+  49:                 break
   50:             cur.data = value
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
--------------------------------------------------------------------------------
[2.75159 s] survived
   - [# 219] ZIL linkedList1: 
--------------------------------------------------------------------------------
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
-  72:                 node = node.next
+  72:                 break
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
--------------------------------------------------------------------------------
[2.74859 s] survived
   - [# 220] ZIL linkedList1: 
--------------------------------------------------------------------------------
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
- 114:                 node = node.next
+ 114:                 break
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
--------------------------------------------------------------------------------
[2.91190 s] survived
   - [# 221] ZIL linkedList1: 
--------------------------------------------------------------------------------
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
- 152:                 a = a.next
+ 152:                 break
  153:             
  154:             
  155:             
  156:             b = a.next
--------------------------------------------------------------------------------
[2.71743 s] survived
[*] Mutation score [1082.50511 s]: 55.3%
   - all: 221
   - killed: 98 (44.3%)
   - survived: 80 (36.2%)
   - incompetent: 42 (19.0%)
   - timeout: 1 (0.5%)
