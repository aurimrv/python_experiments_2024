[34m[*][0m Start mutation process:
[36m   -[0m targets: linkedList1.py
[36m   -[0m tests: ./MIO
[34m[*][0m 33 tests passed:
[36m   -[0m test_linkedList1_MIO [0.29601 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOD linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
[34m- 189:     print(test[-1])[0m
[32m+ 189:     print(test[1])[0m
--------------------------------------------------------------------------------
[0.17201 s] [31msurvived[0m
[36m   -[0m [#   2] AOR linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[32m+ 130:         elif index == self.size + 1:[0m
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[0.18817 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_25

def test_case_25():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        none_type_0 = None
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.insert(bool_0, bool_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:265: AssertionError
[36m   -[0m [#   3] AOR linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
[34m- 151:             for x in range(index - 1):[0m
[32m+ 151:             for x in range(index + 1):[0m
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[0.15684 s] [31msurvived[0m
[36m   -[0m [#   4] AOR linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
[34m- 189:     print(test[-1])[0m
[32m+ 189:     print(test[+1])[0m
--------------------------------------------------------------------------------
[0.17280 s] [31msurvived[0m
[36m   -[0m [#   5] ASR linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
[34m-  80:         self.size += 1[0m
[32m+  80:         self.size -= 1[0m
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.18544 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
>       assert len(singly_linked_list_0) == 1
E       ValueError: __len__() should return >= 0

MIO/test_linkedList1_MIO.py:45: ValueError
[36m   -[0m [#   6] ASR linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
[34m- 120:         self.size += 1[0m
[32m+ 120:         self.size -= 1[0m
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[0.23894 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
>       assert len(doubly_linked_list_0) == 1
E       ValueError: __len__() should return >= 0

MIO/test_linkedList1_MIO.py:13: ValueError
[36m   -[0m [#   7] ASR linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
[34m- 171:         self.size += 1[0m
[32m+ 171:         self.size -= 1[0m
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.20033 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.insert(int_0, int_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:240: AssertionError
[36m   -[0m [#   8] CDI linkedList1: 
--------------------------------------------------------------------------------
    5: 
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
[34m-   9:     def __init__(self):[0m
[34m-  10:         self.head = None[0m
[34m-  11:         self.size = 0[0m
[34m-  12:         self.cursor = None[0m
[34m-  13:     [0m
[32m+   9:     @classmethod[0m
[32m+  10:     def __init__(self):[0m
[32m+  11:         self.head = None[0m
[32m+  12:         self.size = 0[0m
[32m+  13:         self.cursor = None[0m
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
--------------------------------------------------------------------------------
[0.17616 s] [31msurvived[0m
[36m   -[0m [#   9] CDI linkedList1: 
--------------------------------------------------------------------------------
   10:         self.head = None
   11:         self.size = 0
   12:         self.cursor = None
   13:     
[34m-  14:     def __len__(self):[0m
[34m-  15:         return self.size[0m
[34m-  16:     [0m
[32m+  14:     @classmethod[0m
[32m+  15:     def __len__(self):[0m
[32m+  16:         return self.size[0m
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
--------------------------------------------------------------------------------
[0.18134 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

MIO/test_linkedList1_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:16: AttributeError
[36m   -[0m [#  10] CDI linkedList1: 
--------------------------------------------------------------------------------
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
[34m-  17:     def __iter__(self):[0m
[34m-  18:         return self[0m
[34m-  19:     [0m
[32m+  17:     @classmethod[0m
[32m+  18:     def __iter__(self):[0m
[32m+  19:         return self[0m
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
--------------------------------------------------------------------------------
[0.18752 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:54: TypeError: object of type 'type' has no len()

[36m   -[0m [#  11] CDI linkedList1: 
--------------------------------------------------------------------------------
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
[34m-  20:     def __contains__(self, item):[0m
[34m-  21:         if self.head is not None:[0m
[34m-  22:             cur = self.head[0m
[34m-  23:             while cur is not None:[0m
[34m-  24:                 if cur.data is item:[0m
[34m-  25:                     return True[0m
[34m-  26:                 cur = cur.next[0m
[34m-  27:         return False[0m
[34m-  28:     [0m
[32m+  20:     @classmethod[0m
[32m+  21:     def __contains__(self, item):[0m
[32m+  22:         if self.head is not None:[0m
[32m+  23:             cur = self.head[0m
[32m+  24:             while cur is not None:[0m
[32m+  25:                 if cur.data is item:[0m
[32m+  26:                     return True[0m
[32m+  27:                 cur = cur.next[0m
[32m+  28:         return False[0m
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[0.18338 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>
item = <linkedList1.DoublyLinkedList object at 0x7fc09b8dfc40>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'head'

linkedList1:22: AttributeError
[36m   -[0m [#  12] CDI linkedList1: 
--------------------------------------------------------------------------------
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
[34m-  34:     def __getitem__(self, index):[0m
[34m-  35:         if (index >= self.size or index < 0):[0m
[34m-  36:             raise IndexError()[0m
[34m-  37:         else:[0m
[34m-  38:             cur = self.head[0m
[34m-  39:             for x in range(index):[0m
[34m-  40:                 cur = cur.next[0m
[34m-  41:             return cur.data[0m
[34m-  42:     [0m
[32m+  34:     @classmethod[0m
[32m+  35:     def __getitem__(self, index):[0m
[32m+  36:         if (index >= self.size or index < 0):[0m
[32m+  37:             raise IndexError()[0m
[32m+  38:         else:[0m
[32m+  39:             cur = self.head[0m
[32m+  40:             for x in range(index):[0m
[32m+  41:                 cur = cur.next[0m
[32m+  42:             return cur.data[0m
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
--------------------------------------------------------------------------------
[0.17090 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.SinglyLinkedList'>, index = True

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute 'size'

linkedList1:36: AttributeError
[36m   -[0m [#  13] CDI linkedList1: 
--------------------------------------------------------------------------------
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
[34m-  43:     def __setitem__(self, index, value):[0m
[34m-  44:         if (index >= self.size or index < 0):[0m
[34m-  45:             raise IndexError()[0m
[34m-  46:         else:[0m
[34m-  47:             cur = self.head[0m
[34m-  48:             for x in range(index):[0m
[34m-  49:                 cur = cur.next[0m
[34m-  50:             cur.data = value[0m
[34m-  51:     [0m
[32m+  43:     @classmethod[0m
[32m+  44:     def __setitem__(self, index, value):[0m
[32m+  45:         if (index >= self.size or index < 0):[0m
[32m+  46:             raise IndexError()[0m
[32m+  47:         else:[0m
[32m+  48:             cur = self.head[0m
[32m+  49:             for x in range(index):[0m
[32m+  50:                 cur = cur.next[0m
[32m+  51:             cur.data = value[0m
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
--------------------------------------------------------------------------------
[0.25858 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>, index = False, value = False

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:45: AttributeError
[36m   -[0m [#  14] CDI linkedList1: 
--------------------------------------------------------------------------------
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
[34m-  52:     def next(self):[0m
[34m-  53:         if self.cursor is None:[0m
[34m-  54:             raise StopIteration()[0m
[34m-  55:         else:[0m
[34m-  56:             node = self.cursor.data[0m
[34m-  57:             self.cursor = self.cursor.next[0m
[34m-  58:             return node[0m
[34m-  59:     [0m
[32m+  52:     @classmethod[0m
[32m+  53:     def next(self):[0m
[32m+  54:         if self.cursor is None:[0m
[32m+  55:             raise StopIteration()[0m
[32m+  56:         else:[0m
[32m+  57:             node = self.cursor.data[0m
[32m+  58:             self.cursor = self.cursor.next[0m
[32m+  59:             return node[0m
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
--------------------------------------------------------------------------------
[0.18709 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute 'cursor'

linkedList1:54: AttributeError
[36m   -[0m [#  15] CDI linkedList1: 
--------------------------------------------------------------------------------
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
[34m-  60:     def append(self, data):[0m
[34m-  61:         ''' Note: The average time for append is O(n)[0m
[34m-  62:             however, insertion is O(1), giving it an[0m
[34m-  63:             advantage over arrays.[0m
[34m-  64:         '''[0m
[34m-  65:         if self.head is None:[0m
[34m-  66:             self.head = SinglyLinkedNode(data)[0m
[34m-  67:             self.cursor = self.head[0m
[34m-  68:         else:[0m
[34m-  69:             node = self.head[0m
[34m-  70:             [0m
[34m-  71:             while node.next is not None:[0m
[34m-  72:                 node = node.next[0m
[34m-  73:             [0m
[32m+  60:     @classmethod[0m
[32m+  61:     def append(self, data):[0m
[32m+  62:         ''' Note: The average time for append is O(n)[0m
[32m+  63:             however, insertion is O(1), giving it an[0m
[32m+  64:             advantage over arrays.[0m
[32m+  65:         '''[0m
[32m+  66:         if self.head is None:[0m
[32m+  67:             self.head = SinglyLinkedNode(data)[0m
[32m+  68:             self.cursor = self.head[0m
[32m+  69:         else:[0m
[32m+  70:             node = self.head[0m
[32m+  71:             [0m
[32m+  72:             while node.next is not None:[0m
[32m+  73:                 node = node.next[0m
   74:             
[34m-  75:             new_node = SinglyLinkedNode(data)[0m
[34m-  76:             [0m
[32m+  75:             [0m
[32m+  76:             new_node = SinglyLinkedNode(data)[0m
   77:             
[34m-  78:             node.next = new_node[0m
[34m-  79:         [0m
[34m-  80:         self.size += 1[0m
[34m-  81: [0m
[32m+  78:             [0m
[32m+  79:             node.next = new_node[0m
[32m+  80:         [0m
[32m+  81:         self.size += 1[0m
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
--------------------------------------------------------------------------------
[0.18582 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.SinglyLinkedList'>
data = <linkedList1.SinglyLinkedList object at 0x7fc09ba21900>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute 'head'

linkedList1:66: AttributeError
[36m   -[0m [#  16] CDI linkedList1: 
--------------------------------------------------------------------------------
   80:         self.size += 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
[34m-  84:     def __init__(self, data):[0m
[34m-  85:         self.data = data[0m
[34m-  86:         self.next = None[0m
[34m-  87: [0m
[32m+  84:     @classmethod[0m
[32m+  85:     def __init__(self, data):[0m
[32m+  86:         self.data = data[0m
[32m+  87:         self.next = None[0m
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
--------------------------------------------------------------------------------
[0.18913 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_14

def test_case_14():
        none_type_0 = None
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(none_type_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        var_2 = singly_linked_list_0.__contains__(none_type_0)
>       assert var_2 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:136: AssertionError
[36m   -[0m [#  17] CDI linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
[34m-  90:     def __init__(self):[0m
[34m-  91:         [0m
[34m-  92:         super(DoublyLinkedList, self).__init__()[0m
[34m-  93:     [0m
[32m+  90:     @classmethod[0m
[32m+  91:     def __init__(self):[0m
[32m+  92:         [0m
[32m+  93:         super(DoublyLinkedList, self).__init__()[0m
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
--------------------------------------------------------------------------------
[0.17676 s] [36mincompetent[0m

TypeError: linkedList1:93: TypeError: SinglyLinkedList.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [#  18] CDI linkedList1: 
--------------------------------------------------------------------------------
   90:     def __init__(self):
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
[34m-  94:     def previous(self):[0m
[34m-  95:         if self.cursor.prev is None:[0m
[34m-  96:             raise StopIteration()[0m
[34m-  97:         else:[0m
[34m-  98:             self.cursor.prev[0m
[34m-  99:             self.cursor = self.cursor.prev[0m
[34m- 100:             return self.cursor.data[0m
[34m- 101:     [0m
[32m+  94:     @classmethod[0m
[32m+  95:     def previous(self):[0m
[32m+  96:         if self.cursor.prev is None:[0m
[32m+  97:             raise StopIteration()[0m
[32m+  98:         else:[0m
[32m+  99:             self.cursor.prev[0m
[32m+ 100:             self.cursor = self.cursor.prev[0m
[32m+ 101:             return self.cursor.data[0m
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
--------------------------------------------------------------------------------
[0.20445 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'cursor'

linkedList1:96: AttributeError
[36m   -[0m [#  19] CDI linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
[34m- 102:     def append(self, data):[0m
[34m- 103:         ''' Note: The average time for append is O(n)[0m
[34m- 104:             however, insertion is O(1), giving it an[0m
[34m- 105:             advantage over arrays.[0m
[34m- 106:         '''[0m
[34m- 107:         if self.head is None:[0m
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[34m- 109:             self.cursor = self.head[0m
[34m- 110:         else:[0m
[34m- 111:             node = self.head[0m
[34m- 112:             [0m
[34m- 113:             while node.next is not None:[0m
[34m- 114:                 node = node.next[0m
[34m- 115:             [0m
[32m+ 102:     @classmethod[0m
[32m+ 103:     def append(self, data):[0m
[32m+ 104:         ''' Note: The average time for append is O(n)[0m
[32m+ 105:             however, insertion is O(1), giving it an[0m
[32m+ 106:             advantage over arrays.[0m
[32m+ 107:         '''[0m
[32m+ 108:         if self.head is None:[0m
[32m+ 109:             self.head = DoublyLinkedNode(data)[0m
[32m+ 110:             self.cursor = self.head[0m
[32m+ 111:         else:[0m
[32m+ 112:             node = self.head[0m
[32m+ 113:             [0m
[32m+ 114:             while node.next is not None:[0m
[32m+ 115:                 node = node.next[0m
  116:             
[34m- 117:             new_node = DoublyLinkedNode(data)[0m
[34m- 118:             node.next = new_node[0m
[34m- 119:             new_node.prev = node[0m
[34m- 120:         self.size += 1[0m
[34m- 121:     [0m
[32m+ 117:             [0m
[32m+ 118:             new_node = DoublyLinkedNode(data)[0m
[32m+ 119:             node.next = new_node[0m
[32m+ 120:             new_node.prev = node[0m
[32m+ 121:         self.size += 1[0m
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[0.23378 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = doubly_linked_list_0.append(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>
data = <linkedList1.DoublyLinkedList object at 0x7fc09b86d990>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'head'

linkedList1:108: AttributeError
[36m   -[0m [#  20] CDI linkedList1: 
--------------------------------------------------------------------------------
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
[34m- 122:     def insert(self, data, index):[0m
[34m- 123:         if index >= self.size:[0m
[34m- 124:             raise IndexError()[0m
[34m- 125:         if self.head is None:[0m
[34m- 126:             self.head = DoublyLinkedNode(data)[0m
[34m- 127:             self.cursor = self.head[0m
[34m- 128:         [0m
[32m+ 122:     @classmethod[0m
[32m+ 123:     def insert(self, data, index):[0m
[32m+ 124:         if index >= self.size:[0m
[32m+ 125:             raise IndexError()[0m
[32m+ 126:         if self.head is None:[0m
[32m+ 127:             self.head = DoublyLinkedNode(data)[0m
[32m+ 128:             self.cursor = self.head[0m
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[34m- 131:             [0m
[34m- 132:             self.append(data)[0m
[34m- 133:         [0m
[34m- 134:         elif index == 0:[0m
[34m- 135:             [0m
[32m+ 130:         [0m
[32m+ 131:         elif index == self.size - 1:[0m
[32m+ 132:             [0m
[32m+ 133:             self.append(data)[0m
[32m+ 134:         [0m
[32m+ 135:         elif index == 0:[0m
  136:             
  137:             
[34m- 138:             a = self.head[0m
[34m- 139:             c = DoublyLinkedNode(data)[0m
[34m- 140:             [0m
[32m+ 138:             [0m
[32m+ 139:             a = self.head[0m
[32m+ 140:             c = DoublyLinkedNode(data)[0m
  141:             
  142:             
  143:             
[34m- 144:             self.head = c[0m
[34m- 145:             c.next = a[0m
[34m- 146:             a.prev = c[0m
[34m- 147:             self.cursor = self.head[0m
[34m- 148:         else:[0m
[34m- 149:             [0m
[34m- 150:             a = self.head[0m
[34m- 151:             for x in range(index - 1):[0m
[34m- 152:                 a = a.next[0m
[34m- 153:             [0m
[32m+ 144:             [0m
[32m+ 145:             self.head = c[0m
[32m+ 146:             c.next = a[0m
[32m+ 147:             a.prev = c[0m
[32m+ 148:             self.cursor = self.head[0m
[32m+ 149:         else:[0m
[32m+ 150:             [0m
[32m+ 151:             a = self.head[0m
[32m+ 152:             for x in range(index - 1):[0m
[32m+ 153:                 a = a.next[0m
  154:             
  155:             
[34m- 156:             b = a.next[0m
[34m- 157:             c = DoublyLinkedNode(data)[0m
[34m- 158:             [0m
[32m+ 156:             [0m
[32m+ 157:             b = a.next[0m
[32m+ 158:             c = DoublyLinkedNode(data)[0m
  159:             
  160:             
  161:             
[34m- 162:             b.prev = c[0m
[34m- 163:             c.next = b[0m
[34m- 164:             [0m
[32m+ 162:             [0m
[32m+ 163:             b.prev = c[0m
[32m+ 164:             c.next = b[0m
  165:             
  166:             
  167:             
[34m- 168:             a.next = c[0m
[34m- 169:             c.prev = a[0m
[34m- 170:         [0m
[34m- 171:         self.size += 1[0m
[34m- 172: [0m
[32m+ 168:             [0m
[32m+ 169:             a.next = c[0m
[32m+ 170:             c.prev = a[0m
[32m+ 171:         [0m
[32m+ 172:         self.size += 1[0m
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
--------------------------------------------------------------------------------
[0.20264 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList1.DoublyLinkedList'>, data = -2627, index = -2627

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute 'size'

linkedList1:124: AttributeError
[36m   -[0m [#  21] CDI linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
[34m- 175:     def __init__(self, data):[0m
[34m- 176:         [0m
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[34m- 178:         self.prev = None[0m
[34m- 179: [0m
[32m+ 175:     @classmethod[0m
[32m+ 176:     def __init__(self, data):[0m
[32m+ 177:         [0m
[32m+ 178:         super(DoublyLinkedNode, self).__init__(data)[0m
[32m+ 179:         self.prev = None[0m
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
--------------------------------------------------------------------------------
[0.18342 s] [36mincompetent[0m

TypeError: linkedList1:178: TypeError: SinglyLinkedNode.__init__() missing 1 required positional argument: 'data'

[36m   -[0m [#  22] COI linkedList1: 
--------------------------------------------------------------------------------
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
[34m-  21:         if self.head is not None:[0m
[32m+  21:         if not (self.head is not None):[0m
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
--------------------------------------------------------------------------------
[0.18679 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [#  23] COI linkedList1: 
--------------------------------------------------------------------------------
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
[34m-  23:             while cur is not None:[0m
[32m+  23:             while not (cur is not None):[0m
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
   27:         return False
--------------------------------------------------------------------------------
[0.19065 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [#  24] COI linkedList1: 
--------------------------------------------------------------------------------
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
[34m-  24:                 if cur.data is item:[0m
[32m+  24:                 if not (cur.data is item):[0m
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
--------------------------------------------------------------------------------
[0.18594 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [#  25] COI linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if not ((index >= self.size or index < 0)):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.24179 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b8a66b0>, index = True

>   ???
E   IndexError

linkedList1:36: IndexError
[36m   -[0m [#  26] COI linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if not ((index >= self.size or index < 0)):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.18743 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09be1ae00>, index = False
value = False

>   ???
E   IndexError

linkedList1:45: IndexError
[36m   -[0m [#  27] COI linkedList1: 
--------------------------------------------------------------------------------
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
[34m-  53:         if self.cursor is None:[0m
[32m+  53:         if not (self.cursor is None):[0m
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
--------------------------------------------------------------------------------
[0.17981 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bda5b10>

>   ???
E   StopIteration

linkedList1:54: StopIteration
[36m   -[0m [#  28] COI linkedList1: 
--------------------------------------------------------------------------------
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
[34m-  65:         if self.head is None:[0m
[32m+  65:         if not (self.head is None):[0m
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
--------------------------------------------------------------------------------
[0.18349 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bccab60>
data = <linkedList1.SinglyLinkedList object at 0x7fc09bccab60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:71: AttributeError
[36m   -[0m [#  29] COI linkedList1: 
--------------------------------------------------------------------------------
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
[34m-  71:             while node.next is not None:[0m
[32m+  71:             while not (node.next is not None):[0m
   72:                 node = node.next
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
--------------------------------------------------------------------------------
[0.18959 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
>       var_4 = var_3.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b97a500>
data = <linkedList1.SinglyLinkedList object at 0x7fc09b97a500>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:71: AttributeError
[36m   -[0m [#  30] COI linkedList1: 
--------------------------------------------------------------------------------
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
   94:     def previous(self):
[34m-  95:         if self.cursor.prev is None:[0m
[32m+  95:         if not (self.cursor.prev is None):[0m
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
--------------------------------------------------------------------------------
[0.20477 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc5c970>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:100: AttributeError
[36m   -[0m [#  31] COI linkedList1: 
--------------------------------------------------------------------------------
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
[34m- 107:         if self.head is None:[0m
[32m+ 107:         if not (self.head is None):[0m
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
--------------------------------------------------------------------------------
[0.18505 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = doubly_linked_list_0.append(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcf06d0>
data = <linkedList1.DoublyLinkedList object at 0x7fc09bcf06d0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:113: AttributeError
[36m   -[0m [#  32] COI linkedList1: 
--------------------------------------------------------------------------------
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
[34m- 113:             while node.next is not None:[0m
[32m+ 113:             while not (node.next is not None):[0m
  114:                 node = node.next
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
--------------------------------------------------------------------------------
[0.25817 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.append(var_0)

MIO/test_linkedList1_MIO.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b88e1a0>, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:113: AttributeError
[36m   -[0m [#  33] COI linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
[34m- 123:         if index >= self.size:[0m
[32m+ 123:         if not (index >= self.size):[0m
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[0.20414 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbb670>, data = -2627
index = -2627

>   ???
E   IndexError

linkedList1:124: IndexError
[36m   -[0m [#  34] COI linkedList1: 
--------------------------------------------------------------------------------
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
[34m- 125:         if self.head is None:[0m
[32m+ 125:         if not (self.head is None):[0m
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
--------------------------------------------------------------------------------
[0.20137 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_24

def test_case_24():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = -3179
>       var_0 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b7c75b0>, data = -3179
index = -3179

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList1:156: AttributeError
[36m   -[0m [#  35] COI linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[32m+ 130:         elif not (index == self.size - 1):[0m
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[0.20141 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.insert(int_0, int_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:240: AssertionError
[36m   -[0m [#  36] COI linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
[34m- 134:         elif index == 0:[0m
[32m+ 134:         elif not (index == 0):[0m
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[0.17643 s] [31msurvived[0m
[36m   -[0m [#  37] COI linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
[34m- 180: if __name__ == '__main__':[0m
[32m+ 180: if not (__name__ == '__main__'):[0m
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
2
3
4
[0.00000 s] [36mincompetent[0m

IndexError

[36m   -[0m [#  38] CRP linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
[34m-  11:         self.size = 0[0m
[32m+  11:         self.size = 1[0m
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[0.26031 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0
E       AssertionError

MIO/test_linkedList1_MIO.py:7: AssertionError
[36m   -[0m [#  39] CRP linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
[34m-  29:     ''' Both getitem and setitem represent the magic methods[0m
[34m-  30:         for the object[index] and object[index] = other operations[0m
[34m-  31:         for linked lists they run in O(n) time making them less[0m
[34m-  32:         efficient than a list() for lookups[0m
[34m-  33:     '''[0m
[32m+  29:     '''mutpy'''[0m
[32m+  30:     [0m
[32m+  31:     [0m
[32m+  32:     [0m
[32m+  33:     [0m
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[0.17587 s] [31msurvived[0m
[36m   -[0m [#  40] CRP linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
[34m-  29:     ''' Both getitem and setitem represent the magic methods[0m
[34m-  30:         for the object[index] and object[index] = other operations[0m
[34m-  31:         for linked lists they run in O(n) time making them less[0m
[34m-  32:         efficient than a list() for lookups[0m
[34m-  33:     '''[0m
[32m+  29:     ''''''[0m
[32m+  30:     [0m
[32m+  31:     [0m
[32m+  32:     [0m
[32m+  33:     [0m
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[0.17218 s] [31msurvived[0m
[36m   -[0m [#  41] CRP linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index >= self.size or index < 1):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.17383 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_6

def test_case_6():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
        assert var_0 is False
        var_1 = doubly_linked_list_0.append(var_0)
        assert len(doubly_linked_list_0) == 1
>       var_2 = doubly_linked_list_0.__getitem__(var_0)

MIO/test_linkedList1_MIO.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bb37850>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
[36m   -[0m [#  42] CRP linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index >= self.size or index < 1):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.17981 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b9d76a0>, index = False
value = False

>   ???
E   IndexError

linkedList1:45: IndexError
[36m   -[0m [#  43] CRP linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
[34m-  80:         self.size += 1[0m
[32m+  80:         self.size += 2[0m
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.18215 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
>       assert len(singly_linked_list_0) == 1
E       AssertionError

MIO/test_linkedList1_MIO.py:45: AssertionError
[36m   -[0m [#  44] CRP linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
[34m- 120:         self.size += 1[0m
[32m+ 120:         self.size += 2[0m
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[0.25799 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
>       assert len(doubly_linked_list_0) == 1
E       AssertionError

MIO/test_linkedList1_MIO.py:13: AssertionError
[36m   -[0m [#  45] CRP linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[32m+ 130:         elif index == self.size - 2:[0m
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[0.26964 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_25

def test_case_25():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        none_type_0 = None
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.insert(bool_0, bool_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:265: AssertionError
[36m   -[0m [#  46] CRP linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
[34m- 134:         elif index == 0:[0m
[32m+ 134:         elif index == 1:[0m
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[0.17109 s] [31msurvived[0m
[36m   -[0m [#  47] CRP linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
[34m- 151:             for x in range(index - 1):[0m
[32m+ 151:             for x in range(index - 2):[0m
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[0.17653 s] [31msurvived[0m
[36m   -[0m [#  48] CRP linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
[34m- 171:         self.size += 1[0m
[32m+ 171:         self.size += 2[0m
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.18807 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.insert(int_0, int_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:240: AssertionError
[36m   -[0m [#  49] CRP linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
[34m- 180: if __name__ == '__main__':[0m
[32m+ 180: if __name__ == 'mutpy':[0m
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
[0.17587 s] [31msurvived[0m
[36m   -[0m [#  50] CRP linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
[34m- 180: if __name__ == '__main__':[0m
[32m+ 180: if __name__ == '':[0m
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
[0.16984 s] [31msurvived[0m
[36m   -[0m [#  51] CRP linkedList1: 
--------------------------------------------------------------------------------
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
[34m- 182:     test.append(2)[0m
[32m+ 182:     test.append(3)[0m
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
--------------------------------------------------------------------------------
[0.24989 s] [31msurvived[0m
[36m   -[0m [#  52] CRP linkedList1: 
--------------------------------------------------------------------------------
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
[34m- 183:     test.append(3)[0m
[32m+ 183:     test.append(4)[0m
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
--------------------------------------------------------------------------------
[0.16983 s] [31msurvived[0m
[36m   -[0m [#  53] CRP linkedList1: 
--------------------------------------------------------------------------------
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
[34m- 184:     test.append(4)[0m
[32m+ 184:     test.append(5)[0m
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
--------------------------------------------------------------------------------
[0.16888 s] [31msurvived[0m
[36m   -[0m [#  54] CRP linkedList1: 
--------------------------------------------------------------------------------
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
[34m- 186:     print(test[0])[0m
[32m+ 186:     print(test[1])[0m
  187:     print(test[1])
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.17885 s] [31msurvived[0m
[36m   -[0m [#  55] CRP linkedList1: 
--------------------------------------------------------------------------------
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
[34m- 187:     print(test[1])[0m
[32m+ 187:     print(test[2])[0m
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.17593 s] [31msurvived[0m
[36m   -[0m [#  56] CRP linkedList1: 
--------------------------------------------------------------------------------
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
[34m- 188:     print(test[2])[0m
[32m+ 188:     print(test[3])[0m
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.17593 s] [31msurvived[0m
[36m   -[0m [#  57] CRP linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
[34m- 189:     print(test[-1])[0m
[32m+ 189:     print(test[-2])[0m
--------------------------------------------------------------------------------
[0.17794 s] [31msurvived[0m
[36m   -[0m [#  58] IOD linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
[34m-  90:     def __init__(self):[0m
[34m-  91:         [0m
[34m-  92:         super(DoublyLinkedList, self).__init__()[0m
[32m+  90:     pass[0m
[32m+  91:     [0m
[32m+  92:     [0m
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[0.23079 s] [31msurvived[0m
[36m   -[0m [#  59] IOD linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
[34m- 102:     def append(self, data):[0m
[34m- 103:         ''' Note: The average time for append is O(n)[0m
[34m- 104:             however, insertion is O(1), giving it an[0m
[34m- 105:             advantage over arrays.[0m
[34m- 106:         '''[0m
[34m- 107:         if self.head is None:[0m
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[34m- 109:             self.cursor = self.head[0m
[34m- 110:         else:[0m
[34m- 111:             node = self.head[0m
[34m- 112:             [0m
[34m- 113:             while node.next is not None:[0m
[34m- 114:                 node = node.next[0m
[34m- 115:             [0m
[34m- 116:             [0m
[34m- 117:             new_node = DoublyLinkedNode(data)[0m
[34m- 118:             node.next = new_node[0m
[34m- 119:             new_node.prev = node[0m
[34m- 120:         self.size += 1[0m
[32m+ 102:     pass[0m
[32m+ 103:     [0m
[32m+ 104:     [0m
[32m+ 105:     [0m
[32m+ 106:     [0m
[32m+ 107:     [0m
[32m+ 108:     [0m
[32m+ 109:     [0m
[32m+ 110:     [0m
[32m+ 111:     [0m
[32m+ 112:     [0m
[32m+ 113:     [0m
[32m+ 114:     [0m
[32m+ 115:     [0m
[32m+ 116:     [0m
[32m+ 117:     [0m
[32m+ 118:     [0m
[32m+ 119:     [0m
[32m+ 120:     [0m
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[0.18811 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc3b460>

>   ???
E   AttributeError: 'SinglyLinkedNode' object has no attribute 'prev'

linkedList1:95: AttributeError
[36m   -[0m [#  60] IOD linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
[34m- 175:     def __init__(self, data):[0m
[34m- 176:         [0m
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[34m- 178:         self.prev = None[0m
[32m+ 175:     pass[0m
[32m+ 176: [0m
[32m+ 177: [0m
[32m+ 178: [0m
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[0.18703 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbd360>

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'prev'

linkedList1:95: AttributeError
[36m   -[0m [#  61] IOP linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[34m- 178:         self.prev = None[0m
[32m+ 177:         self.prev = None[0m
[32m+ 178:         super(DoublyLinkedNode, self).__init__(data)[0m
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[0.17710 s] [31msurvived[0m
[36m   -[0m [#  62] LCR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index >= self.size and index < 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.19639 s] [36mincompetent[0m

TypeError: linkedList1:39: TypeError: 'float' object cannot be interpreted as an integer

[36m   -[0m [#  63] LCR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index >= self.size and index < 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.19584 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_10

def test_case_10():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = -641
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__setitem__(int_0, int_0)

MIO/test_linkedList1_MIO.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bd0c460>, index = -641
value = -641

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:50: AttributeError
[36m   -[0m [#  64] OIL linkedList1: 
--------------------------------------------------------------------------------
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
[34m-  27:         return False[0m
[34m-  28:     [0m
[32m+  27:                 break[0m
[32m+  28:         return False[0m
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[0.26264 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(var_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.__contains__(var_0)
>       assert var_2 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:33: AssertionError
[36m   -[0m [#  65] OIL linkedList1: 
--------------------------------------------------------------------------------
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
   40:                 cur = cur.next
[34m-  41:             return cur.data[0m
[32m+  41:                 breakreturn cur.data[0m
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
--------------------------------------------------------------------------------
[0.15910 s] [31msurvived[0m
[36m   -[0m [#  66] OIL linkedList1: 
--------------------------------------------------------------------------------
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
   49:                 cur = cur.next
[34m-  50:             cur.data = value[0m
[32m+  50:                 breakcur.data = value[0m
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
--------------------------------------------------------------------------------
[0.17405 s] [31msurvived[0m
[36m   -[0m [#  67] OIL linkedList1: 
--------------------------------------------------------------------------------
   69:             node = self.head
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
[34m-  73:             [0m
[32m+  73:                 break[0m
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
   77:             
--------------------------------------------------------------------------------
[0.17794 s] [31msurvived[0m
[36m   -[0m [#  68] OIL linkedList1: 
--------------------------------------------------------------------------------
  111:             node = self.head
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
[34m- 115:             [0m
[32m+ 115:                 break[0m
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
--------------------------------------------------------------------------------
[0.17603 s] [31msurvived[0m
[36m   -[0m [#  69] OIL linkedList1: 
--------------------------------------------------------------------------------
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
  152:                 a = a.next
[34m- 153:             [0m
[32m+ 153:                 break[0m
  154:             
  155:             
  156:             b = a.next
  157:             c = DoublyLinkedNode(data)
--------------------------------------------------------------------------------
[0.17484 s] [31msurvived[0m
[36m   -[0m [#  70] RIL linkedList1: 
--------------------------------------------------------------------------------
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
[34m-  39:             for x in range(index):[0m
[32m+  39:             for x in reversed(range(index)):[0m
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
--------------------------------------------------------------------------------
[0.16063 s] [31msurvived[0m
[36m   -[0m [#  71] RIL linkedList1: 
--------------------------------------------------------------------------------
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
[34m-  48:             for x in range(index):[0m
[32m+  48:             for x in reversed(range(index)):[0m
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
--------------------------------------------------------------------------------
[0.24768 s] [31msurvived[0m
[36m   -[0m [#  72] RIL linkedList1: 
--------------------------------------------------------------------------------
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
[34m- 151:             for x in range(index - 1):[0m
[32m+ 151:             for x in reversed(range(index - 1)):[0m
  152:                 a = a.next
  153:             
  154:             
  155:             
--------------------------------------------------------------------------------
[0.17574 s] [31msurvived[0m
[36m   -[0m [#  73] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index <= self.size or index < 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.17134 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bc9e2f0>, index = True

>   ???
E   IndexError

linkedList1:36: IndexError
[36m   -[0m [#  74] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index > self.size or index < 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.19623 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_8

def test_case_8():
        bool_0 = False
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b78df30>, index = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:41: AttributeError
[36m   -[0m [#  75] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index >= self.size or index > 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.16700 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bc3b610>, index = True

>   ???
E   IndexError

linkedList1:36: IndexError
[36m   -[0m [#  76] ROR linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index >= self.size or index <= 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.17272 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_6

def test_case_6():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
        assert var_0 is False
        var_1 = doubly_linked_list_0.append(var_0)
        assert len(doubly_linked_list_0) == 1
>       var_2 = doubly_linked_list_0.__getitem__(var_0)

MIO/test_linkedList1_MIO.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc83670>, index = False

>   ???
E   IndexError

linkedList1:36: IndexError
[36m   -[0m [#  77] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index <= self.size or index < 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.26542 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b83d8a0>, index = False
value = False

>   ???
E   IndexError

linkedList1:45: IndexError
[36m   -[0m [#  78] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index > self.size or index < 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.19050 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_11

def test_case_11():
        bool_0 = False
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b97dba0>, index = False
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:50: AttributeError
[36m   -[0m [#  79] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index >= self.size or index > 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.19691 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_10

def test_case_10():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = -641
        with pytest.raises(IndexError):
>           doubly_linked_list_0.__setitem__(int_0, int_0)

MIO/test_linkedList1_MIO.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b85e9b0>, index = -641
value = -641

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:50: AttributeError
[36m   -[0m [#  80] ROR linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index >= self.size or index <= 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.17899 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bccbd90>, index = False
value = False

>   ???
E   IndexError

linkedList1:45: IndexError
[36m   -[0m [#  81] ROR linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
[34m- 123:         if index >= self.size:[0m
[32m+ 123:         if index <= self.size:[0m
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[0.20342 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bda67a0>, data = -2627
index = -2627

>   ???
E   IndexError

linkedList1:124: IndexError
[36m   -[0m [#  82] ROR linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
[34m- 123:         if index >= self.size:[0m
[32m+ 123:         if index > self.size:[0m
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[0.19450 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_29

def test_case_29():
        bool_0 = False
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       with pytest.raises(IndexError):
E       Failed: DID NOT RAISE <class 'IndexError'>

MIO/test_linkedList1_MIO.py:314: Failed
[36m   -[0m [#  83] ROR linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[32m+ 130:         elif index != self.size - 1:[0m
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[0.19840 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.insert(int_0, int_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:240: AssertionError
[36m   -[0m [#  84] ROR linkedList1: 
--------------------------------------------------------------------------------
  130:         elif index == self.size - 1:
  131:             
  132:             self.append(data)
  133:         
[34m- 134:         elif index == 0:[0m
[32m+ 134:         elif index != 0:[0m
  135:             
  136:             
  137:             
  138:             a = self.head
--------------------------------------------------------------------------------
[0.23784 s] [31msurvived[0m
[36m   -[0m [#  85] ROR linkedList1: 
--------------------------------------------------------------------------------
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
[34m- 180: if __name__ == '__main__':[0m
[32m+ 180: if __name__ != '__main__':[0m
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
--------------------------------------------------------------------------------
2
3
4
[0.00000 s] [36mincompetent[0m

IndexError

[36m   -[0m [#  86] SCD linkedList1: 
--------------------------------------------------------------------------------
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
[34m-  92:         super(DoublyLinkedList, self).__init__()[0m
[32m+  92:         pass[0m
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[0.17999 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

MIO/test_linkedList1_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcc5390>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
[36m   -[0m [#  87] SCD linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[32m+ 177:         pass[0m
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
--------------------------------------------------------------------------------
[0.18491 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b9832b0>
item = <linkedList1.DoublyLinkedList object at 0x7fc09b9832b0>

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'data'

linkedList1:24: AttributeError
[36m   -[0m [#  88] SCI linkedList1: 
--------------------------------------------------------------------------------
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
[34m- 103:         ''' Note: The average time for append is O(n)[0m
[34m- 104:             however, insertion is O(1), giving it an[0m
[34m- 105:             advantage over arrays.[0m
[34m- 106:         '''[0m
[34m- 107:         if self.head is None:[0m
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[34m- 109:             self.cursor = self.head[0m
[34m- 110:         else:[0m
[34m- 111:             node = self.head[0m
[34m- 112:             [0m
[34m- 113:             while node.next is not None:[0m
[34m- 114:                 node = node.next[0m
[34m- 115:             [0m
[32m+ 103:         super().append(data)[0m
[32m+ 104:         ''' Note: The average time for append is O(n)[0m
[32m+ 105:             however, insertion is O(1), giving it an[0m
[32m+ 106:             advantage over arrays.[0m
[32m+ 107:         '''[0m
[32m+ 108:         if self.head is None:[0m
[32m+ 109:             self.head = DoublyLinkedNode(data)[0m
[32m+ 110:             self.cursor = self.head[0m
[32m+ 111:         else:[0m
[32m+ 112:             node = self.head[0m
[32m+ 113:             [0m
[32m+ 114:             while node.next is not None:[0m
[32m+ 115:                 node = node.next[0m
  116:             
[34m- 117:             new_node = DoublyLinkedNode(data)[0m
[34m- 118:             node.next = new_node[0m
[34m- 119:             new_node.prev = node[0m
[34m- 120:         self.size += 1[0m
[34m- 121:     [0m
[32m+ 117:             [0m
[32m+ 118:             new_node = DoublyLinkedNode(data)[0m
[32m+ 119:             node.next = new_node[0m
[32m+ 120:             new_node.prev = node[0m
[32m+ 121:         self.size += 1[0m
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[0.18335 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
>       assert len(doubly_linked_list_0) == 1
E       AssertionError

MIO/test_linkedList1_MIO.py:13: AssertionError
[36m   -[0m [#  89] SDI linkedList1: 
--------------------------------------------------------------------------------
    5: 
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
[34m-   9:     def __init__(self):[0m
[34m-  10:         self.head = None[0m
[34m-  11:         self.size = 0[0m
[34m-  12:         self.cursor = None[0m
[34m-  13:     [0m
[32m+   9:     @staticmethod[0m
[32m+  10:     def __init__(self):[0m
[32m+  11:         self.head = None[0m
[32m+  12:         self.size = 0[0m
[32m+  13:         self.cursor = None[0m
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
--------------------------------------------------------------------------------
[0.18349 s] [36mincompetent[0m

TypeError: linkedList1:92: TypeError: SinglyLinkedList.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [#  90] SDI linkedList1: 
--------------------------------------------------------------------------------
   10:         self.head = None
   11:         self.size = 0
   12:         self.cursor = None
   13:     
[34m-  14:     def __len__(self):[0m
[34m-  15:         return self.size[0m
[34m-  16:     [0m
[32m+  14:     @staticmethod[0m
[32m+  15:     def __len__(self):[0m
[32m+  16:         return self.size[0m
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
--------------------------------------------------------------------------------
[0.25930 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:7: TypeError: SinglyLinkedList.__len__() missing 1 required positional argument: 'self'

[36m   -[0m [#  91] SDI linkedList1: 
--------------------------------------------------------------------------------
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
[34m-  17:     def __iter__(self):[0m
[34m-  18:         return self[0m
[34m-  19:     [0m
[32m+  17:     @staticmethod[0m
[32m+  18:     def __iter__(self):[0m
[32m+  19:         return self[0m
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
--------------------------------------------------------------------------------
[0.18686 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:53: TypeError: SinglyLinkedList.__iter__() missing 1 required positional argument: 'self'

[36m   -[0m [#  92] SDI linkedList1: 
--------------------------------------------------------------------------------
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
[34m-  20:     def __contains__(self, item):[0m
[34m-  21:         if self.head is not None:[0m
[34m-  22:             cur = self.head[0m
[34m-  23:             while cur is not None:[0m
[34m-  24:                 if cur.data is item:[0m
[34m-  25:                     return True[0m
[34m-  26:                 cur = cur.next[0m
[34m-  27:         return False[0m
[34m-  28:     [0m
[32m+  20:     @staticmethod[0m
[32m+  21:     def __contains__(self, item):[0m
[32m+  22:         if self.head is not None:[0m
[32m+  23:             cur = self.head[0m
[32m+  24:             while cur is not None:[0m
[32m+  25:                 if cur.data is item:[0m
[32m+  26:                     return True[0m
[32m+  27:                 cur = cur.next[0m
[32m+  28:         return False[0m
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
--------------------------------------------------------------------------------
[0.17650 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:14: TypeError: SinglyLinkedList.__contains__() missing 1 required positional argument: 'item'

[36m   -[0m [#  93] SDI linkedList1: 
--------------------------------------------------------------------------------
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
[34m-  34:     def __getitem__(self, index):[0m
[34m-  35:         if (index >= self.size or index < 0):[0m
[34m-  36:             raise IndexError()[0m
[34m-  37:         else:[0m
[34m-  38:             cur = self.head[0m
[34m-  39:             for x in range(index):[0m
[34m-  40:                 cur = cur.next[0m
[34m-  41:             return cur.data[0m
[34m-  42:     [0m
[32m+  34:     @staticmethod[0m
[32m+  35:     def __getitem__(self, index):[0m
[32m+  36:         if (index >= self.size or index < 0):[0m
[32m+  37:             raise IndexError()[0m
[32m+  38:         else:[0m
[32m+  39:             cur = self.head[0m
[32m+  40:             for x in range(index):[0m
[32m+  41:                 cur = cur.next[0m
[32m+  42:             return cur.data[0m
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
--------------------------------------------------------------------------------
[0.18462 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:62: TypeError: SinglyLinkedList.__getitem__() missing 1 required positional argument: 'index'

[36m   -[0m [#  94] SDI linkedList1: 
--------------------------------------------------------------------------------
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
[34m-  43:     def __setitem__(self, index, value):[0m
[34m-  44:         if (index >= self.size or index < 0):[0m
[34m-  45:             raise IndexError()[0m
[34m-  46:         else:[0m
[34m-  47:             cur = self.head[0m
[34m-  48:             for x in range(index):[0m
[34m-  49:                 cur = cur.next[0m
[34m-  50:             cur.data = value[0m
[34m-  51:     [0m
[32m+  43:     @staticmethod[0m
[32m+  44:     def __setitem__(self, index, value):[0m
[32m+  45:         if (index >= self.size or index < 0):[0m
[32m+  46:             raise IndexError()[0m
[32m+  47:         else:[0m
[32m+  48:             cur = self.head[0m
[32m+  49:             for x in range(index):[0m
[32m+  50:                 cur = cur.next[0m
[32m+  51:             cur.data = value[0m
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
--------------------------------------------------------------------------------
[0.17870 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:96: TypeError: SinglyLinkedList.__setitem__() missing 1 required positional argument: 'value'

[36m   -[0m [#  95] SDI linkedList1: 
--------------------------------------------------------------------------------
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
[34m-  52:     def next(self):[0m
[34m-  53:         if self.cursor is None:[0m
[34m-  54:             raise StopIteration()[0m
[34m-  55:         else:[0m
[34m-  56:             node = self.cursor.data[0m
[34m-  57:             self.cursor = self.cursor.next[0m
[34m-  58:             return node[0m
[34m-  59:     [0m
[32m+  52:     @staticmethod[0m
[32m+  53:     def next(self):[0m
[32m+  54:         if self.cursor is None:[0m
[32m+  55:             raise StopIteration()[0m
[32m+  56:         else:[0m
[32m+  57:             node = self.cursor.data[0m
[32m+  58:             self.cursor = self.cursor.next[0m
[32m+  59:             return node[0m
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
--------------------------------------------------------------------------------
[0.18552 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:46: TypeError: SinglyLinkedList.next() missing 1 required positional argument: 'self'

[36m   -[0m [#  96] SDI linkedList1: 
--------------------------------------------------------------------------------
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
[34m-  60:     def append(self, data):[0m
[34m-  61:         ''' Note: The average time for append is O(n)[0m
[34m-  62:             however, insertion is O(1), giving it an[0m
[34m-  63:             advantage over arrays.[0m
[34m-  64:         '''[0m
[34m-  65:         if self.head is None:[0m
[34m-  66:             self.head = SinglyLinkedNode(data)[0m
[34m-  67:             self.cursor = self.head[0m
[34m-  68:         else:[0m
[34m-  69:             node = self.head[0m
[34m-  70:             [0m
[34m-  71:             while node.next is not None:[0m
[34m-  72:                 node = node.next[0m
[34m-  73:             [0m
[32m+  60:     @staticmethod[0m
[32m+  61:     def append(self, data):[0m
[32m+  62:         ''' Note: The average time for append is O(n)[0m
[32m+  63:             however, insertion is O(1), giving it an[0m
[32m+  64:             advantage over arrays.[0m
[32m+  65:         '''[0m
[32m+  66:         if self.head is None:[0m
[32m+  67:             self.head = SinglyLinkedNode(data)[0m
[32m+  68:             self.cursor = self.head[0m
[32m+  69:         else:[0m
[32m+  70:             node = self.head[0m
[32m+  71:             [0m
[32m+  72:             while node.next is not None:[0m
[32m+  73:                 node = node.next[0m
   74:             
[34m-  75:             new_node = SinglyLinkedNode(data)[0m
[34m-  76:             [0m
[32m+  75:             [0m
[32m+  76:             new_node = SinglyLinkedNode(data)[0m
   77:             
[34m-  78:             node.next = new_node[0m
[34m-  79:         [0m
[34m-  80:         self.size += 1[0m
[34m-  81: [0m
[32m+  78:             [0m
[32m+  79:             node.next = new_node[0m
[32m+  80:         [0m
[32m+  81:         self.size += 1[0m
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
--------------------------------------------------------------------------------
[0.17260 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:44: TypeError: SinglyLinkedList.append() missing 1 required positional argument: 'data'

[36m   -[0m [#  97] SDI linkedList1: 
--------------------------------------------------------------------------------
   80:         self.size += 1
   81: 
   82: 
   83: class SinglyLinkedNode(object):
[34m-  84:     def __init__(self, data):[0m
[34m-  85:         self.data = data[0m
[34m-  86:         self.next = None[0m
[34m-  87: [0m
[32m+  84:     @staticmethod[0m
[32m+  85:     def __init__(self, data):[0m
[32m+  86:         self.data = data[0m
[32m+  87:         self.next = None[0m
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
--------------------------------------------------------------------------------
[0.25987 s] [36mincompetent[0m

TypeError: linkedList1:177: TypeError: SinglyLinkedNode.__init__() missing 1 required positional argument: 'data'

[36m   -[0m [#  98] SDI linkedList1: 
--------------------------------------------------------------------------------
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
[34m-  90:     def __init__(self):[0m
[34m-  91:         [0m
[34m-  92:         super(DoublyLinkedList, self).__init__()[0m
[34m-  93:     [0m
[32m+  90:     @staticmethod[0m
[32m+  91:     def __init__(self):[0m
[32m+  92:         [0m
[32m+  93:         super(DoublyLinkedList, self).__init__()[0m
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
--------------------------------------------------------------------------------
[0.16897 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:6: TypeError: DoublyLinkedList.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [#  99] SDI linkedList1: 
--------------------------------------------------------------------------------
   90:     def __init__(self):
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
[34m-  94:     def previous(self):[0m
[34m-  95:         if self.cursor.prev is None:[0m
[34m-  96:             raise StopIteration()[0m
[34m-  97:         else:[0m
[34m-  98:             self.cursor.prev[0m
[34m-  99:             self.cursor = self.cursor.prev[0m
[34m- 100:             return self.cursor.data[0m
[34m- 101:     [0m
[32m+  94:     @staticmethod[0m
[32m+  95:     def previous(self):[0m
[32m+  96:         if self.cursor.prev is None:[0m
[32m+  97:             raise StopIteration()[0m
[32m+  98:         else:[0m
[32m+  99:             self.cursor.prev[0m
[32m+ 100:             self.cursor = self.cursor.prev[0m
[32m+ 101:             return self.cursor.data[0m
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
--------------------------------------------------------------------------------
[0.19758 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:193: TypeError: DoublyLinkedList.previous() missing 1 required positional argument: 'self'

[36m   -[0m [# 100] SDI linkedList1: 
--------------------------------------------------------------------------------
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
[34m- 102:     def append(self, data):[0m
[34m- 103:         ''' Note: The average time for append is O(n)[0m
[34m- 104:             however, insertion is O(1), giving it an[0m
[34m- 105:             advantage over arrays.[0m
[34m- 106:         '''[0m
[34m- 107:         if self.head is None:[0m
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[34m- 109:             self.cursor = self.head[0m
[34m- 110:         else:[0m
[34m- 111:             node = self.head[0m
[34m- 112:             [0m
[34m- 113:             while node.next is not None:[0m
[34m- 114:                 node = node.next[0m
[34m- 115:             [0m
[32m+ 102:     @staticmethod[0m
[32m+ 103:     def append(self, data):[0m
[32m+ 104:         ''' Note: The average time for append is O(n)[0m
[32m+ 105:             however, insertion is O(1), giving it an[0m
[32m+ 106:             advantage over arrays.[0m
[32m+ 107:         '''[0m
[32m+ 108:         if self.head is None:[0m
[32m+ 109:             self.head = DoublyLinkedNode(data)[0m
[32m+ 110:             self.cursor = self.head[0m
[32m+ 111:         else:[0m
[32m+ 112:             node = self.head[0m
[32m+ 113:             [0m
[32m+ 114:             while node.next is not None:[0m
[32m+ 115:                 node = node.next[0m
  116:             
[34m- 117:             new_node = DoublyLinkedNode(data)[0m
[34m- 118:             node.next = new_node[0m
[34m- 119:             new_node.prev = node[0m
[34m- 120:         self.size += 1[0m
[34m- 121:     [0m
[32m+ 117:             [0m
[32m+ 118:             new_node = DoublyLinkedNode(data)[0m
[32m+ 119:             node.next = new_node[0m
[32m+ 120:             new_node.prev = node[0m
[32m+ 121:         self.size += 1[0m
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
--------------------------------------------------------------------------------
[0.17268 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:12: TypeError: DoublyLinkedList.append() missing 1 required positional argument: 'data'

[36m   -[0m [# 101] SDI linkedList1: 
--------------------------------------------------------------------------------
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
[34m- 122:     def insert(self, data, index):[0m
[34m- 123:         if index >= self.size:[0m
[34m- 124:             raise IndexError()[0m
[34m- 125:         if self.head is None:[0m
[34m- 126:             self.head = DoublyLinkedNode(data)[0m
[34m- 127:             self.cursor = self.head[0m
[34m- 128:         [0m
[32m+ 122:     @staticmethod[0m
[32m+ 123:     def insert(self, data, index):[0m
[32m+ 124:         if index >= self.size:[0m
[32m+ 125:             raise IndexError()[0m
[32m+ 126:         if self.head is None:[0m
[32m+ 127:             self.head = DoublyLinkedNode(data)[0m
[32m+ 128:             self.cursor = self.head[0m
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[34m- 131:             [0m
[34m- 132:             self.append(data)[0m
[34m- 133:         [0m
[34m- 134:         elif index == 0:[0m
[34m- 135:             [0m
[32m+ 130:         [0m
[32m+ 131:         elif index == self.size - 1:[0m
[32m+ 132:             [0m
[32m+ 133:             self.append(data)[0m
[32m+ 134:         [0m
[32m+ 135:         elif index == 0:[0m
  136:             
  137:             
[34m- 138:             a = self.head[0m
[34m- 139:             c = DoublyLinkedNode(data)[0m
[34m- 140:             [0m
[32m+ 138:             [0m
[32m+ 139:             a = self.head[0m
[32m+ 140:             c = DoublyLinkedNode(data)[0m
  141:             
  142:             
  143:             
[34m- 144:             self.head = c[0m
[34m- 145:             c.next = a[0m
[34m- 146:             a.prev = c[0m
[34m- 147:             self.cursor = self.head[0m
[34m- 148:         else:[0m
[34m- 149:             [0m
[34m- 150:             a = self.head[0m
[34m- 151:             for x in range(index - 1):[0m
[34m- 152:                 a = a.next[0m
[34m- 153:             [0m
[32m+ 144:             [0m
[32m+ 145:             self.head = c[0m
[32m+ 146:             c.next = a[0m
[32m+ 147:             a.prev = c[0m
[32m+ 148:             self.cursor = self.head[0m
[32m+ 149:         else:[0m
[32m+ 150:             [0m
[32m+ 151:             a = self.head[0m
[32m+ 152:             for x in range(index - 1):[0m
[32m+ 153:                 a = a.next[0m
  154:             
  155:             
[34m- 156:             b = a.next[0m
[34m- 157:             c = DoublyLinkedNode(data)[0m
[34m- 158:             [0m
[32m+ 156:             [0m
[32m+ 157:             b = a.next[0m
[32m+ 158:             c = DoublyLinkedNode(data)[0m
  159:             
  160:             
  161:             
[34m- 162:             b.prev = c[0m
[34m- 163:             c.next = b[0m
[34m- 164:             [0m
[32m+ 162:             [0m
[32m+ 163:             b.prev = c[0m
[32m+ 164:             c.next = b[0m
  165:             
  166:             
  167:             
[34m- 168:             a.next = c[0m
[34m- 169:             c.prev = a[0m
[34m- 170:         [0m
[34m- 171:         self.size += 1[0m
[34m- 172: [0m
[32m+ 168:             [0m
[32m+ 169:             a.next = c[0m
[32m+ 170:             c.prev = a[0m
[32m+ 171:         [0m
[32m+ 172:         self.size += 1[0m
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
--------------------------------------------------------------------------------
[0.18661 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:239: TypeError: DoublyLinkedList.insert() missing 1 required positional argument: 'index'

[36m   -[0m [# 102] SDI linkedList1: 
--------------------------------------------------------------------------------
  171:         self.size += 1
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
[34m- 175:     def __init__(self, data):[0m
[34m- 176:         [0m
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[34m- 178:         self.prev = None[0m
[34m- 179: [0m
[32m+ 175:     @staticmethod[0m
[32m+ 176:     def __init__(self, data):[0m
[32m+ 177:         [0m
[32m+ 178:         super(DoublyLinkedNode, self).__init__(data)[0m
[32m+ 179:         self.prev = None[0m
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
--------------------------------------------------------------------------------
[0.18361 s] [36mincompetent[0m

TypeError: linkedList1:108: TypeError: DoublyLinkedNode.__init__() missing 1 required positional argument: 'data'

[36m   -[0m [# 103] SDL linkedList1: 
--------------------------------------------------------------------------------
    3:     thomas moll 2015
    4: '''
    5: 
    6: class SinglyLinkedList(object):
[34m-   7:     __next__ = next[0m
[32m+   7:     pass[0m
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
--------------------------------------------------------------------------------
[0.25414 s] [31msurvived[0m
[36m   -[0m [# 104] SDL linkedList1: 
--------------------------------------------------------------------------------
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
    9:     def __init__(self):
[34m-  10:         self.head = None[0m
[32m+  10:         pass[0m
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
--------------------------------------------------------------------------------
[0.18707 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = doubly_linked_list_0.append(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc301c0>
data = <linkedList1.DoublyLinkedList object at 0x7fc09bc301c0>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'head'

linkedList1:107: AttributeError
[36m   -[0m [# 105] SDL linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
[34m-  11:         self.size = 0[0m
[32m+  11:         pass[0m
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[0.18593 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

MIO/test_linkedList1_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bda5000>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
[36m   -[0m [# 106] SDL linkedList1: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
[34m-  12:         self.cursor = None[0m
[32m+  12:         pass[0m
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
--------------------------------------------------------------------------------
[0.18345 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_12

def test_case_12():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b92ce50>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'cursor'

linkedList1:53: AttributeError
[36m   -[0m [# 107] SDL linkedList1: 
--------------------------------------------------------------------------------
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
[34m-  15:         return self.size[0m
[32m+  15:         pass[0m
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
--------------------------------------------------------------------------------
[0.18936 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:7: TypeError: 'NoneType' object cannot be interpreted as an integer

[36m   -[0m [# 108] SDL linkedList1: 
--------------------------------------------------------------------------------
   14:     def __len__(self):
   15:         return self.size
   16:     
   17:     def __iter__(self):
[34m-  18:         return self[0m
[32m+  18:         pass[0m
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
--------------------------------------------------------------------------------
[0.18799 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/linkedList1/MIO/test_linkedList1_MIO.py:54: TypeError: object of type 'NoneType' has no len()

[36m   -[0m [# 109] SDL linkedList1: 
--------------------------------------------------------------------------------
   18:         return self
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
[34m-  22:             cur = self.head[0m
[32m+  22:             pass[0m
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
--------------------------------------------------------------------------------
[0.18543 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcb67d0>
item = <linkedList1.DoublyLinkedList object at 0x7fc09bcb67d0>

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:23: UnboundLocalError
[36m   -[0m [# 110] SDL linkedList1: 
--------------------------------------------------------------------------------
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
[34m-  25:                     return True[0m
[32m+  25:                     pass[0m
   26:                 cur = cur.next
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
--------------------------------------------------------------------------------
[0.24701 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [# 111] SDL linkedList1: 
--------------------------------------------------------------------------------
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
[34m-  26:                 cur = cur.next[0m
[32m+  26:                 pass[0m
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
--------------------------------------------------------------------------------
[5.00814 s] [33mtimeout[0m
[36m   -[0m [# 112] SDL linkedList1: 
--------------------------------------------------------------------------------
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
[34m-  27:         return False[0m
[32m+  27:         pass[0m
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
   31:         for linked lists they run in O(n) time making them less
--------------------------------------------------------------------------------
[0.18713 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_2

def test_case_2():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(var_0)
>       assert var_1 is False
E       AssertionError

MIO/test_linkedList1_MIO.py:23: AssertionError
[36m   -[0m [# 113] SDL linkedList1: 
--------------------------------------------------------------------------------
   25:                     return True
   26:                 cur = cur.next
   27:         return False
   28:     
[34m-  29:     ''' Both getitem and setitem represent the magic methods[0m
[34m-  30:         for the object[index] and object[index] = other operations[0m
[34m-  31:         for linked lists they run in O(n) time making them less[0m
[34m-  32:         efficient than a list() for lookups[0m
[34m-  33:     '''[0m
[32m+  29:     pass[0m
[32m+  30:     [0m
[32m+  31:     [0m
[32m+  32:     [0m
[32m+  33:     [0m
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
--------------------------------------------------------------------------------
[0.17656 s] [31msurvived[0m
[36m   -[0m [# 114] SDL linkedList1: 
--------------------------------------------------------------------------------
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
[34m-  38:             cur = self.head[0m
[32m+  38:             pass[0m
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
--------------------------------------------------------------------------------
[0.18161 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b990610>, index = True

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:40: UnboundLocalError
[36m   -[0m [# 115] SDL linkedList1: 
--------------------------------------------------------------------------------
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
[34m-  40:                 cur = cur.next[0m
[32m+  40:                 pass[0m
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
--------------------------------------------------------------------------------
[0.17641 s] [31msurvived[0m
[36m   -[0m [# 116] SDL linkedList1: 
--------------------------------------------------------------------------------
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
   40:                 cur = cur.next
[34m-  41:             return cur.data[0m
[32m+  41:             pass[0m
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
--------------------------------------------------------------------------------
[0.23867 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
        var_5 = singly_linked_list_0.__getitem__(bool_0)
>       assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList1.SinglyLinkedList'
E       AssertionError

MIO/test_linkedList1_MIO.py:63: AssertionError
[36m   -[0m [# 117] SDL linkedList1: 
--------------------------------------------------------------------------------
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
[34m-  47:             cur = self.head[0m
[32m+  47:             pass[0m
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
--------------------------------------------------------------------------------
[0.19702 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcc8700>, index = False
value = False

>   ???
E   UnboundLocalError: local variable 'cur' referenced before assignment

linkedList1:50: UnboundLocalError
[36m   -[0m [# 118] SDL linkedList1: 
--------------------------------------------------------------------------------
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
[34m-  49:                 cur = cur.next[0m
[32m+  49:                 pass[0m
   50:             cur.data = value
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
--------------------------------------------------------------------------------
[0.15967 s] [31msurvived[0m
[36m   -[0m [# 119] SDL linkedList1: 
--------------------------------------------------------------------------------
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
   49:                 cur = cur.next
[34m-  50:             cur.data = value[0m
[32m+  50:             pass[0m
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
--------------------------------------------------------------------------------
[0.17484 s] [31msurvived[0m
[36m   -[0m [# 120] SDL linkedList1: 
--------------------------------------------------------------------------------
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
[34m-  56:             node = self.cursor.data[0m
[32m+  56:             pass[0m
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
--------------------------------------------------------------------------------
[0.18683 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bd1e5f0>

>   ???
E   NameError: name 'node' is not defined

linkedList1:58: NameError
[36m   -[0m [# 121] SDL linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
[34m-  57:             self.cursor = self.cursor.next[0m
[32m+  57:             pass[0m
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.20229 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
>       var_3 = var_2.previous()

MIO/test_linkedList1_MIO.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcc5180>

>   ???
E   StopIteration

linkedList1:96: StopIteration
[36m   -[0m [# 122] SDL linkedList1: 
--------------------------------------------------------------------------------
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
[34m-  58:             return node[0m
[32m+  58:             pass[0m
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[0.18684 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
E       AssertionError

MIO/test_linkedList1_MIO.py:47: AssertionError
[36m   -[0m [# 123] SDL linkedList1: 
--------------------------------------------------------------------------------
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
[34m-  66:             self.head = SinglyLinkedNode(data)[0m
[32m+  66:             pass[0m
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
--------------------------------------------------------------------------------
[0.26151 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bbedf30>

>   ???
E   StopIteration

linkedList1:54: StopIteration
[36m   -[0m [# 124] SDL linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
[34m-  67:             self.cursor = self.head[0m
[32m+  67:             pass[0m
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[0.16968 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bcc49a0>

>   ???
E   StopIteration

linkedList1:54: StopIteration
[36m   -[0m [# 125] SDL linkedList1: 
--------------------------------------------------------------------------------
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
[34m-  69:             node = self.head[0m
[32m+  69:             pass[0m
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
--------------------------------------------------------------------------------
[0.19002 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
>       var_4 = var_3.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bcdc610>
data = <linkedList1.SinglyLinkedList object at 0x7fc09bcdc610>

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

linkedList1:71: UnboundLocalError
[36m   -[0m [# 126] SDL linkedList1: 
--------------------------------------------------------------------------------
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
[34m-  72:                 node = node.next[0m
[32m+  72:                 pass[0m
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
--------------------------------------------------------------------------------
[5.00819 s] [33mtimeout[0m
[36m   -[0m [# 127] SDL linkedList1: 
--------------------------------------------------------------------------------
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
   74:             
[34m-  75:             new_node = SinglyLinkedNode(data)[0m
[32m+  75:             pass[0m
   76:             
   77:             
   78:             node.next = new_node
   79:         
--------------------------------------------------------------------------------
[0.19103 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
>       var_4 = var_3.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bda7460>
data = <linkedList1.SinglyLinkedList object at 0x7fc09bda7460>

>   ???
E   NameError: name 'new_node' is not defined

linkedList1:78: NameError
[36m   -[0m [# 128] SDL linkedList1: 
--------------------------------------------------------------------------------
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
   77:             
[34m-  78:             node.next = new_node[0m
[32m+  78:             pass[0m
   79:         
   80:         self.size += 1
   81: 
   82: 
--------------------------------------------------------------------------------
[0.18937 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bd0c3d0>, index = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList1:41: AttributeError
[36m   -[0m [# 129] SDL linkedList1: 
--------------------------------------------------------------------------------
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
[34m-  85:         self.data = data[0m
[32m+  85:         pass[0m
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
--------------------------------------------------------------------------------
[0.18353 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b8480d0>
item = <linkedList1.DoublyLinkedList object at 0x7fc09b8480d0>

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'data'

linkedList1:24: AttributeError
[36m   -[0m [# 130] SDL linkedList1: 
--------------------------------------------------------------------------------
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
[34m-  86:         self.next = None[0m
[32m+  86:         pass[0m
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
--------------------------------------------------------------------------------
[0.25960 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_2

def test_case_2():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(var_0)

MIO/test_linkedList1_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbc880>, item = None

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'next'

linkedList1:26: AttributeError
[36m   -[0m [# 131] SDL linkedList1: 
--------------------------------------------------------------------------------
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
   91:         
[34m-  92:         super(DoublyLinkedList, self).__init__()[0m
[32m+  92:         pass[0m
   93:     
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
--------------------------------------------------------------------------------
[0.18683 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

MIO/test_linkedList1_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bbc6200>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute 'size'

linkedList1:15: AttributeError
[36m   -[0m [# 132] SDL linkedList1: 
--------------------------------------------------------------------------------
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
[34m-  98:             self.cursor.prev[0m
[32m+  98:             pass[0m
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
--------------------------------------------------------------------------------
[0.17636 s] [31msurvived[0m
[36m   -[0m [# 133] SDL linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
[34m-  99:             self.cursor = self.cursor.prev[0m
[32m+  99:             pass[0m
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.17594 s] [31msurvived[0m
[36m   -[0m [# 134] SDL linkedList1: 
--------------------------------------------------------------------------------
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
[34m- 100:             return self.cursor.data[0m
[32m+ 100:             pass[0m
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[0.18266 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
        var_3 = var_2.previous()
>       assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList1.DoublyLinkedList'
E       AssertionError

MIO/test_linkedList1_MIO.py:206: AssertionError
[36m   -[0m [# 135] SDL linkedList1: 
--------------------------------------------------------------------------------
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[32m+ 108:             pass[0m
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
--------------------------------------------------------------------------------
[0.18744 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [# 136] SDL linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
[34m- 109:             self.cursor = self.head[0m
[32m+ 109:             pass[0m
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[0.27098 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_13

def test_case_13():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bb05120>

>   ???
E   StopIteration

linkedList1:54: StopIteration
[36m   -[0m [# 137] SDL linkedList1: 
--------------------------------------------------------------------------------
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
[34m- 111:             node = self.head[0m
[32m+ 111:             pass[0m
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
--------------------------------------------------------------------------------
[0.18469 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.append(var_0)

MIO/test_linkedList1_MIO.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bcc67a0>, data = None

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

linkedList1:113: UnboundLocalError
[36m   -[0m [# 138] SDL linkedList1: 
--------------------------------------------------------------------------------
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
[34m- 114:                 node = node.next[0m
[32m+ 114:                 pass[0m
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
--------------------------------------------------------------------------------
[5.00625 s] [33mtimeout[0m
[36m   -[0m [# 139] SDL linkedList1: 
--------------------------------------------------------------------------------
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
  116:             
[34m- 117:             new_node = DoublyLinkedNode(data)[0m
[32m+ 117:             pass[0m
  118:             node.next = new_node
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
--------------------------------------------------------------------------------
[0.18668 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.append(var_0)

MIO/test_linkedList1_MIO.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc3b820>, data = None

>   ???
E   NameError: name 'new_node' is not defined

linkedList1:118: NameError
[36m   -[0m [# 140] SDL linkedList1: 
--------------------------------------------------------------------------------
  114:                 node = node.next
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
[34m- 118:             node.next = new_node[0m
[32m+ 118:             pass[0m
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
--------------------------------------------------------------------------------
[0.18925 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(var_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.__contains__(var_0)
>       assert var_2 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:33: AssertionError
[36m   -[0m [# 141] SDL linkedList1: 
--------------------------------------------------------------------------------
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
[34m- 119:             new_node.prev = node[0m
[32m+ 119:             pass[0m
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
--------------------------------------------------------------------------------
[0.20147 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
>       var_3 = var_2.previous()

MIO/test_linkedList1_MIO.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bbc5f00>

>   ???
E   StopIteration

linkedList1:96: StopIteration
[36m   -[0m [# 142] SDL linkedList1: 
--------------------------------------------------------------------------------
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
[34m- 126:             self.head = DoublyLinkedNode(data)[0m
[32m+ 126:             pass[0m
  127:             self.cursor = self.head
  128:         
  129:         
  130:         elif index == self.size - 1:
--------------------------------------------------------------------------------
[0.17569 s] [31msurvived[0m
[36m   -[0m [# 143] SDL linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
[34m- 127:             self.cursor = self.head[0m
[32m+ 127:             pass[0m
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[0.24585 s] [31msurvived[0m
[36m   -[0m [# 144] SDL linkedList1: 
--------------------------------------------------------------------------------
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
[34m- 132:             self.append(data)[0m
[32m+ 132:             pass[0m
  133:         
  134:         elif index == 0:
  135:             
  136:             
--------------------------------------------------------------------------------
[0.19317 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_25

def test_case_25():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        none_type_0 = None
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.insert(bool_0, bool_0)
>       assert len(doubly_linked_list_0) == 3
E       AssertionError

MIO/test_linkedList1_MIO.py:265: AssertionError
[36m   -[0m [# 145] SDL linkedList1: 
--------------------------------------------------------------------------------
  134:         elif index == 0:
  135:             
  136:             
  137:             
[34m- 138:             a = self.head[0m
[32m+ 138:             pass[0m
  139:             c = DoublyLinkedNode(data)
  140:             
  141:             
  142:             
--------------------------------------------------------------------------------
[0.20979 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_28

def test_case_28():
        none_type_0 = None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        bool_0 = False
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        complex_0 = -4.22462 + 34.2935j
        var_1 = doubly_linked_list_1.__contains__(complex_0)
        var_2 = doubly_linked_list_1.__contains__(complex_0)
        var_3 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 1
        var_4 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 2
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_0)
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = 'Jd#i'
        str_1 = 'RWYrhbFCiOg.Uub5hm`'
        singly_linked_node_0 = module_0.SinglyLinkedNode(str_1)
>       var_5 = doubly_linked_list_1.insert(str_0, bool_0)

MIO/test_linkedList1_MIO.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc43370>, data = 'Jd#i'
index = False

>   ???
E   UnboundLocalError: local variable 'a' referenced before assignment

linkedList1:145: UnboundLocalError
[36m   -[0m [# 146] SDL linkedList1: 
--------------------------------------------------------------------------------
  135:             
  136:             
  137:             
  138:             a = self.head
[34m- 139:             c = DoublyLinkedNode(data)[0m
[32m+ 139:             pass[0m
  140:             
  141:             
  142:             
  143:             
--------------------------------------------------------------------------------
[0.20842 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_28

def test_case_28():
        none_type_0 = None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        bool_0 = False
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        complex_0 = -4.22462 + 34.2935j
        var_1 = doubly_linked_list_1.__contains__(complex_0)
        var_2 = doubly_linked_list_1.__contains__(complex_0)
        var_3 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 1
        var_4 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 2
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_0)
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = 'Jd#i'
        str_1 = 'RWYrhbFCiOg.Uub5hm`'
        singly_linked_node_0 = module_0.SinglyLinkedNode(str_1)
>       var_5 = doubly_linked_list_1.insert(str_0, bool_0)

MIO/test_linkedList1_MIO.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc336d0>, data = 'Jd#i'
index = False

>   ???
E   UnboundLocalError: local variable 'c' referenced before assignment

linkedList1:144: UnboundLocalError
[36m   -[0m [# 147] SDL linkedList1: 
--------------------------------------------------------------------------------
  140:             
  141:             
  142:             
  143:             
[34m- 144:             self.head = c[0m
[32m+ 144:             pass[0m
  145:             c.next = a
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
--------------------------------------------------------------------------------
[0.17795 s] [31msurvived[0m
[36m   -[0m [# 148] SDL linkedList1: 
--------------------------------------------------------------------------------
  141:             
  142:             
  143:             
  144:             self.head = c
[34m- 145:             c.next = a[0m
[32m+ 145:             pass[0m
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
--------------------------------------------------------------------------------
[0.17561 s] [31msurvived[0m
[36m   -[0m [# 149] SDL linkedList1: 
--------------------------------------------------------------------------------
  142:             
  143:             
  144:             self.head = c
  145:             c.next = a
[34m- 146:             a.prev = c[0m
[32m+ 146:             pass[0m
  147:             self.cursor = self.head
  148:         else:
  149:             
  150:             a = self.head
--------------------------------------------------------------------------------
[0.17501 s] [31msurvived[0m
[36m   -[0m [# 150] SDL linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
[34m- 147:             self.cursor = self.head[0m
[32m+ 147:             pass[0m
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[0.24469 s] [31msurvived[0m
[36m   -[0m [# 151] SDL linkedList1: 
--------------------------------------------------------------------------------
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
[34m- 150:             a = self.head[0m
[32m+ 150:             pass[0m
  151:             for x in range(index - 1):
  152:                 a = a.next
  153:             
  154:             
--------------------------------------------------------------------------------
[0.20342 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbcfa0>, data = -2627
index = -2627

>   ???
E   UnboundLocalError: local variable 'a' referenced before assignment

linkedList1:156: UnboundLocalError
[36m   -[0m [# 152] SDL linkedList1: 
--------------------------------------------------------------------------------
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
[34m- 152:                 a = a.next[0m
[32m+ 152:                 pass[0m
  153:             
  154:             
  155:             
  156:             b = a.next
--------------------------------------------------------------------------------
[0.15646 s] [31msurvived[0m
[36m   -[0m [# 153] SDL linkedList1: 
--------------------------------------------------------------------------------
  152:                 a = a.next
  153:             
  154:             
  155:             
[34m- 156:             b = a.next[0m
[32m+ 156:             pass[0m
  157:             c = DoublyLinkedNode(data)
  158:             
  159:             
  160:             
--------------------------------------------------------------------------------
[0.20507 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbee30>, data = -2627
index = -2627

>   ???
E   NameError: name 'b' is not defined

linkedList1:162: NameError
[36m   -[0m [# 154] SDL linkedList1: 
--------------------------------------------------------------------------------
  153:             
  154:             
  155:             
  156:             b = a.next
[34m- 157:             c = DoublyLinkedNode(data)[0m
[32m+ 157:             pass[0m
  158:             
  159:             
  160:             
  161:             
--------------------------------------------------------------------------------
[0.20575 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc382e0>, data = -2627
index = -2627

>   ???
E   UnboundLocalError: local variable 'c' referenced before assignment

linkedList1:162: UnboundLocalError
[36m   -[0m [# 155] SDL linkedList1: 
--------------------------------------------------------------------------------
  158:             
  159:             
  160:             
  161:             
[34m- 162:             b.prev = c[0m
[32m+ 162:             pass[0m
  163:             c.next = b
  164:             
  165:             
  166:             
--------------------------------------------------------------------------------
[0.17458 s] [31msurvived[0m
[36m   -[0m [# 156] SDL linkedList1: 
--------------------------------------------------------------------------------
  159:             
  160:             
  161:             
  162:             b.prev = c
[34m- 163:             c.next = b[0m
[32m+ 163:             pass[0m
  164:             
  165:             
  166:             
  167:             
--------------------------------------------------------------------------------
[0.17924 s] [31msurvived[0m
[36m   -[0m [# 157] SDL linkedList1: 
--------------------------------------------------------------------------------
  164:             
  165:             
  166:             
  167:             
[34m- 168:             a.next = c[0m
[32m+ 168:             pass[0m
  169:             c.prev = a
  170:         
  171:         self.size += 1
  172: 
--------------------------------------------------------------------------------
[0.17486 s] [31msurvived[0m
[36m   -[0m [# 158] SDL linkedList1: 
--------------------------------------------------------------------------------
  165:             
  166:             
  167:             
  168:             a.next = c
[34m- 169:             c.prev = a[0m
[32m+ 169:             pass[0m
  170:         
  171:         self.size += 1
  172: 
  173: 
--------------------------------------------------------------------------------
[0.17704 s] [31msurvived[0m
[36m   -[0m [# 159] SDL linkedList1: 
--------------------------------------------------------------------------------
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
[34m- 177:         super(DoublyLinkedNode, self).__init__(data)[0m
[32m+ 177:         pass[0m
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
--------------------------------------------------------------------------------
[0.17489 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdedb40>
item = <linkedList1.DoublyLinkedList object at 0x7fc09bdedb40>

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'data'

linkedList1:24: AttributeError
[36m   -[0m [# 160] SDL linkedList1: 
--------------------------------------------------------------------------------
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
[34m- 178:         self.prev = None[0m
[32m+ 178:         pass[0m
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[0.20550 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdbf880>

>   ???
E   AttributeError: 'DoublyLinkedNode' object has no attribute 'prev'

linkedList1:95: AttributeError
[36m   -[0m [# 161] SDL linkedList1: 
--------------------------------------------------------------------------------
  177:         super(DoublyLinkedNode, self).__init__(data)
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
[34m- 181:     test = SinglyLinkedList()[0m
[32m+ 181:     pass[0m
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
--------------------------------------------------------------------------------
[0.17828 s] [31msurvived[0m
[36m   -[0m [# 162] SDL linkedList1: 
--------------------------------------------------------------------------------
  178:         self.prev = None
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
[34m- 182:     test.append(2)[0m
[32m+ 182:     pass[0m
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
--------------------------------------------------------------------------------
[0.17100 s] [31msurvived[0m
[36m   -[0m [# 163] SDL linkedList1: 
--------------------------------------------------------------------------------
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
[34m- 183:     test.append(3)[0m
[32m+ 183:     pass[0m
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
--------------------------------------------------------------------------------
[0.23858 s] [31msurvived[0m
[36m   -[0m [# 164] SDL linkedList1: 
--------------------------------------------------------------------------------
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
  183:     test.append(3)
[34m- 184:     test.append(4)[0m
[32m+ 184:     pass[0m
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
--------------------------------------------------------------------------------
[0.15889 s] [31msurvived[0m
[36m   -[0m [# 165] SDL linkedList1: 
--------------------------------------------------------------------------------
  182:     test.append(2)
  183:     test.append(3)
  184:     test.append(4)
  185:     
[34m- 186:     print(test[0])[0m
[32m+ 186:     pass[0m
  187:     print(test[1])
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.16930 s] [31msurvived[0m
[36m   -[0m [# 166] SDL linkedList1: 
--------------------------------------------------------------------------------
  183:     test.append(3)
  184:     test.append(4)
  185:     
  186:     print(test[0])
[34m- 187:     print(test[1])[0m
[32m+ 187:     pass[0m
  188:     print(test[2])
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.17563 s] [31msurvived[0m
[36m   -[0m [# 167] SDL linkedList1: 
--------------------------------------------------------------------------------
  184:     test.append(4)
  185:     
  186:     print(test[0])
  187:     print(test[1])
[34m- 188:     print(test[2])[0m
[32m+ 188:     pass[0m
  189:     print(test[-1])
--------------------------------------------------------------------------------
[0.17604 s] [31msurvived[0m
[36m   -[0m [# 168] SDL linkedList1: 
--------------------------------------------------------------------------------
  185:     
  186:     print(test[0])
  187:     print(test[1])
  188:     print(test[2])
[34m- 189:     print(test[-1])[0m
[32m+ 189:     pass[0m
--------------------------------------------------------------------------------
[0.17623 s] [31msurvived[0m
[36m   -[0m [# 169] SVD linkedList1: 
--------------------------------------------------------------------------------
    6: class SinglyLinkedList(object):
    7:     __next__ = next
    8:     
    9:     def __init__(self):
[34m-  10:         self.head = None[0m
[32m+  10:         head = None[0m
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 170] SVD linkedList1: 
--------------------------------------------------------------------------------
    7:     __next__ = next
    8:     
    9:     def __init__(self):
   10:         self.head = None
[34m-  11:         self.size = 0[0m
[32m+  11:         size = 0[0m
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
   15:         return self.size
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 171] SVD linkedList1: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self):
   10:         self.head = None
   11:         self.size = 0
[34m-  12:         self.cursor = None[0m
[32m+  12:         cursor = None[0m
   13:     
   14:     def __len__(self):
   15:         return self.size
   16:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 172] SVD linkedList1: 
--------------------------------------------------------------------------------
   11:         self.size = 0
   12:         self.cursor = None
   13:     
   14:     def __len__(self):
[34m-  15:         return self.size[0m
[32m+  15:         return size[0m
   16:     
   17:     def __iter__(self):
   18:         return self
   19:     
--------------------------------------------------------------------------------
[0.18652 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_0

def test_case_0():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

MIO/test_linkedList1_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09be2b7f0>

>   ???
E   NameError: name 'size' is not defined

linkedList1:15: NameError
[36m   -[0m [# 173] SVD linkedList1: 
--------------------------------------------------------------------------------
   17:     def __iter__(self):
   18:         return self
   19:     
   20:     def __contains__(self, item):
[34m-  21:         if self.head is not None:[0m
[32m+  21:         if head is not None:[0m
   22:             cur = self.head
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
--------------------------------------------------------------------------------
[0.18708 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b8d5390>
item = <linkedList1.DoublyLinkedList object at 0x7fc09b8d5390>

>   ???
E   NameError: name 'head' is not defined

linkedList1:21: NameError
[36m   -[0m [# 174] SVD linkedList1: 
--------------------------------------------------------------------------------
   18:         return self
   19:     
   20:     def __contains__(self, item):
   21:         if self.head is not None:
[34m-  22:             cur = self.head[0m
[32m+  22:             cur = head[0m
   23:             while cur is not None:
   24:                 if cur.data is item:
   25:                     return True
   26:                 cur = cur.next
--------------------------------------------------------------------------------
[0.18495 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc569e0>
item = <linkedList1.DoublyLinkedList object at 0x7fc09bc569e0>

>   ???
E   NameError: name 'head' is not defined

linkedList1:22: NameError
[36m   -[0m [# 175] SVD linkedList1: 
--------------------------------------------------------------------------------
   31:         for linked lists they run in O(n) time making them less
   32:         efficient than a list() for lookups
   33:     '''
   34:     def __getitem__(self, index):
[34m-  35:         if (index >= self.size or index < 0):[0m
[32m+  35:         if (index >= size or index < 0):[0m
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
--------------------------------------------------------------------------------
[0.18981 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b937190>, index = True

>   ???
E   NameError: name 'size' is not defined

linkedList1:35: NameError
[36m   -[0m [# 176] SVD linkedList1: 
--------------------------------------------------------------------------------
   34:     def __getitem__(self, index):
   35:         if (index >= self.size or index < 0):
   36:             raise IndexError()
   37:         else:
[34m-  38:             cur = self.head[0m
[32m+  38:             cur = head[0m
   39:             for x in range(index):
   40:                 cur = cur.next
   41:             return cur.data
   42:     
--------------------------------------------------------------------------------
[0.26459 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
        var_4 = var_3.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 2
        assert len(var_1) == 2
        assert len(var_3) == 2
>       var_5 = singly_linked_list_0.__getitem__(bool_0)

MIO/test_linkedList1_MIO.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bc54340>, index = True

>   ???
E   NameError: name 'head' is not defined

linkedList1:38: NameError
[36m   -[0m [# 177] SVD linkedList1: 
--------------------------------------------------------------------------------
   40:                 cur = cur.next
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
[34m-  44:         if (index >= self.size or index < 0):[0m
[32m+  44:         if (index >= size or index < 0):[0m
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
--------------------------------------------------------------------------------
[0.19538 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09be29cc0>, index = False
value = False

>   ???
E   NameError: name 'size' is not defined

linkedList1:44: NameError
[36m   -[0m [# 178] SVD linkedList1: 
--------------------------------------------------------------------------------
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
   45:             raise IndexError()
   46:         else:
[34m-  47:             cur = self.head[0m
[32m+  47:             cur = head[0m
   48:             for x in range(index):
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
--------------------------------------------------------------------------------
[0.19643 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_9

def test_case_9():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.__setitem__(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b78c670>, index = False
value = False

>   ???
E   NameError: name 'head' is not defined

linkedList1:47: NameError
[36m   -[0m [# 179] SVD linkedList1: 
--------------------------------------------------------------------------------
   49:                 cur = cur.next
   50:             cur.data = value
   51:     
   52:     def next(self):
[34m-  53:         if self.cursor is None:[0m
[32m+  53:         if cursor is None:[0m
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
   57:             self.cursor = self.cursor.next
--------------------------------------------------------------------------------
[0.17297 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bc3a110>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:53: NameError
[36m   -[0m [# 180] SVD linkedList1: 
--------------------------------------------------------------------------------
   52:     def next(self):
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
[34m-  56:             node = self.cursor.data[0m
[32m+  56:             node = cursor.data[0m
   57:             self.cursor = self.cursor.next
   58:             return node
   59:     
   60:     def append(self, data):
--------------------------------------------------------------------------------
[0.18398 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b914d00>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:56: NameError
[36m   -[0m [# 181] SVD linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
[34m-  57:             self.cursor = self.cursor.next[0m
[32m+  57:             cursor = self.cursor.next[0m
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 182] SVD linkedList1: 
--------------------------------------------------------------------------------
   53:         if self.cursor is None:
   54:             raise StopIteration()
   55:         else:
   56:             node = self.cursor.data
[34m-  57:             self.cursor = self.cursor.next[0m
[32m+  57:             self.cursor = cursor.next[0m
   58:             return node
   59:     
   60:     def append(self, data):
   61:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.19073 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
>       var_1 = singly_linked_list_0.next()

MIO/test_linkedList1_MIO.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b92d4b0>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:57: NameError
[36m   -[0m [# 183] SVD linkedList1: 
--------------------------------------------------------------------------------
   61:         ''' Note: The average time for append is O(n)
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
[34m-  65:         if self.head is None:[0m
[32m+  65:         if head is None:[0m
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
--------------------------------------------------------------------------------
[0.26135 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b9d9180>
data = <linkedList1.SinglyLinkedList object at 0x7fc09b9d9180>

>   ???
E   NameError: name 'head' is not defined

linkedList1:65: NameError
[36m   -[0m [# 184] SVD linkedList1: 
--------------------------------------------------------------------------------
   62:             however, insertion is O(1), giving it an
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
[34m-  66:             self.head = SinglyLinkedNode(data)[0m
[32m+  66:             head = SinglyLinkedNode(data)[0m
   67:             self.cursor = self.head
   68:         else:
   69:             node = self.head
   70:             
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 185] SVD linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
[34m-  67:             self.cursor = self.head[0m
[32m+  67:             cursor = self.head[0m
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 186] SVD linkedList1: 
--------------------------------------------------------------------------------
   63:             advantage over arrays.
   64:         '''
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
[34m-  67:             self.cursor = self.head[0m
[32m+  67:             self.cursor = head[0m
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
--------------------------------------------------------------------------------
[0.17141 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
>       var_0 = singly_linked_list_0.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09bcc59c0>
data = <linkedList1.SinglyLinkedList object at 0x7fc09bcc59c0>

>   ???
E   NameError: name 'head' is not defined

linkedList1:67: NameError
[36m   -[0m [# 187] SVD linkedList1: 
--------------------------------------------------------------------------------
   65:         if self.head is None:
   66:             self.head = SinglyLinkedNode(data)
   67:             self.cursor = self.head
   68:         else:
[34m-  69:             node = self.head[0m
[32m+  69:             node = head[0m
   70:             
   71:             while node.next is not None:
   72:                 node = node.next
   73:             
--------------------------------------------------------------------------------
[0.18809 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_5

def test_case_5():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_0) == 0
        var_0 = singly_linked_list_0.append(singly_linked_list_0)
        assert len(singly_linked_list_0) == 1
        var_1 = singly_linked_list_0.next()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList1.SinglyLinkedList'
        assert len(var_1) == 1
        var_2 = var_1.__contains__(var_0)
        assert var_2 is False
        singly_linked_list_1 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_1) == 0
        var_3 = var_1.__iter__()
        assert len(var_3) == 1
        singly_linked_list_2 = module_0.SinglyLinkedList()
        assert len(singly_linked_list_2) == 0
        bool_0 = True
>       var_4 = var_3.append(singly_linked_list_0)

MIO/test_linkedList1_MIO.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.SinglyLinkedList object at 0x7fc09b97c250>
data = <linkedList1.SinglyLinkedList object at 0x7fc09b97c250>

>   ???
E   NameError: name 'head' is not defined

linkedList1:69: NameError
[36m   -[0m [# 188] SVD linkedList1: 
--------------------------------------------------------------------------------
   76:             
   77:             
   78:             node.next = new_node
   79:         
[34m-  80:         self.size += 1[0m
[32m+  80:         size += 1[0m
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 189] SVD linkedList1: 
--------------------------------------------------------------------------------
   81: 
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
[34m-  85:         self.data = data[0m
[32m+  85:         data = data[0m
   86:         self.next = None
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 190] SVD linkedList1: 
--------------------------------------------------------------------------------
   82: 
   83: class SinglyLinkedNode(object):
   84:     def __init__(self, data):
   85:         self.data = data
[34m-  86:         self.next = None[0m
[32m+  86:         next = None[0m
   87: 
   88: 
   89: class DoublyLinkedList(SinglyLinkedList):
   90:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 191] SVD linkedList1: 
--------------------------------------------------------------------------------
   91:         
   92:         super(DoublyLinkedList, self).__init__()
   93:     
   94:     def previous(self):
[34m-  95:         if self.cursor.prev is None:[0m
[32m+  95:         if cursor.prev is None:[0m
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
--------------------------------------------------------------------------------
[0.20520 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_18

def test_case_18():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        with pytest.raises(StopIteration):
>           doubly_linked_list_0.previous()

MIO/test_linkedList1_MIO.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b8d6950>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:95: NameError
[36m   -[0m [# 192] SVD linkedList1: 
--------------------------------------------------------------------------------
   94:     def previous(self):
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
[34m-  98:             self.cursor.prev[0m
[32m+  98:             cursor.prev[0m
   99:             self.cursor = self.cursor.prev
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
--------------------------------------------------------------------------------
[0.20064 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
>       var_3 = var_2.previous()

MIO/test_linkedList1_MIO.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc30af0>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:98: NameError
[36m   -[0m [# 193] SVD linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
[34m-  99:             self.cursor = self.cursor.prev[0m
[32m+  99:             cursor = self.cursor.prev[0m
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 194] SVD linkedList1: 
--------------------------------------------------------------------------------
   95:         if self.cursor.prev is None:
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
[34m-  99:             self.cursor = self.cursor.prev[0m
[32m+  99:             self.cursor = cursor.prev[0m
  100:             return self.cursor.data
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
--------------------------------------------------------------------------------
[0.20330 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
>       var_3 = var_2.previous()

MIO/test_linkedList1_MIO.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bdcb5b0>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:99: NameError
[36m   -[0m [# 195] SVD linkedList1: 
--------------------------------------------------------------------------------
   96:             raise StopIteration()
   97:         else:
   98:             self.cursor.prev
   99:             self.cursor = self.cursor.prev
[34m- 100:             return self.cursor.data[0m
[32m+ 100:             return cursor.data[0m
  101:     
  102:     def append(self, data):
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
--------------------------------------------------------------------------------
[0.20364 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_19

def test_case_19():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 2
        var_2 = doubly_linked_list_0.next()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList1.DoublyLinkedList'
        assert len(var_2) == 2
>       var_3 = var_2.previous()

MIO/test_linkedList1_MIO.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b9e6680>

>   ???
E   NameError: name 'cursor' is not defined

linkedList1:100: NameError
[36m   -[0m [# 196] SVD linkedList1: 
--------------------------------------------------------------------------------
  103:         ''' Note: The average time for append is O(n)
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
[34m- 107:         if self.head is None:[0m
[32m+ 107:         if head is None:[0m
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
--------------------------------------------------------------------------------
[0.24586 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = doubly_linked_list_0.append(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bd0f640>
data = <linkedList1.DoublyLinkedList object at 0x7fc09bd0f640>

>   ???
E   NameError: name 'head' is not defined

linkedList1:107: NameError
[36m   -[0m [# 197] SVD linkedList1: 
--------------------------------------------------------------------------------
  104:             however, insertion is O(1), giving it an
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
[34m- 108:             self.head = DoublyLinkedNode(data)[0m
[32m+ 108:             head = DoublyLinkedNode(data)[0m
  109:             self.cursor = self.head
  110:         else:
  111:             node = self.head
  112:             
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 198] SVD linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
[34m- 109:             self.cursor = self.head[0m
[32m+ 109:             cursor = self.head[0m
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 199] SVD linkedList1: 
--------------------------------------------------------------------------------
  105:             advantage over arrays.
  106:         '''
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
[34m- 109:             self.cursor = self.head[0m
[32m+ 109:             self.cursor = head[0m
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
--------------------------------------------------------------------------------
[0.18730 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = doubly_linked_list_0.append(doubly_linked_list_0)

MIO/test_linkedList1_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bc42890>
data = <linkedList1.DoublyLinkedList object at 0x7fc09bc42890>

>   ???
E   NameError: name 'head' is not defined

linkedList1:109: NameError
[36m   -[0m [# 200] SVD linkedList1: 
--------------------------------------------------------------------------------
  107:         if self.head is None:
  108:             self.head = DoublyLinkedNode(data)
  109:             self.cursor = self.head
  110:         else:
[34m- 111:             node = self.head[0m
[32m+ 111:             node = head[0m
  112:             
  113:             while node.next is not None:
  114:                 node = node.next
  115:             
--------------------------------------------------------------------------------
[0.17161 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_3

def test_case_3():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.append(var_0)

MIO/test_linkedList1_MIO.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09be29900>, data = None

>   ???
E   NameError: name 'head' is not defined

linkedList1:111: NameError
[36m   -[0m [# 201] SVD linkedList1: 
--------------------------------------------------------------------------------
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
  119:             new_node.prev = node
[34m- 120:         self.size += 1[0m
[32m+ 120:         size += 1[0m
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 202] SVD linkedList1: 
--------------------------------------------------------------------------------
  119:             new_node.prev = node
  120:         self.size += 1
  121:     
  122:     def insert(self, data, index):
[34m- 123:         if index >= self.size:[0m
[32m+ 123:         if index >= size:[0m
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
--------------------------------------------------------------------------------
[0.19150 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bae86a0>, data = -2627
index = -2627

>   ???
E   NameError: name 'size' is not defined

linkedList1:123: NameError
[36m   -[0m [# 203] SVD linkedList1: 
--------------------------------------------------------------------------------
  121:     
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
[34m- 125:         if self.head is None:[0m
[32m+ 125:         if head is None:[0m
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
--------------------------------------------------------------------------------
[0.27660 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bb36b30>, data = -2627
index = -2627

>   ???
E   NameError: name 'head' is not defined

linkedList1:125: NameError
[36m   -[0m [# 204] SVD linkedList1: 
--------------------------------------------------------------------------------
  122:     def insert(self, data, index):
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
[34m- 126:             self.head = DoublyLinkedNode(data)[0m
[32m+ 126:             head = DoublyLinkedNode(data)[0m
  127:             self.cursor = self.head
  128:         
  129:         
  130:         elif index == self.size - 1:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 205] SVD linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
[34m- 127:             self.cursor = self.head[0m
[32m+ 127:             cursor = self.head[0m
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 206] SVD linkedList1: 
--------------------------------------------------------------------------------
  123:         if index >= self.size:
  124:             raise IndexError()
  125:         if self.head is None:
  126:             self.head = DoublyLinkedNode(data)
[34m- 127:             self.cursor = self.head[0m
[32m+ 127:             self.cursor = head[0m
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
--------------------------------------------------------------------------------
[0.20772 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_24

def test_case_24():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = -3179
>       var_0 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b92c640>, data = -3179
index = -3179

>   ???
E   NameError: name 'head' is not defined

linkedList1:127: NameError
[36m   -[0m [# 207] SVD linkedList1: 
--------------------------------------------------------------------------------
  126:             self.head = DoublyLinkedNode(data)
  127:             self.cursor = self.head
  128:         
  129:         
[34m- 130:         elif index == self.size - 1:[0m
[32m+ 130:         elif index == size - 1:[0m
  131:             
  132:             self.append(data)
  133:         
  134:         elif index == 0:
--------------------------------------------------------------------------------
[0.19845 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b8b2d70>, data = -2627
index = -2627

>   ???
E   NameError: name 'size' is not defined

linkedList1:130: NameError
[36m   -[0m [# 208] SVD linkedList1: 
--------------------------------------------------------------------------------
  128:         
  129:         
  130:         elif index == self.size - 1:
  131:             
[34m- 132:             self.append(data)[0m
[32m+ 132:             append(data)[0m
  133:         
  134:         elif index == 0:
  135:             
  136:             
--------------------------------------------------------------------------------
[0.20883 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_25

def test_case_25():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        bool_0 = False
        none_type_0 = None
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
>       var_1 = doubly_linked_list_0.insert(bool_0, bool_0)

MIO/test_linkedList1_MIO.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b92f2e0>, data = False
index = False

>   ???
E   NameError: name 'append' is not defined

linkedList1:132: NameError
[36m   -[0m [# 209] SVD linkedList1: 
--------------------------------------------------------------------------------
  134:         elif index == 0:
  135:             
  136:             
  137:             
[34m- 138:             a = self.head[0m
[32m+ 138:             a = head[0m
  139:             c = DoublyLinkedNode(data)
  140:             
  141:             
  142:             
--------------------------------------------------------------------------------
[0.30385 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_28

def test_case_28():
        none_type_0 = None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        bool_0 = False
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        complex_0 = -4.22462 + 34.2935j
        var_1 = doubly_linked_list_1.__contains__(complex_0)
        var_2 = doubly_linked_list_1.__contains__(complex_0)
        var_3 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 1
        var_4 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 2
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_0)
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = 'Jd#i'
        str_1 = 'RWYrhbFCiOg.Uub5hm`'
        singly_linked_node_0 = module_0.SinglyLinkedNode(str_1)
>       var_5 = doubly_linked_list_1.insert(str_0, bool_0)

MIO/test_linkedList1_MIO.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09b97e8c0>, data = 'Jd#i'
index = False

>   ???
E   NameError: name 'head' is not defined

linkedList1:138: NameError
[36m   -[0m [# 210] SVD linkedList1: 
--------------------------------------------------------------------------------
  140:             
  141:             
  142:             
  143:             
[34m- 144:             self.head = c[0m
[32m+ 144:             head = c[0m
  145:             c.next = a
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 211] SVD linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
[34m- 147:             self.cursor = self.head[0m
[32m+ 147:             cursor = self.head[0m
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 212] SVD linkedList1: 
--------------------------------------------------------------------------------
  143:             
  144:             self.head = c
  145:             c.next = a
  146:             a.prev = c
[34m- 147:             self.cursor = self.head[0m
[32m+ 147:             self.cursor = head[0m
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
--------------------------------------------------------------------------------
[0.21133 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_28

def test_case_28():
        none_type_0 = None
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(none_type_0)
        assert len(doubly_linked_list_0) == 1
        bool_0 = False
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        complex_0 = -4.22462 + 34.2935j
        var_1 = doubly_linked_list_1.__contains__(complex_0)
        var_2 = doubly_linked_list_1.__contains__(complex_0)
        var_3 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 1
        var_4 = doubly_linked_list_1.append(bool_0)
        assert len(doubly_linked_list_1) == 2
        doubly_linked_node_0 = module_0.DoublyLinkedNode(bool_0)
        assert doubly_linked_node_0.prev is None
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        str_0 = 'Jd#i'
        str_1 = 'RWYrhbFCiOg.Uub5hm`'
        singly_linked_node_0 = module_0.SinglyLinkedNode(str_1)
>       var_5 = doubly_linked_list_1.insert(str_0, bool_0)

MIO/test_linkedList1_MIO.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09bd21630>, data = 'Jd#i'
index = False

>   ???
E   NameError: name 'head' is not defined

linkedList1:147: NameError
[36m   -[0m [# 213] SVD linkedList1: 
--------------------------------------------------------------------------------
  146:             a.prev = c
  147:             self.cursor = self.head
  148:         else:
  149:             
[34m- 150:             a = self.head[0m
[32m+ 150:             a = head[0m
  151:             for x in range(index - 1):
  152:                 a = a.next
  153:             
  154:             
--------------------------------------------------------------------------------
[0.20035 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_22

def test_case_22():
        int_0 = -2627
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.append(int_0)
        assert len(doubly_linked_list_0) == 2
>       var_2 = doubly_linked_list_0.insert(int_0, int_0)

MIO/test_linkedList1_MIO.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList1.DoublyLinkedList object at 0x7fc09be005b0>, data = -2627
index = -2627

>   ???
E   NameError: name 'head' is not defined

linkedList1:150: NameError
[36m   -[0m [# 214] SVD linkedList1: 
--------------------------------------------------------------------------------
  167:             
  168:             a.next = c
  169:             c.prev = a
  170:         
[34m- 171:         self.size += 1[0m
[32m+ 171:         size += 1[0m
  172: 
  173: 
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 215] SVD linkedList1: 
--------------------------------------------------------------------------------
  174: class DoublyLinkedNode(SinglyLinkedNode):
  175:     def __init__(self, data):
  176:         
  177:         super(DoublyLinkedNode, self).__init__(data)
[34m- 178:         self.prev = None[0m
[32m+ 178:         prev = None[0m
  179: 
  180: if __name__ == '__main__':
  181:     test = SinglyLinkedList()
  182:     test.append(2)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 216] ZIL linkedList1: 
--------------------------------------------------------------------------------
   20:     def __contains__(self, item):
   21:         if self.head is not None:
   22:             cur = self.head
   23:             while cur is not None:
[34m-  24:                 if cur.data is item:[0m
[34m-  25:                     return True[0m
[34m-  26:                 cur = cur.next[0m
[32m+  24:                 break[0m
[32m+  25:         [0m
[32m+  26:         [0m
   27:         return False
   28:     
   29:     ''' Both getitem and setitem represent the magic methods
   30:         for the object[index] and object[index] = other operations
--------------------------------------------------------------------------------
[0.25718 s] [32mkilled[0m by MIO/test_linkedList1_MIO.py::test_case_1

def test_case_1():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.append(doubly_linked_list_0)
        assert len(doubly_linked_list_0) == 1
        var_1 = doubly_linked_list_0.__contains__(doubly_linked_list_0)
>       assert var_1 is True
E       AssertionError

MIO/test_linkedList1_MIO.py:15: AssertionError
[36m   -[0m [# 217] ZIL linkedList1: 
--------------------------------------------------------------------------------
   36:             raise IndexError()
   37:         else:
   38:             cur = self.head
   39:             for x in range(index):
[34m-  40:                 cur = cur.next[0m
[32m+  40:                 break[0m
   41:             return cur.data
   42:     
   43:     def __setitem__(self, index, value):
   44:         if (index >= self.size or index < 0):
--------------------------------------------------------------------------------
[0.17485 s] [31msurvived[0m
[36m   -[0m [# 218] ZIL linkedList1: 
--------------------------------------------------------------------------------
   45:             raise IndexError()
   46:         else:
   47:             cur = self.head
   48:             for x in range(index):
[34m-  49:                 cur = cur.next[0m
[32m+  49:                 break[0m
   50:             cur.data = value
   51:     
   52:     def next(self):
   53:         if self.cursor is None:
--------------------------------------------------------------------------------
[0.17563 s] [31msurvived[0m
[36m   -[0m [# 219] ZIL linkedList1: 
--------------------------------------------------------------------------------
   68:         else:
   69:             node = self.head
   70:             
   71:             while node.next is not None:
[34m-  72:                 node = node.next[0m
[32m+  72:                 break[0m
   73:             
   74:             
   75:             new_node = SinglyLinkedNode(data)
   76:             
--------------------------------------------------------------------------------
[0.16052 s] [31msurvived[0m
[36m   -[0m [# 220] ZIL linkedList1: 
--------------------------------------------------------------------------------
  110:         else:
  111:             node = self.head
  112:             
  113:             while node.next is not None:
[34m- 114:                 node = node.next[0m
[32m+ 114:                 break[0m
  115:             
  116:             
  117:             new_node = DoublyLinkedNode(data)
  118:             node.next = new_node
--------------------------------------------------------------------------------
[0.17646 s] [31msurvived[0m
[36m   -[0m [# 221] ZIL linkedList1: 
--------------------------------------------------------------------------------
  148:         else:
  149:             
  150:             a = self.head
  151:             for x in range(index - 1):
[34m- 152:                 a = a.next[0m
[32m+ 152:                 break[0m
  153:             
  154:             
  155:             
  156:             b = a.next
--------------------------------------------------------------------------------
[0.17623 s] [31msurvived[0m
[34m[*][0m Mutation score [82.62426 s]: [1m[34m66.7%[0m
[36m   -[0m all: 221
[36m   -[0m killed: 117 (52.9%)
[36m   -[0m survived: 60 (27.1%)
[36m   -[0m incompetent: 41 (18.6%)
[36m   -[0m timeout: 3 (1.4%)
