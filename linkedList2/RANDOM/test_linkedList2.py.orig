# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import linkedList2 as module_0
import builtins as module_1


def test_case_0():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_1():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_2():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()


def test_case_3():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0


def test_case_4():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()


def test_case_5():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1


def test_case_6():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_7():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_8():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_0.remove(linked_node_1)
    assert var_7 is False


def test_case_9():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_10():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1


def test_case_11():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()


def test_case_12():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_node_3)


def test_case_13():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_14():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_15():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_16():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__len__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_16 = linked_list_5.__iter__()


def test_case_17():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    list_0 = [linked_list_1, var_4, bytes_2, var_0]
    var_12 = linked_list_1.prepend(list_0)
    assert len(linked_list_1) == 2
    assert len(linked_node_4.value) == 2


def test_case_18():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_node_1.checkInfinite()


def test_case_19():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_3.__len__()
    assert var_12 == 0
    linked_node_7 = module_0.LinkedNode(var_1, var_8)


def test_case_20():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_0.remove(linked_node_0)
    assert var_4 is False


def test_case_21():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_8.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_5.checkInfinite()


def test_case_22():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(bytes_0)
    assert var_4 is False


def test_case_23():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_10 = var_0.__repr__()


def test_case_24():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_15 = linked_list_4.__iter__()


def test_case_25():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_0.__iter__()


def test_case_26():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)


def test_case_27():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.prepend(var_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_10.__len__()
    var_13 = linked_list_2.remove(linked_node_1)
    assert var_13 is False


def test_case_28():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_29():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_7.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_1.__len__()
    assert var_11 == 0


def test_case_30():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(complex_1)


def test_case_31():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()


def test_case_32():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_10.__iter__()


def test_case_33():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_11.__len__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_3.remove(linked_node_5)
    assert var_14 is False


def test_case_34():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()


def test_case_35():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    var_9 = linked_list_1.remove(linked_node_0)
    assert var_9 is False


def test_case_36():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_1.remove(linked_node_0)
    assert var_12 is False


def test_case_37():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_3.__len__()
    assert var_14 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_16 = linked_list_5.prepend(complex_0)
    assert len(linked_list_5) == 1


def test_case_38():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.pop()
    assert var_5 is False
    assert len(linked_list_1) == 0
    assert len(linked_node_3.value) == 0


def test_case_39():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)


def test_case_40():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"


def test_case_41():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()


def test_case_42():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_10.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_list_8.prepend(var_19)
    assert len(linked_list_8) == 1
    assert len(linked_node_11.value) == 1
    var_23 = var_20.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_13.value) == 0
    var_24 = linked_node_13.checkInfinite()
    var_25 = linked_node_13.checkInfinite()
    linked_node_14 = module_0.LinkedNode(var_7)


def test_case_43():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_10 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_12.__len__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_4.prepend(linked_node_0)
    assert len(linked_list_4) == 2
    assert len(linked_node_6.value) == 2


def test_case_44():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    var_11 = linked_list_1.remove(var_3)
    assert var_11 is False


def test_case_45():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[False]"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_node_10 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_10.value) == 0


def test_case_46():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_2.__repr__()
    assert var_13 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_5.__len__()
    assert var_19 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_20 = linked_list_1.remove(linked_list_0)
    assert var_20 is False


def test_case_47():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False


def test_case_48():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_10 = linked_list_3.remove(float_0)
    assert var_10 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0


def test_case_49():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_50():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_16 = linked_list_7.remove(float_0)
    assert var_16 is False
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_17 = linked_node_9.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_51():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_13 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_52():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_6 = var_3.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[False]"
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_12 = linked_node_6.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_15 = linked_list_5.__iter__()


def test_case_53():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_4 = linked_node_2.checkInfinite()


def test_case_54():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_3.__len__()
    assert var_13 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    linked_node_10 = module_0.LinkedNode(var_13)
    assert linked_node_10.value == 0


def test_case_55():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_3.__len__()


def test_case_56():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0


def test_case_57():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_8 = linked_list_3.remove(float_0)
    assert var_8 is False
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_10.__len__()
    var_13 = linked_list_3.__len__()
    assert var_13 == 2


def test_case_58():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_10 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_7.__iter__()


def test_case_59():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__repr__()
    linked_node_5 = module_0.LinkedNode(var_10, var_8)


def test_case_60():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_5.__len__()
    assert var_16 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_2.__len__()
    assert var_18 == 0


def test_case_61():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[False]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_12 = linked_list_4.remove(float_0)
    assert var_12 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = var_11.__len__()
    assert var_13 == 12


def test_case_62():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_1.__len__()
    assert var_6 == 0


def test_case_63():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_2.__iter__()


def test_case_64():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()


def test_case_65():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0


def test_case_66():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_2.prepend(var_8)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_12 = linked_list_2.__repr__()
    assert var_12 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_14 = linked_list_4.__iter__()
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_8.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_12.value) == 0
    var_22 = linked_node_12.checkInfinite()
    var_23 = linked_list_7.prepend(var_20)
    assert len(linked_list_7) == 1
    assert len(linked_node_12.value) == 1
    var_24 = var_21.__repr__()
    var_25 = var_10.__repr__()


def test_case_67():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_1.checkInfinite()


def test_case_68():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_3.prepend(var_10)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    var_14 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = linked_list_5.__len__()
    assert var_18 == 0
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_19 = linked_list_6.__iter__()
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_4, bytes_4]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_20 = linked_list_7.remove(float_0)
    assert var_20 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_node_11.checkInfinite()
    var_23 = var_12.__repr__()


def test_case_69():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.pop()
    assert var_6 is False
    assert len(linked_list_0) == 0
    assert len(linked_node_1.value) == 0


def test_case_70():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"


def test_case_71():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_3 = linked_list_0.prepend(linked_node_0)
    assert len(linked_list_0) == 1


def test_case_72():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_11.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_17 = linked_list_8.remove(float_0)
    assert var_17 is False
    var_18 = linked_node_5.checkInfinite()


def test_case_73():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_13 = linked_list_5.remove(float_0)
    assert var_13 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_9.value) == 1
    var_18 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_74():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.remove(float_0)
    assert var_9 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_11.__len__()
    var_14 = linked_list_2.__iter__()


def test_case_75():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_1.__iter__()


def test_case_76():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_77():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4


def test_case_78():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0


def test_case_79():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_3, bytes_2, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_7 = linked_list_4.__len__()
    assert var_7 == 4
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.prepend(var_8)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_12 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_5.__len__()
    assert var_22 == 1
    var_23 = linked_list_6.prepend(var_22)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1


def test_case_80():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_9 = linked_list_1.__repr__()
    assert var_9 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_2.__repr__()
    assert var_12 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_14.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_5, bytes_3, linked_node_7]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_18 = linked_list_6.__len__()
    assert var_18 == 4
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_8.checkInfinite()
    var_20 = var_19.__repr__()
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_list_8.__len__()
    assert var_23 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_24 = linked_node_11.checkInfinite()
    var_25 = linked_node_11.checkInfinite()
    var_26 = var_24.__repr__()


def test_case_81():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_3.__repr__()


def test_case_82():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)


def test_case_83():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_5 = linked_list_0.__repr__()
    assert var_5 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_1, bytes_1, linked_node_3]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_7 = linked_list_2.__len__()
    assert var_7 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = var_4.__repr__()


def test_case_84():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    linked_node_4 = module_0.LinkedNode(var_1)
    assert linked_node_4.value == 4


def test_case_85():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)


def test_case_86():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 2


def test_case_87():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = var_3.__repr__()


def test_case_88():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_2, bytes_2, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_0.pop()
    assert var_7 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_0) == 1


def test_case_89():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0


def test_case_90():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3)
    linked_node_3 = module_0.LinkedNode(linked_list_0, linked_list_1)
    assert len(linked_node_3.value) == 0
    assert len(linked_node_3.next) == 4


def test_case_91():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(linked_node_0)


def test_case_92():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_node_0.checkInfinite()


def test_case_93():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_3.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_94():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_2, bytes_1, linked_node_3]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_7 = linked_list_3.__len__()
    assert var_7 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12)
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_3.__repr__()


def test_case_95():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_node_2.checkInfinite()


def test_case_96():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_3.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_3, bytes_1, linked_node_4]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_7 = linked_list_4.__len__()
    assert var_7 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_5.prepend(var_8)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_12 = var_9.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_node_8 = module_0.LinkedNode(linked_node_5, var_6)


def test_case_97():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_12 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_4.__repr__()
    assert var_15 == "link:[]"
    linked_node_8 = module_0.LinkedNode(var_14)


def test_case_98():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    linked_node_3 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_3.next) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_4.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_list_3.prepend(var_2)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    bool_1 = True
    linked_node_7 = module_0.LinkedNode(bool_1)
    var_8 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    var_10 = linked_list_1.__iter__()


def test_case_99():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0


def test_case_100():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()


def test_case_101():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_1, bytes_2, linked_node_4]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_8 = linked_list_2.__len__()
    assert var_8 == 4
    var_9 = linked_list_2.pop()
    assert len(linked_list_2) == 3
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_9.value).__module__}.{type(var_9.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_9.value) == 0
    assert var_9.next is None


def test_case_102():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    bool_1 = True
    linked_node_4 = module_0.LinkedNode(bool_1)
    var_6 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_103():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_3, bytes_2, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.prepend(float_0)
    assert len(linked_list_5) == 1


def test_case_104():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1


def test_case_105():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_106():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_0)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_0.remove(var_7)
    assert var_8 is False


def test_case_107():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_3.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_0)
    assert var_13 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_7, linked_list_9, bytes_2, linked_node_7]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 4
    var_15 = linked_list_10.__len__()
    assert var_15 == 4
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_16)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.remove(var_3)
    assert var_17 is False


def test_case_108():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\x9b"
    linked_list_2 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_2) == 1


def test_case_109():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    linked_node_4 = module_0.LinkedNode(var_2, var_3)


def test_case_110():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_2, linked_list_4)
    assert len(linked_node_4.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_5.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_11 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_12 = var_4.__len__()


def test_case_111():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()


def test_case_112():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, linked_list_3)
    assert len(linked_node_5.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(bytes_0)


def test_case_113():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, linked_list_4)
    assert len(linked_node_5.next) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_10 = module_0.LinkedNode(set_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_15 = linked_node_11.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_12.value) == 0
    var_17 = linked_node_12.checkInfinite()
    var_18 = linked_list_7.prepend(var_15)
    assert len(linked_list_7) == 1
    assert len(linked_node_12.value) == 1
    var_19 = var_16.__repr__()
    none_type_0 = None
    linked_node_13 = module_0.LinkedNode(none_type_0)
    linked_node_14 = module_0.LinkedNode(linked_node_11)


def test_case_114():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False


def test_case_115():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_0.__iter__()


def test_case_116():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_8.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_9.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_12 = linked_node_10.checkInfinite()
    var_13 = linked_list_8.prepend(var_10)
    assert len(linked_list_8) == 1
    assert len(linked_node_10.value) == 1
    var_14 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_15 = linked_node_11.checkInfinite()
    var_16 = linked_node_11.checkInfinite()
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_13.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = linked_list_6.__iter__()


def test_case_117():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_3, bytes_1, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_4.checkInfinite()
    list_2 = []
    linked_node_5 = module_0.LinkedNode(list_2, linked_node_0)


def test_case_118():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_7 = var_4.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12)
    var_13 = linked_node_5.checkInfinite()


def test_case_119():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_0)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_10)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList(*linked_list_6)
    assert (
        f"{type(linked_list_10).__module__}.{type(linked_list_10).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_10) == 0


def test_case_120():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()


def test_case_121():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_5)
    assert len(linked_node_5.next) == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_6 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_8 = linked_node_8.checkInfinite()
    var_9 = var_7.__len__()
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__len__()
    assert var_11 == 7


def test_case_122():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_7 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_8 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_5.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_7, bytes_2, linked_node_7]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_15 = linked_list_8.__len__()
    assert var_15 == 4
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_10.__len__()
    assert var_18 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_123():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    assert var_3 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, linked_list_4)
    assert len(linked_node_4.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.__iter__()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0


def test_case_124():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_4.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_5.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_7.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_8 = linked_node_9.checkInfinite()
    var_9 = linked_node_9.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_12 = linked_node_10.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_10, linked_list_6, bytes_2, linked_node_10]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    var_14 = linked_list_0.__repr__()
    assert var_14 == "link:[]"


def test_case_125():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_11 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_9.prepend(var_15)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    var_19 = linked_list_9.__repr__()
    assert var_19 == "link:[False]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_20)
    var_21 = linked_list_9.prepend(var_8)
    assert len(linked_list_9) == 2
    assert len(linked_node_7.value) == 2


def test_case_126():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"


def test_case_127():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0


def test_case_128():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_2 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_4.prepend(var_3)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[False]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)


def test_case_129():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_12.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_15)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_16 = linked_list_6.remove(linked_list_6)
    assert var_16 is False
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_list_8.__len__()
    assert var_22 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_23 = linked_node_12.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_3)
    var_24 = linked_node_13.checkInfinite()
    var_25 = var_24.__repr__()
    var_26 = linked_list_10.__len__()
    assert var_26 == 0
    var_27 = var_25.__len__()


def test_case_130():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    var_16 = var_15.__iter__()
    var_17 = linked_list_1.__iter__()


def test_case_131():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_5.prepend(var_8)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    var_16 = var_15.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_list_5.__iter__()


def test_case_132():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_4.value) == 1
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[False]"
    var_14 = var_5.__len__()
    assert var_14 == 35


def test_case_133():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_4 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    var_8 = var_1.__iter__()


def test_case_134():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()


def test_case_135():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__iter__()
    var_5 = var_4.__repr__()


def test_case_136():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_4 = module_0.LinkedNode(set_0)
    bool_1 = True
    linked_node_5 = module_0.LinkedNode(bool_1)
    var_7 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_node_1.checkInfinite()


def test_case_137():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_5.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_138():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.remove(linked_node_1)
    assert var_9 is False


def test_case_139():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(var_10, var_11)


def test_case_140():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_5 = linked_list_3.__len__()
    assert var_5 == 4
    var_6 = linked_list_0.__len__()
    assert var_6 == 0


def test_case_141():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    var_10 = linked_list_4.prepend(var_1)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1


def test_case_142():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.remove(bytes_0)
    assert var_9 is False


def test_case_143():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[False]"
    var_10 = linked_list_0.remove(var_3)
    assert var_10 is False


def test_case_144():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)


def test_case_145():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[False]"
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_5 = module_0.LinkedNode(set_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_15 = var_11.__repr__()


def test_case_146():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    var_11 = var_0.__repr__()


def test_case_147():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_10 = var_9.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_15 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_16 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_5.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_19 = linked_node_6.checkInfinite()
    var_20 = linked_list_7.prepend(var_17)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_21 = linked_list_8.remove(float_0)
    assert var_21 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_22 = linked_node_7.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_7, linked_list_9, bytes_4, linked_node_7]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 4
    var_23 = linked_list_10.__len__()
    assert var_23 == 4
    var_24 = var_14.__repr__()
    var_25 = var_24.__iter__()


def test_case_148():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_1, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_1 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_5 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_node_1.checkInfinite()


def test_case_149():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_3.prepend(linked_list_3)
    assert len(linked_list_3) == 1


def test_case_150():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_10 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_6.prepend(var_15)
    assert len(linked_list_6) == 1
    assert len(linked_node_9.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_1 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_19 = linked_list_7.prepend(dict_1)
    assert len(linked_list_7) == 1
    linked_node_10 = module_0.LinkedNode(var_19)


def test_case_151():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7)
    var_8 = var_1.__repr__()


def test_case_152():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_5.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.__iter__()
    var_10 = linked_list_1.__iter__()


def test_case_153():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.remove(linked_list_0)
    assert var_3 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(complex_0, var_6)
    assert linked_node_4.next == 0


def test_case_154():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    assert var_7 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_155():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"


def test_case_156():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0


def test_case_157():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__repr__()
    var_10 = linked_list_2.__iter__()


def test_case_158():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    assert var_7 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_1 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_13 = linked_list_8.prepend(dict_1)
    assert len(linked_list_8) == 1
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_159():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_node_3.checkInfinite()


def test_case_160():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[False]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_7.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_node_10 = module_0.LinkedNode(var_8)
    assert linked_node_10.value == 0


def test_case_161():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_10)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    var_15 = var_14.__iter__()


def test_case_162():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_list_7.prepend(var_9)
    assert len(linked_list_7) == 1
    assert len(linked_node_9.value) == 1
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_10 = module_0.LinkedNode(set_0)
    var_13 = var_7.__repr__()


def test_case_163():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    linked_node_6 = module_0.LinkedNode(linked_node_0)


def test_case_164():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_165():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)


def test_case_166():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == 0
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_12 = linked_node_6.checkInfinite()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_167():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_12)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_16, linked_list_8)
    assert len(linked_node_9.next) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    bool_0 = True
    linked_node_11 = module_0.LinkedNode(bool_0)
    var_19 = linked_node_11.checkInfinite()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_20 = linked_list_9.remove(float_0)
    assert var_20 is False
    var_21 = linked_list_4.__len__()
    assert var_21 == 0


def test_case_168():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(var_2)


def test_case_169():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()


def test_case_170():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_1 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_1)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_2.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_12.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.remove(linked_list_8)
    assert var_15 is False
    linked_node_7 = module_0.LinkedNode(var_2, linked_list_0)
    assert len(linked_node_7.next) == 1


def test_case_171():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_3 = module_0.LinkedNode(var_4)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    var_13 = var_12.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_node_9 = module_0.LinkedNode(var_17)
    assert linked_node_9.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_0)
    var_19 = linked_node_11.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = linked_list_11.__len__()
    assert var_21 == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0


def test_case_172():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 2


def test_case_173():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()


def test_case_174():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    linked_node_3 = module_0.LinkedNode(var_6)
    assert linked_node_3.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    var_11 = var_10.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_16 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_list_9.__len__()
    assert var_20 == 0
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    linked_node_8 = module_0.LinkedNode(var_21)
    assert linked_node_8.value == 0
    var_22 = var_17.__repr__()
    assert var_22 == "'link:[{link:[{...}]: link:[{...}]}]'"


def test_case_175():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_176():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)


def test_case_177():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_3, bytes_0, linked_node_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__iter__()
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_4 = module_0.LinkedNode(set_0)
    bool_2 = True
    linked_node_5 = module_0.LinkedNode(bool_2)
    var_8 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_9)
    assert len(linked_node_8.next) == 0
    var_14 = linked_list_6.__len__()
    assert var_14 == 0


def test_case_178():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_node_3 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_3.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    var_2 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_5.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_4.__len__()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_8.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    var_11 = var_2.__repr__()


def test_case_179():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_2.__len__()


def test_case_180():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_2.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_node_5 = module_0.LinkedNode(var_8)
    assert linked_node_5.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_0)
    assert var_13 is False
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_181():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    var_17 = linked_list_7.__len__()
    assert var_17 == 0


def test_case_182():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_2, bytes_1, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_10 = linked_list_3.__len__()
    assert var_10 == 4
    var_11 = linked_list_2.__iter__()


def test_case_183():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0


def test_case_184():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.prepend(var_6)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    var_10 = var_7.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1


def test_case_185():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_2.prepend(var_8)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_12 = var_9.__repr__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_15 = linked_list_5.remove(linked_list_5)
    assert var_15 is False
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_16 = linked_node_8.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_19 = linked_list_6.__repr__()
    assert var_19 == "link:[]"
    var_20 = var_19.__iter__()


def test_case_186():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, linked_list_6)
    assert len(linked_node_3.next) == 0
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_9, linked_list_7)
    assert len(linked_node_6.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_8.prepend(var_10)
    assert len(linked_list_8) == 1
    assert len(linked_node_8.value) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_187():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_6.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.remove(linked_list_1)
    assert var_5 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_6, linked_list_2)
    assert len(linked_node_8.next) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_10.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_11 = module_0.LinkedNode(set_0)
    linked_node_12 = module_0.LinkedNode(none_type_0, linked_node_1)


def test_case_188():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_1.checkInfinite()


def test_case_189():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    var_8 = var_7.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_13)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_14 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_15 = linked_list_4.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_7 = module_0.LinkedNode(var_8, linked_node_0)


def test_case_190():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, linked_list_5)
    assert len(linked_node_4.next) == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_6.prepend(var_8)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[False]"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.remove(linked_list_7)
    assert var_17 is False
    var_18 = var_15.__iter__()


def test_case_191():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = var_8.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.remove(linked_list_9)
    assert var_18 is False
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_7 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__repr__()
    var_23 = linked_list_2.__len__()
    assert var_23 == 0


def test_case_192():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_12 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_4.remove(linked_list_4)
    assert var_13 is False
    var_14 = linked_node_0.checkInfinite()


def test_case_193():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_3, bytes_1, linked_node_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__len__()
    assert var_5 == 4
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_14 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    var_15 = linked_list_4.__repr__()


def test_case_194():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_12 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_16, linked_list_7)
    assert len(linked_node_11.next) == 0
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__iter__()


def test_case_195():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)


def test_case_196():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_8 = module_0.LinkedNode(var_11)
    linked_list_3 = module_0.LinkedList(*var_1)
    assert len(linked_list_3) == 5


def test_case_197():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_2.prepend(var_10)
    assert len(linked_list_2) == 1
    assert len(linked_node_7.value) == 1
    var_14 = var_11.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_4.__len__()
    assert var_17 == 0
    var_18 = linked_list_4.__iter__()
    var_19 = var_18.__iter__()
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_1)
    linked_node_9 = module_0.LinkedNode(tuple_0, bool_1)
    var_20 = var_1.__repr__()


def test_case_198():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    var_13 = linked_list_2.prepend(complex_0)
    assert len(linked_list_2) == 1


def test_case_199():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_4)
    assert len(linked_node_3.next) == 0
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_0)
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_1 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_7 = linked_list_6.prepend(dict_1)
    assert len(linked_list_6) == 1
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_1 = True
    linked_node_5 = module_0.LinkedNode(bool_1, linked_list_2)
    assert len(linked_node_5.next) == 0


def test_case_200():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_5 = module_0.LinkedNode(var_7)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_11 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_7.__repr__()


def test_case_201():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_3)
    assert len(linked_node_2.next) == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_10 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_10.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__iter__()


def test_case_202():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()


def test_case_203():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_3 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    var_10 = var_0.__repr__()


def test_case_204():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_1)
    assert len(linked_node_3.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.__iter__()
    var_13 = var_12.__iter__()
    var_14 = linked_list_2.__len__()
    assert var_14 == 1


def test_case_205():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_2.__len__()
    assert var_13 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_10 = module_0.LinkedNode(set_0)
    linked_node_11 = module_0.LinkedNode(linked_node_10)


def test_case_206():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_1, bytes_1, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    var_12 = var_11.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_14.__len__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_20)
    int_0 = -2735
    linked_node_12 = module_0.LinkedNode(int_0, var_19)
    assert linked_node_12.next == 0


def test_case_207():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_4.__len__()
    assert var_13 == 0
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    linked_node_9 = module_0.LinkedNode(var_14)
    assert linked_node_9.value == 0
    bool_0 = True
    linked_node_10 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_10.checkInfinite()
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_12.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_19 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_20 = linked_list_5.__repr__()
    assert var_20 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_2 = None
    linked_node_13 = module_0.LinkedNode(none_type_2)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_14 = module_0.LinkedNode(bytes_3)
    var_21 = linked_node_14.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__repr__()
    linked_node_15 = module_0.LinkedNode(var_23)
    list_0 = []
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 0


def test_case_208():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    linked_node_4 = module_0.LinkedNode(var_9)
    assert linked_node_4.value == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_node_7 = module_0.LinkedNode(var_12)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.remove(linked_list_7)
    assert var_14 is False
    var_15 = var_11.__len__()


def test_case_209():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_3 = module_0.LinkedNode(var_5)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_2, bytes_1, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_8 = linked_list_3.__len__()
    assert var_8 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11, linked_list_6)
    assert len(linked_node_7.next) == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_13)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_11.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_12.value) == 0
    var_18 = linked_node_12.checkInfinite()
    var_19 = linked_node_12.checkInfinite()
    var_20 = linked_list_11.__len__()
    assert var_20 == 0
    var_21 = linked_list_11.__len__()
    assert var_21 == 0
    linked_node_13 = module_0.LinkedNode(var_21)
    assert linked_node_13.value == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_14 = module_0.LinkedNode(bytes_3)
    none_type_1 = None
    linked_node_15 = module_0.LinkedNode(none_type_1)
    var_22 = linked_list_6.remove(linked_node_12)
    assert var_22 is False


def test_case_210():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)


def test_case_211():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[False]"
    linked_node_4 = module_0.LinkedNode(var_3)
    assert linked_node_4.value == 0


def test_case_212():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = var_3.__iter__()


def test_case_213():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False


def test_case_214():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_node_3 = module_0.LinkedNode(var_8)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__iter__()
    var_13 = var_12.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_5.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    var_21 = var_19.__len__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_22 = linked_list_10.remove(float_0)
    assert var_22 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_23 = linked_node_9.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_9, linked_list_11, bytes_4, linked_node_9]
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 4
    var_24 = linked_list_12.__len__()
    assert var_24 == 4
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_10.value) == 0
    var_25 = linked_node_10.checkInfinite()
    var_26 = linked_node_10.checkInfinite()
    var_27 = linked_list_14.__len__()
    assert var_27 == 0
    var_28 = linked_list_0.pop()
    assert var_28 is False
    assert len(linked_list_0) == 0
    assert len(linked_node_1.value) == 0


def test_case_215():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_1 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_1)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_8, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_9 = linked_list_2.__repr__()
    assert var_9 == "link:[]"


def test_case_216():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_4.checkInfinite()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_6.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_8.value) == 0
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    assert len(linked_node_8.value) == 1
    var_10 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_9.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_10.value) == 0
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_list_2.prepend(var_11)
    assert len(linked_list_2) == 1
    assert len(linked_node_10.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_15 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_16 = linked_list_3.__repr__()
    assert var_16 == "link:[{link:[{...}]: link:[{...}]}]"
    var_17 = linked_node_0.checkInfinite()


def test_case_217():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.remove(linked_list_1)
    assert var_5 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, var_6)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    linked_node_7 = module_0.LinkedNode(var_15)
    assert linked_node_7.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_6.__repr__()
    assert var_18 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_20 = linked_node_10.checkInfinite()
    var_21 = var_20.__repr__()
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_11.value) == 0
    var_23 = linked_node_11.checkInfinite()
    var_24 = linked_node_11.checkInfinite()
    var_25 = linked_list_11.__len__()
    assert var_25 == 0
    var_26 = linked_list_8.__len__()
    assert var_26 == 0


def test_case_218():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()


def test_case_219():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_node_3 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_3.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_4.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_5.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(bool_0)
    assert var_9 is False
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    bool_1 = True
    linked_node_9 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(bool_1, none_type_0)


def test_case_220():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_1)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_1)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_4.__repr__()


def test_case_221():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = var_8.__len__()


def test_case_222():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_6 = module_0.LinkedNode(var_10)
    none_type_2 = None
    linked_node_7 = module_0.LinkedNode(none_type_2)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_node_9.checkInfinite()
    linked_list_4 = module_0.LinkedList(*var_1)
    assert len(linked_list_4) == 5


def test_case_223():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_9 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    var_11 = var_9.__repr__()


def test_case_224():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    linked_node_4 = module_0.LinkedNode(var_11)
    assert linked_node_4.value == 0
    linked_node_5 = module_0.LinkedNode(var_4)


def test_case_225():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_4 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.prepend(var_5)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_2.remove(var_5)
    assert var_16 is False


def test_case_226():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_3.__len__()
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(bool_0)
    assert var_6 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[False]"
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_1)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_1)
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_9.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_1 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_16 = linked_list_6.prepend(dict_1)
    assert len(linked_list_6) == 1
    var_17 = linked_list_6.__repr__()
    assert var_17 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_8.__len__()
    assert var_20 == 0
    var_21 = linked_list_8.__len__()
    assert var_21 == 0
    linked_node_11 = module_0.LinkedNode(var_21)
    assert linked_node_11.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_22 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1


def test_case_227():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1


def test_case_228():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_9, linked_list_3)
    assert len(linked_node_6.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_0)
    linked_node_8 = module_0.LinkedNode(tuple_0, bool_0)
    linked_node_9 = module_0.LinkedNode(linked_node_8)


def test_case_229():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_node_4 = module_0.LinkedNode(var_6)
    assert linked_node_4.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_8 = module_0.LinkedNode(var_10)
    assert linked_node_8.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_10.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_13 = linked_node_11.checkInfinite()
    var_14 = linked_list_7.prepend(var_11)
    assert len(linked_list_7) == 1
    assert len(linked_node_11.value) == 1
    var_15 = var_12.__iter__()


def test_case_230():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_4.prepend(var_3)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[False]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_3.prepend(var_1)
    assert len(linked_list_3) == 1


def test_case_231():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    assert var_3 is False
    var_4 = var_3.__repr__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_node_6 = module_0.LinkedNode(var_11)
    assert linked_node_6.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    var_15 = linked_list_8.__iter__()
    linked_node_9 = module_0.LinkedNode(var_7)


def test_case_232():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    linked_node_5 = module_0.LinkedNode(var_1, bool_0)
    assert linked_node_5.value == 4


def test_case_233():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(linked_list_5)
    assert var_6 is False
    var_7 = var_6.__repr__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__iter__()
    var_15 = var_14.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__iter__()
    bool_1 = True
    dict_1 = {bool_1: bool_1}
    bytes_1 = b""
    tuple_0 = (dict_1, bytes_1, bool_1)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_1)
    var_20 = linked_list_2.remove(bytes_0)
    assert var_20 is False


def test_case_234():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    linked_node_7 = module_0.LinkedNode(var_2)


def test_case_235():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    bool_1 = True
    linked_node_5 = module_0.LinkedNode(bool_1)
    var_9 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_4.prepend(var_10)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    bool_2 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.remove(bool_2)
    assert var_15 is False
    var_16 = linked_list_2.__iter__()


def test_case_236():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_node_4 = module_0.LinkedNode(set_0, var_0)


def test_case_237():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_0, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_4 = linked_list_5.__len__()
    assert var_4 == 4
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_1 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_9 = linked_list_7.prepend(dict_1)
    assert len(linked_list_7) == 1
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_node_9 = module_0.LinkedNode(complex_1)
    bool_1 = True
    linked_node_10 = module_0.LinkedNode(bool_1)
    var_11 = linked_node_10.checkInfinite()
    var_12 = linked_list_4.prepend(complex_1)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1


def test_case_238():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, var_4)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_node_7 = module_0.LinkedNode(var_14)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    var_23 = linked_list_9.__len__()
    assert var_23 == 0
    linked_node_10 = module_0.LinkedNode(var_23)
    assert linked_node_10.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_24 = linked_list_11.remove(linked_list_11)
    assert var_24 is False
    var_25 = var_24.__repr__()


def test_case_239():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_4.checkInfinite()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_0.prepend(var_7)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_3.__len__()
    assert var_12 == 0
    var_13 = linked_list_3.__len__()
    assert var_13 == 0
    linked_node_7 = module_0.LinkedNode(var_13)
    assert linked_node_7.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(linked_list_6)
    assert var_15 is False
    var_16 = var_15.__repr__()
    linked_node_9 = module_0.LinkedNode(linked_node_4, linked_list_1)
    assert len(linked_node_9.next) == 0


def test_case_240():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_4, bytes_1, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_10 = linked_list_5.__len__()
    assert var_10 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_13 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(linked_list_7, var_9)
    assert len(linked_node_6.value) == 0


def test_case_241():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_3 = module_0.LinkedNode(var_8)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_4.__len__()
    assert var_12 == 0
    var_13 = linked_list_4.__len__()
    assert var_13 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_5, bytes_1, linked_node_5]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_15 = linked_list_6.__len__()
    assert var_15 == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_6.remove(var_17)
    assert var_18 is False


def test_case_242():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_8 = var_7.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(linked_list_4)
    assert var_9 is False
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_5, bytes_0, linked_node_3]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_12 = linked_list_6.__len__()
    assert var_12 == 4
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    linked_node_6 = module_0.LinkedNode(var_15)
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_node_10.checkInfinite()
    var_25 = linked_list_8.__len__()
    assert var_25 == 0
    var_26 = linked_list_7.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_27 = linked_node_11.checkInfinite()
    var_28 = linked_node_11.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_29 = var_16.__len__()


def test_case_243():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_node_1.checkInfinite()


def test_case_244():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"


def test_case_245():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_1, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_9 = linked_list_5.__len__()
    assert var_9 == 4
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__iter__()
    var_14 = var_13.__iter__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_node_9 = module_0.LinkedNode(complex_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = var_18.__len__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_12.value) == 0
    var_21 = linked_node_12.checkInfinite()
    var_22 = linked_node_12.checkInfinite()
    var_23 = linked_list_10.__len__()
    assert var_23 == 0
    var_24 = var_1.__repr__()


def test_case_246():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_5 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    linked_node_7 = module_0.LinkedNode(var_11)
    assert linked_node_7.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_3.remove(linked_list_3)
    assert var_12 is False


def test_case_247():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.remove(float_0)
    assert var_9 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_10, linked_list_5)
    assert len(linked_node_4.next) == 0
    var_11 = linked_list_0.__repr__()
    assert var_11 == "link:[]"


def test_case_248():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_4, bytes_2, linked_node_6]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_11 = linked_list_5.__len__()
    assert var_11 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_12, var_12)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    var_17 = linked_list_8.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_19.__len__()
    none_type_1 = None
    linked_node_12 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_4)
    var_22 = linked_node_13.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = var_22.__repr__()
    linked_list_10 = module_0.LinkedList(*var_3)
    assert len(linked_list_10) == 5


def test_case_249():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_12 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_node_9 = module_0.LinkedNode(var_4)


def test_case_250():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_11 = linked_list_5.remove(float_0)
    assert var_11 is False
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(linked_list_7)
    assert var_13 is False
    var_14 = var_13.__repr__()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    assert len(linked_node_10.value) == 1
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[False]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_20, var_20)
    linked_list_10 = module_0.LinkedList(*bytes_4)
    assert len(linked_list_10) == 10
    var_22 = linked_list_10.__iter__()


def test_case_251():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    var_11 = linked_list_2.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_16, var_16)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_6.__len__()
    assert var_20 == 0
    var_21 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_22)
    var_23 = var_6.__iter__()


def test_case_252():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    assert var_9 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_14)
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_node_9 = module_0.LinkedNode(var_2)
    assert linked_node_9.value == 0


def test_case_253():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_10 = var_9.__iter__()
    var_11 = linked_node_1.checkInfinite()


def test_case_254():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_5 = module_0.LinkedNode(var_10)
    var_12 = var_6.__iter__()


def test_case_255():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1


def test_case_256():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    str_0 = "w`hBWYv5*% rh"
    linked_node_2 = module_0.LinkedNode(str_0)


def test_case_257():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = linked_list_2.prepend(linked_node_0)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1


def test_case_258():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3)
    var_4 = linked_list_3.__iter__()


def test_case_259():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__iter__()
    var_17 = var_16.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_list_9.prepend(var_18)
    assert len(linked_list_9) == 1
    assert len(linked_node_10.value) == 1
    var_22 = linked_list_9.__repr__()
    assert var_22 == "link:[False]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_23 = linked_node_11.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_24 = linked_node_12.checkInfinite()
    var_25 = var_24.__repr__()
    var_26 = linked_list_11.__len__()
    assert var_26 == 0
    var_27 = var_8.__repr__()


def test_case_260():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    var_8 = var_7.__repr__()
    linked_node_5 = module_0.LinkedNode(var_0)


def test_case_261():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    int_0 = 111
    linked_node_2 = module_0.LinkedNode(var_2, int_0)


def test_case_262():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_2)


def test_case_263():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_4 = linked_list_0.__len__()
    assert var_4 == 0


def test_case_264():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_5.next) == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_7)
    linked_list_4 = module_0.LinkedList(*var_2)
    assert len(linked_list_4) == 5


def test_case_265():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    var_11 = linked_list_0.remove(linked_node_7)
    assert var_11 is False


def test_case_266():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_9.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_10.value) == 1
    var_16 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_12 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_13.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__repr__()
    linked_node_14 = module_0.LinkedNode(var_19)
    complex_1 = 4095.03 - 599.647583j
    linked_node_15 = module_0.LinkedNode(complex_1)
    linked_node_16 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_267():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    none_type_2 = None
    linked_node_4 = module_0.LinkedNode(none_type_2)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_node_6 = module_0.LinkedNode(var_9)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11, linked_list_0)
    assert len(linked_node_8.next) == 0
    none_type_3 = None
    linked_node_9 = module_0.LinkedNode(none_type_3)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_10.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_13.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_16 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_11, linked_list_2, bytes_4, linked_node_11]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_18 = linked_list_3.__len__()
    assert var_18 == 4
    bool_0 = True
    linked_node_12 = module_0.LinkedNode(bool_0)
    var_19 = linked_node_12.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_13.value) == 0
    var_20 = linked_node_13.checkInfinite()
    var_21 = linked_node_13.checkInfinite()
    var_22 = linked_list_4.prepend(var_20)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_14 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_23 = linked_list_6.remove(linked_list_6)
    assert var_23 is False
    var_24 = var_23.__repr__()
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_15 = module_0.LinkedNode(bytes_5)
    var_25 = linked_node_15.checkInfinite()
    var_26 = var_25.__repr__()
    var_27 = var_8.__iter__()


def test_case_268():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    linked_node_6 = module_0.LinkedNode(var_14)
    assert linked_node_6.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_7.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_8.prepend(var_16)
    assert len(linked_list_8) == 1
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_list_11.__len__()
    assert var_21 == 0
    var_22 = linked_list_10.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_10.value) == 0
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_node_10.checkInfinite()
    var_25 = linked_list_13.__len__()
    assert var_25 == 0
    var_26 = linked_list_13.__len__()
    assert var_26 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_14 = module_0.LinkedList(*list_0)
    assert len(linked_list_14) == 2
    var_27 = linked_list_14.remove(float_0)
    assert var_27 is False
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_15)
    assert len(linked_node_11.value) == 0
    var_28 = linked_node_11.checkInfinite()
    var_29 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_28, var_28)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_3)
    var_30 = linked_node_13.checkInfinite()
    var_31 = var_30.__repr__()
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_16)
    assert len(linked_node_14.value) == 0
    var_32 = linked_node_14.checkInfinite()
    var_33 = var_31.__len__()
    linked_node_15 = module_0.LinkedNode(var_28)


def test_case_269():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_node_3 = module_0.LinkedNode(var_8)
    assert linked_node_3.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_270():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_6 = module_0.LinkedNode(var_6)
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_8 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.remove(linked_list_2)
    assert var_9 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_3, bytes_2, linked_node_7]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_11 = linked_list_4.__len__()
    assert var_11 == 4
    var_12 = linked_list_3.remove(linked_node_0)


def test_case_271():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    bool_1 = True
    linked_node_0 = module_0.LinkedNode(bool_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    var_5 = linked_list_1.__iter__()


def test_case_272():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)


def test_case_273():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0


def test_case_274():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2)
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_0.value) == 1


def test_case_275():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, linked_list_2)
    assert len(linked_node_5.next) == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_9 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    var_11 = var_8.__repr__()
    assert var_11 == "0"


def test_case_276():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_277():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, var_5)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    linked_node_6 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_6.value) == 0


def test_case_278():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_5 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_15.__len__()
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    var_21 = var_19.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_node_12 = module_0.LinkedNode(none_type_0)


def test_case_279():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__iter__()
    var_7 = linked_node_1.checkInfinite()


def test_case_280():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_1 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_1)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    linked_node_4 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_0)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    linked_node_6 = module_0.LinkedNode(var_9)
    assert linked_node_6.value == 0
    var_10 = linked_list_1.__iter__()


def test_case_281():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, var_5)
    complex_0 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    var_11 = var_10.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_12)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_10.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_282():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_4 = linked_node_1.checkInfinite()


def test_case_283():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_4 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_3.next) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_15, var_15)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_9.prepend(var_17)
    assert len(linked_list_9) == 1
    assert len(linked_node_10.value) == 1
    var_21 = var_12.__iter__()


def test_case_284():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, var_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_12, linked_list_5)
    assert len(linked_node_9.next) == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    bool_1 = True
    linked_node_10 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_10.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_15 = linked_node_11.checkInfinite()
    var_16 = linked_node_11.checkInfinite()
    var_17 = linked_list_6.prepend(var_15)
    assert len(linked_list_6) == 1
    var_18 = var_1.__len__()


def test_case_285():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_2, bytes_1, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_5 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_9)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_10, linked_list_6)
    assert len(linked_node_10.next) == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_286():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_6.next) == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_7, linked_list_3)
    assert len(linked_node_8.next) == 0
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_9.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_9 = linked_node_10.checkInfinite()
    var_10 = linked_node_10.checkInfinite()
    var_11 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_12.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    var_16 = linked_node_3.checkInfinite()


def test_case_287():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_1 = module_0.LinkedNode(var_5)
    assert linked_node_1.value == 0
    var_6 = linked_list_0.__len__()
    assert var_6 == 1


def test_case_288():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_10, var_10)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_7, bytes_1, linked_node_6]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_13 = linked_list_8.__len__()
    assert var_13 == 4
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_7 = module_0.LinkedNode(set_0)
    linked_node_8 = module_0.LinkedNode(linked_node_6, bytes_0)


def test_case_289():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_290():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, linked_list_3)
    assert len(linked_node_4.next) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_6, linked_list_7)
    assert len(linked_node_7.next) == 0
    var_7 = linked_list_7.__len__()
    assert var_7 == 0
    var_8 = linked_node_5.checkInfinite()


def test_case_291():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.remove(linked_list_6)
    var_9 = var_8.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_10.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.remove(var_3)


def test_case_292():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)


def test_case_293():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_6.value) == 1
    var_8 = linked_list_0.__repr__()
    assert var_8 == "link:[False]"
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_7.checkInfinite()
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_9.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_node_10 = module_0.LinkedNode(var_12)
    bool_1 = True
    linked_node_11 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_11.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_12.value) == 0
    var_15 = linked_node_12.checkInfinite()
    var_16 = linked_node_12.checkInfinite()
    var_17 = linked_list_1.prepend(var_15)
    assert len(linked_list_1) == 1
    list_0 = []
    var_18 = linked_list_0.prepend(list_0)
    assert len(linked_list_0) == 2
    assert len(linked_node_6.value) == 2


def test_case_294():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    linked_node_0 = module_0.LinkedNode(var_2)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_7 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_10 = linked_list_4.__len__()
    assert var_10 == 4
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_14.__len__()
    linked_node_7 = module_0.LinkedNode(var_15)


def test_case_295():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    bool_0 = False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_20 = linked_list_11.remove(bool_0)
    assert var_20 is False
    linked_node_11 = module_0.LinkedNode(var_20)
    bool_1 = True
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_21 = linked_list_12.prepend(bool_1)
    assert len(linked_list_12) == 1
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_12.value) == 0


def test_case_296():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_2, bytes_2, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_10 = linked_list_3.__len__()
    assert var_10 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_297():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = var_3.__repr__()
    assert var_6 == "0"


def test_case_298():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2


def test_case_299():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0


def test_case_300():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, var_5)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_4 = module_0.LinkedNode(set_0)
    bool_1 = True
    var_8 = linked_list_5.prepend(bool_1)
    assert len(linked_list_5) == 3


def test_case_301():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_18, var_18)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_list_10.prepend(var_20)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    var_24 = var_21.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_25 = linked_list_11.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_11.value) == 0
    var_26 = linked_node_11.checkInfinite()
    var_27 = linked_node_11.checkInfinite()
    var_28 = linked_list_13.__len__()
    assert var_28 == 0
    var_29 = linked_list_13.__len__()
    assert var_29 == 0
    linked_node_12 = module_0.LinkedNode(var_29)
    assert linked_node_12.value == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_13 = module_0.LinkedNode(var_9)
    assert linked_node_13.value == 0


def test_case_302():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"


def test_case_303():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_304():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_1)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_1)
    bool_2 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(bool_2)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    bool_3 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(bool_3)
    linked_node_3 = module_0.LinkedNode(var_7)
    bool_4 = True
    linked_node_4 = module_0.LinkedNode(bool_4)
    var_8 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    var_15 = linked_node_2.checkInfinite()


def test_case_305():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_4 = var_2.__repr__()


def test_case_306():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_4 = linked_list_2.__len__()
    assert var_4 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_5 = var_0.__repr__()


def test_case_307():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_308():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_1)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_1)
    bool_2 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_2, bool_2, bool_2, bytes_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    var_12 = linked_list_3.__iter__()


def test_case_309():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_0, bytes_1, linked_node_3]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_5 = linked_list_1.__len__()
    assert var_5 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_10 = var_9.__iter__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    var_15 = var_2.__iter__()


def test_case_310():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    var_16 = linked_list_0.remove(var_5)


def test_case_311():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_12 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_6.prepend(var_13)
    assert len(linked_list_6) == 1
    var_16 = var_11.__repr__()
    assert var_16 == "0"


def test_case_312():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    var_5 = linked_list_0.__iter__()


def test_case_313():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.remove(bool_1)
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1)
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_4.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    var_6 = var_3.__repr__()


def test_case_314():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_4 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    var_7 = var_1.__len__()


def test_case_315():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()


def test_case_316():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__repr__()
    var_12 = var_8.__len__()


def test_case_317():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_318():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_5.prepend(var_5)
    assert len(linked_list_5) == 1
    var_8 = var_4.__repr__()


def test_case_319():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_1 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_1)
    assert len(linked_list_3) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_2.remove(var_0)
    assert var_5 is False


def test_case_320():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_1 = linked_list_2.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_2.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_0.value) == 0
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_0.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    var_9 = var_8.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_321():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(bool_0)
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_4 = linked_list_5.__repr__()
    assert var_4 == "link:[]"
    bool_1 = True
    linked_node_7 = module_0.LinkedNode(bool_1)
    var_5 = linked_node_7.checkInfinite()
    bool_2 = True
    var_6 = linked_list_1.remove(bool_2)


def test_case_322():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_6 = module_0.LinkedNode(var_7)
    assert linked_node_6.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_8 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(bool_0)
    assert var_10 is False
    linked_node_7 = module_0.LinkedNode(var_10)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__iter__()
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bool_1 = True
    dict_1 = {bool_1: bool_1}
    bytes_1 = b""
    tuple_0 = (dict_1, bytes_1, bool_1)
    linked_node_11 = module_0.LinkedNode(tuple_0, bool_1)
    var_19 = linked_list_5.__iter__()


def test_case_323():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_3 = module_0.LinkedNode(var_6)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_3, bytes_1, linked_node_5]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_9 = linked_list_4.__len__()
    assert var_9 == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    linked_node_8 = module_0.LinkedNode(var_14)
    assert linked_node_8.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_16.__len__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_324():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_1.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_3.checkInfinite()


def test_case_325():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_0, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_6 = linked_list_5.__len__()
    assert var_6 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.remove(linked_list_8)
    assert var_11 is False
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_9.prepend(var_13)
    assert len(linked_list_9) == 1
    assert len(linked_node_8.value) == 1
    var_17 = var_14.__repr__()
    var_18 = linked_node_3.checkInfinite()


def test_case_326():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.remove(float_0)
    assert var_9 is False
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    bool_1 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.remove(bool_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_12)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    linked_node_6 = module_0.LinkedNode(var_16)
    assert linked_node_6.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_12.__len__()
    assert var_19 == 0
    var_20 = linked_list_12.__len__()
    assert var_20 == 0
    linked_node_8 = module_0.LinkedNode(var_20)
    assert linked_node_8.value == 0
    var_21 = linked_list_5.prepend(var_1)
    assert len(linked_list_5) == 2


def test_case_327():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_14 = linked_list_5.__repr__()
    assert var_14 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(linked_list_6)
    assert var_15 is False
    var_16 = var_15.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_9 = module_0.LinkedNode(tuple_0, bool_0)
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_20 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1


def test_case_328():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_4.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_8 = linked_list_1.remove(linked_list_1)
    assert var_8 is False
    var_9 = linked_list_1.__len__()
    assert var_9 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_10 = linked_list_3.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_3.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.__iter__()
    var_16 = var_15.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_3 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_3)
    list_1 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_node_6.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_19 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_20 = linked_list_9.__repr__()
    assert var_20 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_node_7.checkInfinite()
    var_23 = linked_list_8.__repr__()
    assert var_23 == "link:[]"


def test_case_329():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_9.prepend(var_13)
    assert len(linked_list_9) == 1
    assert len(linked_node_8.value) == 1
    linked_node_9 = module_0.LinkedNode(var_7)
    assert linked_node_9.value == 0


def test_case_330():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_13 = linked_node_5.checkInfinite()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_17 = var_15.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_18 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_19 = linked_list_7.__repr__()
    assert var_19 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_20 = linked_list_9.remove(float_0)
    assert var_20 is False
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_list_10.prepend(var_21)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    var_25 = var_22.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_331():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_13 = linked_node_4.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_9.prepend(var_14)
    assert len(linked_list_9) == 1
    linked_node_6 = module_0.LinkedNode(var_2)


def test_case_332():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_1)
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_333():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_5.prepend(var_4)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_8 = linked_list_2.remove(bytes_0)
    assert var_8 is False


def test_case_334():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    set_0 = {var_4}
    linked_node_5 = module_0.LinkedNode(linked_list_2, set_0)
    assert len(linked_node_5.value) == 0


def test_case_335():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_1.prepend(linked_node_1)
    assert len(linked_list_1) == 1


def test_case_336():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_0 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = var_8.__repr__()


def test_case_337():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_1.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    var_11 = linked_list_1.prepend(linked_list_2)
    assert len(linked_list_1) == 1


def test_case_338():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(var_1)
    assert var_4 is False


def test_case_339():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_3 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_5.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0


def test_case_340():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0


def test_case_341():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()


def test_case_342():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0


def test_case_343():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_0.remove(var_1)
    assert var_2 is False


def test_case_344():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__repr__()
    assert var_7 == "'link:[]'"


def test_case_345():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    var_7 = var_5.__repr__()


def test_case_346():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = var_1.__repr__()


def test_case_347():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_2, bytes_1, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_1 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_14 = linked_list_10.prepend(dict_1)
    assert len(linked_list_10) == 1
    var_15 = linked_list_10.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_1 = True
    linked_node_5 = module_0.LinkedNode(bool_1)
    var_16 = linked_node_5.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_list_11.prepend(var_17)
    assert len(linked_list_11) == 1
    linked_node_7 = module_0.LinkedNode(dict_0)


def test_case_348():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_6.__len__()
    assert var_6 == 0
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_7.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_8 = module_0.LinkedNode(var_10)
    var_12 = var_10.__repr__()


def test_case_349():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__len__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_9)
    assert len(linked_node_8.next) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_10.prepend(var_14)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[False]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_19, linked_list_11)
    assert len(linked_node_12.next) == 0
    var_20 = linked_list_11.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_13.value) == 0
    var_21 = linked_node_13.checkInfinite()
    var_22 = linked_node_13.checkInfinite()
    linked_node_14 = module_0.LinkedNode(linked_node_5)


def test_case_350():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"


def test_case_351():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_1.__len__()
    assert var_11 == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_12 = linked_list_2.remove(float_0)
    assert var_12 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_4)
    assert len(linked_node_8.next) == 0
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    linked_node_10 = module_0.LinkedNode(var_18)
    assert linked_node_10.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_list_8.__len__()
    assert var_21 == 0
    var_22 = linked_list_8.__iter__()
    bool_0 = False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_23 = linked_list_9.remove(bool_0)
    assert var_23 is False
    linked_node_12 = module_0.LinkedNode(var_23)
    complex_0 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_24 = linked_list_10.remove(linked_list_10)
    var_25 = var_24.__repr__()
    var_26 = linked_list_8.__repr__()
    assert var_26 == "link:[]"


def test_case_352():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_353():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_2, bytes_0, linked_node_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    linked_node_1 = module_0.LinkedNode(linked_list_3, list_0)
    assert len(linked_node_1.value) == 4


def test_case_354():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(linked_list_5)
    assert var_9 is False
    var_10 = var_9.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_4.checkInfinite()
    var_16 = var_15.__repr__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_6.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    tuple_0 = ()
    linked_node_7 = module_0.LinkedNode(none_type_0, tuple_0)


def test_case_355():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_6.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_14 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    assert len(linked_node_9.value) == 1
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[False]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_9.__repr__()
    assert var_22 == "link:[]"
    bool_2 = True
    dict_1 = {bool_2: bool_2}
    bytes_4 = b""
    tuple_0 = (dict_1, bytes_4, bool_2)
    linked_node_11 = module_0.LinkedNode(tuple_0, bool_2)
    var_23 = var_2.__repr__()


def test_case_356():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.remove(float_0)
    assert var_9 is False
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_357():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_358():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )


def test_case_359():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_2 = module_0.LinkedNode(var_8)
    assert linked_node_2.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_13 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_15 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_15, linked_list_9)
    assert len(linked_node_5.next) == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__repr__()
    assert var_17 == "link:[]"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_360():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_3.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_2.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_361():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(bool_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_6.__iter__()
    var_9 = var_8.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"


def test_case_362():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)


def test_case_363():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[False]"
    var_12 = linked_node_0.checkInfinite()


def test_case_364():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    var_7 = linked_list_5.remove(linked_list_2)
    assert var_7 is False


def test_case_365():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_node_4 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_8 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_13 = linked_list_4.__repr__()
    assert var_13 == "link:[False]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_5.prepend(var_14)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_366():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_node_2 = module_0.LinkedNode(bytes_0)


def test_case_367():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2)
    linked_node_6 = module_0.LinkedNode(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_node_8 = module_0.LinkedNode(var_10)
    assert linked_node_8.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.__repr__()
    assert var_15 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_368():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_369():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_2.__iter__()


def test_case_370():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_4.__repr__()
    assert var_16 == "link:[]"


def test_case_371():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_node_3 = module_0.LinkedNode(var_4)
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_6 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(var_10)
    assert linked_node_6.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11, linked_list_6)
    assert len(linked_node_8.next) == 0
    var_12 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__iter__()
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_9.checkInfinite()
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_1)
    linked_node_10 = module_0.LinkedNode(tuple_0, bool_1)
    var_15 = linked_list_3.__iter__()


def test_case_372():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_373():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0


def test_case_374():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_1.__repr__()
    assert var_7 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_375():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__iter__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.remove(bool_0)
    assert var_14 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_376():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__iter__()
    linked_node_5 = module_0.LinkedNode(var_14)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    var_18 = linked_list_9.__iter__()
    var_19 = var_18.__iter__()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_20 = linked_node_8.checkInfinite()
    var_21 = var_20.__repr__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__repr__()
    linked_node_9 = module_0.LinkedNode(var_22)
    bool_0 = True
    linked_node_10 = module_0.LinkedNode(bool_0)
    var_24 = linked_node_10.checkInfinite()
    bool_1 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_2}
    linked_node_11 = module_0.LinkedNode(set_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_12.value) == 0
    var_25 = linked_node_12.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_12, linked_list_10, bytes_3, linked_node_12]
    linked_list_11 = module_0.LinkedList(*list_0)
    assert len(linked_list_11) == 4
    var_26 = linked_list_11.__len__()
    assert var_26 == 4
    var_27 = var_4.__repr__()


def test_case_377():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    linked_node_6 = module_0.LinkedNode(var_14)
    assert linked_node_6.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_12 = module_0.LinkedList(*list_0)
    assert len(linked_list_12) == 2
    var_15 = linked_list_12.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_12.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_378():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_379():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"


def test_case_380():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, var_4)
    var_6 = var_1.__iter__()


def test_case_381():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()


def test_case_382():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, var_7)
    linked_node_6 = module_0.LinkedNode(linked_list_3, linked_node_4)
    assert len(linked_node_6.value) == 0


def test_case_383():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_384():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_node_3 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_7.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    var_10 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[False]"
    var_12 = linked_node_4.checkInfinite()


def test_case_385():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_1 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    var_14 = var_13.__iter__()
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_16 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_17, linked_list_9)
    assert len(linked_node_7.next) == 0
    var_18 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_19, var_19)
    linked_node_10 = module_0.LinkedNode(var_6)


def test_case_386():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()


def test_case_387():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__len__()
    linked_list_5 = module_0.LinkedList(*var_3)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0


def test_case_388():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(bool_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_14)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_0.__repr__()
    assert var_16 == "link:[]"


def test_case_389():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_7.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__iter__()
    var_16 = var_15.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_7.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_18.__len__()
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_24 = linked_node_10.checkInfinite()
    var_25 = linked_node_10.checkInfinite()
    var_26 = linked_list_8.__len__()
    assert var_26 == 0
    var_27 = linked_list_8.__len__()
    assert var_27 == 0
    linked_node_11 = module_0.LinkedNode(var_27)
    assert linked_node_11.value == 0
    linked_node_12 = module_0.LinkedNode(linked_list_3, var_15)
    assert len(linked_node_12.value) == 0


def test_case_390():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__iter__()
    linked_node_3 = module_0.LinkedNode(var_6)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_7 = var_5.__repr__()
    assert var_7 == "0"


def test_case_391():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_15 = linked_list_10.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_10.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_17 = linked_list_11.remove(linked_list_11)
    assert var_17 is False
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__repr__()
    var_22 = var_21.__len__()


def test_case_392():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(bool_0)
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_1)
    assert var_3 is False
    var_4 = linked_list_4.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList(*var_6)
    assert len(linked_list_5) == 5


def test_case_393():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_5.prepend(var_5)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[False]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(linked_list_6)
    assert var_10 is False
    var_11 = var_10.__repr__()
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    var_13 = linked_list_4.__iter__()
    var_14 = var_13.__repr__()


def test_case_394():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_14.__len__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_17 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_list_10.__len__()
    assert var_22 == 0
    var_23 = linked_list_10.__len__()
    assert var_23 == 0
    linked_node_9 = module_0.LinkedNode(var_23)
    assert linked_node_9.value == 0
    linked_node_10 = module_0.LinkedNode(linked_node_3)


def test_case_395():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.remove(linked_list_1)
    assert var_5 is False
    var_6 = var_5.__repr__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(var_10)
    assert linked_node_6.value == 0
    var_11 = linked_list_1.remove(bytes_0)


def test_case_396():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_11.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_14, linked_list_7)
    assert len(linked_node_8.next) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.remove(linked_list_8)
    assert var_15 is False
    var_16 = linked_node_0.checkInfinite()


def test_case_397():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_398():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_node_2 = module_0.LinkedNode(var_4)
    assert linked_node_2.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_13.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_16 = linked_list_6.remove(float_0)
    assert var_16 is False
    var_17 = linked_list_6.__repr__()
    assert (
        var_17
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_18 = var_6.__iter__()


def test_case_399():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9)
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_10 = linked_node_6.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_3.prepend(var_11)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    linked_node_10 = module_0.LinkedNode(var_17)
    assert linked_node_10.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_400():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1


def test_case_401():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()


def test_case_402():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"


def test_case_403():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_6 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_7.__repr__()
    assert var_9 == "'link:[]'"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_16 = linked_list_4.remove(linked_list_4)
    assert var_16 is False
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_5)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_5.prepend(var_17)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_21 = var_18.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_list_7.__len__()
    assert var_24 == 0
    var_25 = linked_list_7.__len__()
    assert var_25 == 0
    linked_node_11 = module_0.LinkedNode(var_25)
    assert linked_node_11.value == 0
    var_26 = var_24.__repr__()
    assert var_26 == "0"
    var_27 = linked_list_2.__repr__()
    assert var_27 == "link:[False]"


def test_case_404():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2)
    var_3 = var_2.__repr__()


def test_case_405():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_1.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, var_4)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__len__()
    assert var_8 == 7


def test_case_406():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_0, bytes_2, linked_node_2]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    var_2 = linked_list_1.__len__()
    assert var_2 == 4
    var_3 = linked_list_1.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    bytes_4 = b"U"
    set_1 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_2 = [set_1, set_1]
    linked_node_5 = module_0.LinkedNode(list_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_11 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_12, var_12)
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_node_10 = module_0.LinkedNode(complex_0)
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_5)
    var_14 = linked_node_11.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_12.value) == 0
    var_16 = linked_node_12.checkInfinite()
    var_17 = linked_list_5.prepend(var_14)
    assert len(linked_list_5) == 1
    assert len(linked_node_12.value) == 1
    var_18 = var_15.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_19 = linked_list_6.remove(linked_list_6)
    assert var_19 is False
    var_20 = linked_list_6.__len__()
    assert var_20 == 0
    none_type_0 = None
    linked_node_13 = module_0.LinkedNode(list_1, none_type_0)


def test_case_407():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    var_9 = var_4.__iter__()


def test_case_408():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0


def test_case_409():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_9 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_4, bytes_0, linked_node_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_10 = linked_list_5.__len__()
    assert var_10 == 4
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_12.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_17 = linked_node_5.checkInfinite()
    var_18 = linked_node_5.checkInfinite()
    var_19 = linked_list_8.__len__()
    assert var_19 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_20 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_20, linked_list_9)
    assert len(linked_node_7.next) == 0
    var_21 = linked_list_9.__iter__()
    var_22 = linked_node_1.checkInfinite()


def test_case_410():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = var_2.__repr__()
    assert var_8 == "0"


def test_case_411():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__len__()
    assert var_3 == 9


def test_case_412():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_3 = linked_list_0.remove(float_0)
    assert var_3 is False
    linked_node_2 = module_0.LinkedNode(bytes_1)


def test_case_413():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    bool_1 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(bool_1)
    assert var_7 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8, linked_list_5)
    assert len(linked_node_6.next) == 0
    bool_2 = True
    linked_node_7 = module_0.LinkedNode(bool_2)
    var_9 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_13 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_9.prepend(var_14)
    assert len(linked_list_9) == 1
    assert len(linked_node_10.value) == 1
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[False]"
    var_19 = linked_list_7.__repr__()
    assert var_19 == "link:[]"
    var_20 = var_19.__repr__()
    assert var_20 == "'link:[]'"


def test_case_414():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_0 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_5.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_1.__len__()
    assert var_8 == 1


def test_case_415():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_416():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__iter__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_5 = module_0.LinkedNode(var_5)
    var_7 = linked_node_2.checkInfinite()


def test_case_417():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_7, bytes_2, linked_node_6]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_12 = linked_list_8.__len__()
    assert var_12 == 4
    var_13 = linked_list_8.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_418():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_7 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_10 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[False]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_17 = linked_list_8.remove(float_0)
    assert var_17 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_node_0.checkInfinite()


def test_case_419():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, var_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_1)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__iter__()
    var_13 = linked_list_3.__len__()
    assert var_13 == 0


def test_case_420():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_421():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()


def test_case_422():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    linked_node_0 = module_0.LinkedNode(var_4)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__iter__()
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_1)
    assert var_12 is False
    var_13 = linked_list_5.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_14 = linked_list_0.pop()
    assert var_14 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_0) == 1


def test_case_423():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(bool_0)
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(var_2)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_1)
    assert var_3 is False
    var_4 = linked_list_4.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.remove(linked_list_5)
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_2.checkInfinite()
    assert var_7 is False
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_6.prepend(var_7)
    assert len(linked_list_6) == 1
    assert len(linked_node_3.value) == 1
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[False]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_3 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_3)
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    float_2 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_5, bytes_5]
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 2
    var_15 = linked_list_8.remove(float_2)
    assert var_15 is False
    bytes_6 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_6)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_16, var_16)
    var_18 = linked_list_5.remove(var_12)


def test_case_424():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)


def test_case_425():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_3 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.remove(var_1)
    assert var_6 is False


def test_case_426():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_node_5 = module_0.LinkedNode(var_9)
    assert linked_node_5.value == 0
    var_10 = var_8.__repr__()
    assert var_10 == "0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.remove(linked_list_5)
    assert var_11 is False
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    complex_0 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_0)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_13.__repr__()
    assert var_15 == "'link:[]'"
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    linked_node_10 = module_0.LinkedNode(var_6)


def test_case_427():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_428():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(bool_0)
    linked_node_2 = module_0.LinkedNode(var_6)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_19, linked_list_9)
    assert len(linked_node_10.next) == 0
    var_20 = linked_node_0.checkInfinite()


def test_case_429():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_node_3 = module_0.LinkedNode(var_10)
    assert linked_node_3.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__iter__()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_node_5.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    linked_node_6 = module_0.LinkedNode(var_19)
    assert linked_node_6.value == 0
    var_20 = var_18.__repr__()
    assert var_20 == "0"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_21 = linked_list_10.__iter__()
    var_22 = linked_node_6.checkInfinite()


def test_case_430():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_6 = linked_node_4.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(var_10)
    assert linked_node_6.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_1 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_8 = module_0.LinkedNode(set_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_11.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    linked_node_12 = module_0.LinkedNode(var_15)
    none_type_2 = None
    linked_node_13 = module_0.LinkedNode(none_type_2)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_14 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_14.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__repr__()
    bytes_5 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_15 = module_0.LinkedNode(bytes_5)
    var_21 = linked_node_15.checkInfinite()
    var_22 = var_21.__repr__()
    linked_list_6 = module_0.LinkedList(*var_20)
    assert len(linked_list_6) == 5


def test_case_431():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_6 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = var_0.__repr__()


def test_case_432():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_7 = linked_list_1.remove(linked_list_1)
    assert var_7 is False
    var_8 = linked_list_1.__len__()
    assert var_8 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    linked_node_8 = module_0.LinkedNode(var_15)
    assert linked_node_8.value == 0
    var_16 = var_14.__repr__()
    assert var_16 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    set_0 = {var_3}
    linked_node_10 = module_0.LinkedNode(none_type_0, set_0)


def test_case_433():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.remove(bool_0)
    assert var_11 is False
    linked_node_4 = module_0.LinkedNode(var_11)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_0.__repr__()
    assert (
        var_17
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_434():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    var_10 = var_9.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_3, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_14 = linked_list_8.__len__()
    assert var_14 == 4
    var_15 = linked_list_8.__repr__()
    linked_list_9 = module_0.LinkedList(*var_15)
    assert len(linked_list_9) == 164


def test_case_435():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(bool_0)
    assert var_6 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_node_4 = module_0.LinkedNode(var_10)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_1)
    linked_node_5 = module_0.LinkedNode(tuple_0, bool_1)
    var_11 = linked_node_0.checkInfinite()


def test_case_436():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    bool_1 = True
    dict_1 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_1, bytes_0, bool_1)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(linked_list_4)
    assert var_4 is False
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_0)
    assert var_6 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    assert var_8 is False
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_8.__len__()
    assert var_10 == 0
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == 0
    var_12 = var_10.__repr__()
    assert var_12 == "0"
    var_13 = linked_node_0.checkInfinite()


def test_case_437():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__iter__()
    linked_node_7 = module_0.LinkedNode(var_13)
    assert (
        f"{type(linked_node_7.value).__module__}.{type(linked_node_7.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = linked_list_9.__len__()
    assert var_20 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_438():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == "0"


def test_case_439():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    var_11 = var_10.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_16 = var_13.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_17)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_list_7.__repr__()
    assert var_18 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_0 = [set_0, set_0]
    linked_node_10 = module_0.LinkedNode(list_0)
    var_19 = linked_node_10.checkInfinite()
    var_20 = var_18.__repr__()
    assert var_20 == "'link:[]'"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_node_11.checkInfinite()
    var_23 = linked_list_9.__len__()
    assert var_23 == 0
    var_24 = linked_list_9.__iter__()
    float_0 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_5, bytes_5]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_25 = linked_list_10.remove(float_0)
    assert var_25 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_26 = linked_list_11.__len__()
    assert var_26 == 0
    var_27 = linked_list_6.__repr__()
    assert var_27 == "link:[]"
    var_28 = var_27.__repr__()
    assert var_28 == "'link:[]'"
    var_29 = var_28.__repr__()
    assert var_29 == "\"'link:[]'\""


def test_case_440():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_3 = module_0.LinkedNode(var_5)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_8.__len__()
    var_11 = linked_node_1.checkInfinite()


def test_case_441():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    var_5 = linked_list_0.__len__()
    assert var_5 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    assert len(linked_node_7.value) == 1
    var_10 = linked_list_1.__repr__()
    assert var_10 == "link:[False]"
    none_type_2 = None
    linked_node_8 = module_0.LinkedNode(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_442():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.remove(bool_0)
    assert var_3 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_8 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_node_4 = module_0.LinkedNode(var_4)


def test_case_443():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_node_5 = module_0.LinkedNode(linked_node_4, var_0)


def test_case_444():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False


def test_case_445():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    var_4 = linked_node_0.checkInfinite()


def test_case_446():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_9.__len__()
    var_12 = linked_list_2.remove(linked_node_0)


def test_case_447():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_node_5 = module_0.LinkedNode(var_9)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_2.__len__()
    assert var_15 == 0
    var_16 = linked_list_2.__len__()
    assert var_16 == 0
    linked_node_8 = module_0.LinkedNode(var_16)
    assert linked_node_8.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_17)
    var_18 = linked_list_1.remove(var_2)
    assert var_18 is False


def test_case_448():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1


def test_case_449():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_node_2 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_2.value).__module__}.{type(linked_node_2.value).__qualname__}"
        == "builtins.generator"
    )
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0


def test_case_450():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_451():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False


def test_case_452():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_5 = module_0.LinkedNode(var_4)
    assert linked_node_5.value == 0
    var_5 = var_0.__repr__()
    var_6 = var_5.__repr__()


def test_case_453():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_7 = var_4.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_node_6 = module_0.LinkedNode(var_11)
    assert linked_node_6.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_454():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__iter__()


def test_case_455():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_456():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    var_5 = var_2.__repr__()


def test_case_457():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_4 = var_1.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_2.checkInfinite()


def test_case_458():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, var_4)
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_459():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"


def test_case_460():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.remove(bool_0)
    assert var_0 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_1 = linked_list_3.remove(float_0)
    assert var_1 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_2 = linked_list_4.__len__()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_461():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_node_3.checkInfinite()


def test_case_462():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_3 = module_0.LinkedNode(var_4)
    assert linked_node_3.value == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    var_5 = var_0.__repr__()


def test_case_463():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_2.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_0)


def test_case_464():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)


def test_case_465():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()


def test_case_466():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1


def test_case_467():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    var_9 = linked_list_1.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    bool_0 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_12.__len__()
    var_15 = var_1.__len__()


def test_case_468():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1


def test_case_469():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()


def test_case_470():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_5, bytes_2, linked_node_5]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    var_12 = linked_list_6.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13, linked_list_8)
    assert len(linked_node_7.next) == 0
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = linked_list_5.__iter__()


def test_case_471():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_7 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    var_11 = linked_list_2.__len__()
    assert var_11 == 0
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_15 = linked_list_3.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_node_7.checkInfinite()
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_0 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_0)
    var_17 = linked_node_8.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_5.__len__()
    assert var_20 == 0
    var_21 = linked_list_1.prepend(linked_list_0)
    assert len(linked_list_1) == 1


def test_case_472():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__len__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_7 = linked_list_3.remove(bytes_2)
    assert var_7 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_1 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_13 = linked_list_7.prepend(dict_1)
    assert len(linked_list_7) == 1
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_14 = var_4.__repr__()


def test_case_473():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_8 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_1 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_10 = linked_list_3.prepend(dict_1)
    assert len(linked_list_3) == 1
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_6.checkInfinite()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_16 = linked_list_6.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_11.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_20 = var_7.__repr__()


def test_case_474():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_14 = linked_list_7.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_7.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_13)
    assert linked_node_5.value == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_6, linked_list_8, bytes_2, linked_node_6]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_17 = linked_list_9.__len__()
    assert var_17 == 4
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_18 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_node_8.checkInfinite()
    var_21 = linked_list_10.prepend(var_19)
    assert len(linked_list_10) == 1
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    linked_node_10 = module_0.LinkedNode(linked_node_9)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_11.value) == 0
    var_22 = linked_node_11.checkInfinite()
    var_23 = linked_node_11.checkInfinite()
    var_24 = linked_list_12.__repr__()
    assert var_24 == "link:[]"
    linked_node_12 = module_0.LinkedNode(list_0, linked_list_3)
    assert len(linked_node_12.next) == 1


def test_case_475():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    var_4 = linked_list_3.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    linked_node_6 = module_0.LinkedNode(linked_list_2, bytes_3)
    assert len(linked_node_6.value) == 0


def test_case_476():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11, linked_list_7)
    assert len(linked_node_6.next) == 0
    var_12 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_13 = linked_list_8.remove(bytes_1)
    assert var_13 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    linked_node_9 = module_0.LinkedNode(var_17)
    assert linked_node_9.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_13.__len__()
    assert var_20 == 0
    var_21 = linked_list_12.__iter__()
    var_22 = linked_list_12.__len__()
    assert var_22 == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_23 = linked_list_14.remove(linked_list_14)
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_15 = module_0.LinkedList(*list_2)
    assert len(linked_list_15) == 1
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0


def test_case_477():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4


def test_case_478():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_479():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_10 = var_7.__iter__()
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.remove(linked_list_4)
    assert var_11 is False
    var_12 = var_11.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_node_11.checkInfinite()
    complex_4 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_4)
    linked_node_13 = module_0.LinkedNode(complex_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_14.value) == 0
    var_15 = linked_node_14.checkInfinite()
    var_16 = linked_node_14.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    linked_node_15 = module_0.LinkedNode(var_18)
    assert linked_node_15.value == 0
    var_19 = linked_list_1.__len__()
    assert var_19 == 1


def test_case_480():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 1
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(bool_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_5, bytes_2, linked_node_5]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_481():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7, var_7)
    bool_1 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.prepend(bool_1)
    assert len(linked_list_4) == 1
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_node_7 = module_0.LinkedNode(var_12)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_2.__repr__()
    assert var_18 == "link:[{link:[{...}]: link:[{...}]}]"


def test_case_482():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(complex_0)


def test_case_483():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_484():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    var_3 = linked_list_2.__repr__()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    var_4 = linked_list_0.remove(list_0)
    assert var_4 is False


def test_case_485():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_2 = linked_list_1.remove(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_3.prepend(var_11)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.__repr__()
    assert var_14 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_15 = linked_list_6.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_6.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_14)
    assert linked_node_6.value == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_1)
    var_17 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_list_8.__repr__()
    assert var_20 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_23 = linked_list_11.__iter__()


def test_case_486():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"


def test_case_487():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    linked_node_4 = module_0.LinkedNode(var_13)
    assert linked_node_4.value == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_14 = linked_list_6.remove(float_0)
    assert var_14 is False
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_list_7.prepend(bytes_3)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_node_7.checkInfinite()
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    var_22 = linked_list_9.__iter__()
    var_23 = var_22.__iter__()
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_24 = linked_node_8.checkInfinite()
    var_25 = var_24.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_26 = linked_list_5.prepend(var_16)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1


def test_case_488():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    var_5 = var_3.__repr__()
    assert var_5 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_7, bytes_0, linked_node_5]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_13 = linked_list_8.__len__()
    assert var_13 == 4
    var_14 = linked_list_8.__repr__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    bool_1 = True
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.prepend(bool_1)
    assert len(linked_list_9) == 1
    linked_node_8 = module_0.LinkedNode(var_8, var_4)
    assert linked_node_8.value == "link:[]"
    assert linked_node_8.next == 0


def test_case_489():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_4.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(linked_list_5)
    assert var_6 is False
    var_7 = var_6.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_10 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_list_10.prepend(var_13)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    var_17 = var_14.__iter__()
    var_18 = var_14.__repr__()
    var_19 = var_18.__repr__()


def test_case_490():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_0, bytes_0, linked_node_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_2 = linked_list_1.__len__()
    assert var_2 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_7 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_4.prepend(var_10)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_12 = linked_list_4.prepend(var_10)
    assert len(linked_list_4) == 2
    assert len(linked_node_4.value) == 2


def test_case_491():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"


def test_case_492():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    var_10 = linked_node_5.checkInfinite()


def test_case_493():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.remove(linked_list_6)
    assert var_8 is False
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    bool_1 = False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.remove(bool_1)
    linked_node_7 = module_0.LinkedNode(var_10)
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_11 = linked_list_11.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_11.__iter__()
    var_13 = linked_list_1.remove(linked_node_1)


def test_case_494():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3


def test_case_495():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_1.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_7 = var_5.__iter__()


def test_case_496():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""


def test_case_497():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_5, linked_list_6, bytes_2, linked_node_5]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    var_14 = var_8.__repr__()
    assert var_14 == "'link:[]'"


def test_case_498():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(bool_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_2 = None
    linked_node_3 = module_0.LinkedNode(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_11 = var_5.__iter__()


def test_case_499():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_500():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_4.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_6.prepend(var_8)
    assert len(linked_list_6) == 1
    assert len(linked_node_2.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_10 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(float_0)


def test_case_501():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_3.next) == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(bool_0)
    assert var_3 is False
    linked_node_4 = module_0.LinkedNode(var_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_node_7 = module_0.LinkedNode(var_7)
    assert linked_node_7.value == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_8.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    var_11 = linked_list_6.prepend(var_8)
    assert len(linked_list_6) == 1
    assert len(linked_node_9.value) == 1
    var_12 = linked_list_4.remove(bool_0)


def test_case_502():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_6 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_3.prepend(var_10)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_503():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__repr__()
    assert var_7 == "link:[]"


def test_case_504():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_7 = linked_list_3.__iter__()
    var_8 = linked_list_2.remove(linked_node_1)
    assert var_8 is False


def test_case_505():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_3 = linked_list_2.__len__()
    assert var_3 == 4
    var_4 = linked_list_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    var_6 = var_5.__repr__()
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_3)
    assert linked_node_2.value == "link:[{link:[{...}]: link:[{...}]}]"
    assert len(linked_node_2.next) == 0


def test_case_506():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_4 = var_1.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, linked_list_1)
    assert len(linked_node_5.next) == 0
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_0)
    var_8 = linked_node_6.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_9, linked_list_2)
    assert len(linked_node_8.next) == 0
    var_10 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_4.prepend(var_13)
    assert len(linked_list_4) == 1
    assert len(linked_node_9.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    var_18 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.__repr__()
    assert var_19 == "link:[]"
    bytes_3 = b"U"
    set_1 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_1, set_1]
    linked_node_11 = module_0.LinkedNode(list_1)
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_19.__repr__()
    assert var_21 == "'link:[]'"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_22 = linked_node_12.checkInfinite()
    var_23 = linked_node_12.checkInfinite()
    var_24 = linked_list_8.__repr__()
    assert var_24 == "link:[]"
    linked_node_13 = module_0.LinkedNode(var_22)


def test_case_507():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_1, linked_list_3, bytes_1, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__len__()
    assert var_5 == 4
    var_6 = linked_list_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_12.__len__()
    var_15 = linked_list_5.__repr__()
    assert var_15 == "link:[]"


def test_case_508():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96


def test_case_509():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0


def test_case_510():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0


def test_case_511():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_12 = linked_list_4.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_4.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == "link:[]"
    var_14 = linked_list_3.prepend(var_12)
    assert len(linked_list_3) == 1


def test_case_512():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()


def test_case_513():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_8.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_16 = linked_list_10.remove(float_0)
    assert var_16 is False
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_9 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_11.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__repr__()
    linked_node_12 = module_0.LinkedNode(var_19)
    var_21 = var_5.__repr__()


def test_case_514():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_6 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_3.prepend(var_15)
    assert len(linked_list_3) == 1
    assert len(linked_node_9.value) == 1
    var_19 = var_16.__iter__()
    none_type_2 = None
    linked_node_10 = module_0.LinkedNode(none_type_2)
    linked_node_11 = module_0.LinkedNode(none_type_2)
    var_20 = var_5.__repr__()


def test_case_515():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1


def test_case_516():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"


def test_case_517():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()


def test_case_518():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_node_2 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_2.value).__module__}.{type(linked_node_2.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList(*var_8)
    assert len(linked_list_4) == 7


def test_case_519():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()


def test_case_520():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_7.__iter__()
    var_11 = var_10.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    var_15 = linked_list_9.__iter__()
    linked_node_7 = module_0.LinkedNode(var_15)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_node_8.checkInfinite()
    var_21 = linked_list_12.__len__()
    assert var_21 == 0
    var_22 = linked_list_12.__len__()
    assert var_22 == 0
    linked_node_9 = module_0.LinkedNode(var_22)
    assert linked_node_9.value == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_23 = linked_node_3.checkInfinite()


def test_case_521():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_1 = var_0.__iter__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 1
    bool_1 = True
    linked_node_0 = module_0.LinkedNode(bool_1)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_2)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_9 = linked_list_4.__len__()
    assert var_9 == 0


def test_case_522():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_3 = module_0.LinkedNode(var_4)
    assert linked_node_3.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[False]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_node_11.checkInfinite()
    var_23 = linked_list_10.__repr__()
    assert var_23 == "link:[]"
    var_24 = linked_list_11.prepend(var_23)
    assert len(linked_list_11) == 1
    assert len(linked_node_11.value) == 1
    var_25 = linked_list_6.__iter__()


def test_case_523():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    linked_node_7 = module_0.LinkedNode(linked_node_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_524():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(var_2)


def test_case_525():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(linked_list_6)
    assert var_10 is False
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_1.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_526():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0


def test_case_527():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)


def test_case_528():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_7 = var_4.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_6 = module_0.LinkedNode(var_10)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_4.__iter__()
    var_16 = linked_list_4.__len__()
    assert var_16 == 0
    none_type_2 = None
    linked_node_8 = module_0.LinkedNode(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_1, bytes_2, bool_0)
    linked_node_9 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = var_18.__len__()
    var_21 = linked_list_5.__iter__()


def test_case_529():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_4 = linked_list_5.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_5.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 1
    var_6 = linked_list_6.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_6) == 0
    var_7 = var_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_9.__len__()
    assert var_11 == 0
    var_12 = linked_list_9.__iter__()
    var_13 = var_12.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_5.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_15.__len__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    float_1 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_4, bytes_4]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_21 = linked_list_11.remove(float_1)
    assert var_21 is False
    var_22 = linked_list_11.__repr__()
    assert (
        var_22
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_12 = module_0.LinkedList(*var_22)
    assert len(linked_list_12) == 96
    var_23 = var_17.__repr__()


def test_case_530():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_6 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_9 = linked_node_1.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    linked_list_6 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_6) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_2.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_13 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_8, bytes_2, linked_node_3]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_14 = linked_list_9.__len__()
    assert var_14 == 4
    var_15 = linked_list_9.__repr__()
    var_16 = linked_list_9.__repr__()


def test_case_531():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(var_3)


def test_case_532():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    var_11 = linked_list_0.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_533():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    var_7 = linked_list_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_11 = linked_node_2.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_534():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_node_6 = module_0.LinkedNode(complex_2)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_13, linked_list_6)
    assert len(linked_node_10.next) == 0
    var_14 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_15 = linked_list_8.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_8.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_list_10.__len__()
    assert var_19 == 0
    var_20 = linked_list_10.__len__()
    assert var_20 == 0
    linked_node_12 = module_0.LinkedNode(var_20)
    assert linked_node_12.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_13.value) == 0
    var_21 = linked_node_13.checkInfinite()
    var_22 = linked_node_13.checkInfinite()
    linked_node_14 = module_0.LinkedNode(var_21, var_21)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_15 = module_0.LinkedNode(bytes_2)
    linked_node_16 = module_0.LinkedNode(linked_node_15)
    var_23 = var_21.__repr__()


def test_case_535():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_10)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11, var_11)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_7)
    assert len(linked_node_8.next) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_9.__iter__()
    linked_node_11 = module_0.LinkedNode(bytes_0)


def test_case_536():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )


def test_case_537():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1


def test_case_538():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_1, bytes_0, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.remove(linked_list_6)
    assert var_6 is False
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_8 = linked_list_8.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    linked_node_7 = module_0.LinkedNode(var_7)
    assert linked_node_7.value == 0


def test_case_539():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_6, var_6)
    var_8 = linked_list_4.prepend(linked_node_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1


def test_case_540():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, var_5)
    linked_node_5 = module_0.LinkedNode(var_6)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    linked_node_7 = module_0.LinkedNode(var_10)
    assert linked_node_7.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = False
    linked_node_8 = module_0.LinkedNode(bool_0)


def test_case_541():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_9 = linked_list_0.__repr__()
    assert var_9 == "link:[]"
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_10 = linked_list_1.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_1.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_9)
    assert linked_node_6.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_13.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_2 = None
    linked_node_9 = module_0.LinkedNode(none_type_2)
    var_16 = linked_list_2.__len__()
    assert var_16 == 0


def test_case_542():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_6)
    assert linked_node_2.value == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_5, bytes_2, linked_node_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    var_10 = linked_list_6.__len__()
    assert var_10 == 4
    var_11 = linked_list_6.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[False]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_17 = linked_list_8.__repr__()
    assert var_17 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_2 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_2)
    var_18 = linked_node_6.checkInfinite()
    var_19 = var_17.__repr__()
    assert var_19 == "'link:[]'"
    var_20 = linked_list_8.__len__()
    assert var_20 == 0
    float_1 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_5, bytes_5]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 2
    var_21 = linked_list_9.remove(float_1)
    assert var_21 is False
    var_22 = linked_list_9.__iter__()
    linked_node_7 = module_0.LinkedNode(linked_node_1)


def test_case_543():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_3, var_3)
    var_5 = var_2.__repr__()
    assert var_5 == "4"


def test_case_544():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, linked_list_1)
    assert len(linked_node_4.next) == 0
    var_7 = var_0.__repr__()


def test_case_545():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False


def test_case_546():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"


def test_case_547():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_4, bytes_3, linked_node_8]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_11 = linked_list_5.__len__()
    assert var_11 == 4
    var_12 = linked_list_5.__repr__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_0 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_5, bytes_5]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_15 = linked_list_8.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_6.prepend(linked_list_1)
    assert len(linked_list_6) == 5


def test_case_548():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_1 = linked_list_2.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_2.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_0.__iter__()


def test_case_549():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_550():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_1, bytes_0, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(bool_1)
    assert var_6 is False
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_node_7 = module_0.LinkedNode(var_9)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_551():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = var_1.__repr__()
    assert (
        var_3
        == "'link:[b\"&Z\\\\xac\\\\x82WC\\\\xc4\\\\x88\\'\\\\\\\\m\\\\x0c\\\\xaf\\\\xccJ\\\\xda\",b\"&Z\\\\xac\\\\x82WC\\\\xc4\\\\x88\\'\\\\\\\\m\\\\x0c\\\\xaf\\\\xccJ\\\\xda\"]'"
    )


def test_case_552():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.prepend(bytes_1)
    assert len(linked_list_3) == 1
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_4 = linked_list_5.remove(float_1)
    assert var_4 is False
    var_5 = linked_list_5.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_3)
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_6.prepend(var_6)
    assert len(linked_list_6) == 1
    assert len(linked_node_2.value) == 1
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[False]"
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 2


def test_case_553():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False


def test_case_554():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_3)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_node_4.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    complex_4 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_0.__len__()
    assert var_10 == 1


def test_case_555():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"


def test_case_556():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_2.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_3.prepend(var_10)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_1, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_13 = linked_list_5.__len__()
    assert var_13 == 4
    var_14 = linked_list_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_15 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    linked_node_5 = module_0.LinkedNode(var_12)


def test_case_557():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(list_0)


def test_case_558():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_1 = linked_list_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_3)
    assert len(linked_list_3) == 96
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 2
    var_4 = linked_list_5.remove(float_1)
    assert var_4 is False
    var_5 = linked_list_5.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_4 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_4)
    assert len(linked_list_6) == 2
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_559():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_5.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == "link:[]"
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(linked_list_6)
    assert var_10 is False
    var_11 = var_10.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_8.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    bool_1 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_list_7.remove(bool_1)
    linked_node_10 = module_0.LinkedNode(var_18)
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_12.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__repr__()
    linked_node_13 = module_0.LinkedNode(var_21)
    var_23 = var_13.__len__()


def test_case_560():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    var_7 = linked_node_0.checkInfinite()


def test_case_561():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_7)


def test_case_562():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 1
    bool_0 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    var_14 = linked_list_5.__iter__()
    linked_node_5 = module_0.LinkedNode(var_14)
    assert (
        f"{type(linked_node_5.value).__module__}.{type(linked_node_5.value).__qualname__}"
        == "builtins.generator"
    )
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_node_7 = module_0.LinkedNode(none_type_1)
    var_15 = var_3.__len__()


def test_case_563():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False


def test_case_564():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_2.__iter__()
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(bool_0)
    assert var_4 is False
    linked_node_5 = module_0.LinkedNode(var_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    var_9 = var_8.__iter__()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_2)


def test_case_565():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(bytes_1)


def test_case_566():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_8 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    linked_node_5 = module_0.LinkedNode(var_13)
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_node_6.checkInfinite()
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_node_8 = module_0.LinkedNode(complex_2)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_567():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_3, linked_node_0)


def test_case_568():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()


def test_case_569():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_3 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    linked_node_4 = module_0.LinkedNode(var_7)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_10, linked_list_7)
    assert len(linked_node_6.next) == 0
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_node_7 = module_0.LinkedNode(var_11)
    assert linked_node_7.value == 0


def test_case_570():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()


def test_case_571():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.pop()
    assert var_3 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_4 = var_3.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_3, bytes_2, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_9 = linked_list_4.__len__()
    assert var_9 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_8.prepend(var_16)
    assert len(linked_list_8) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(var_17, linked_node_5)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_7.remove(none_type_0)
    assert var_18 is False


def test_case_572():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False


def test_case_573():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_6)
    assert len(linked_list_3) == 96
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_1)
    assert var_7 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_10 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    bool_1 = True
    dict_1 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_0 = (dict_1, bytes_3, bool_1)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_1)
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    var_12 = var_0.__iter__()
    var_13 = var_12.__repr__()


def test_case_574():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_575():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_1.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_576():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0


def test_case_577():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 3
    var_11 = linked_list_7.__repr__()
    assert (
        var_11
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    linked_node_7 = module_0.LinkedNode(var_17)
    assert linked_node_7.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_578():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_3, bytes_1, linked_node_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_4 = module_0.LinkedNode(set_0)
    var_10 = var_3.__repr__()
    assert var_10 == "False"


def test_case_579():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(var_0)


def test_case_580():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_3 = module_0.LinkedNode(var_5)
    var_7 = var_4.__len__()


def test_case_581():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 3
    var_6 = var_3.__repr__()
    assert var_6 == "0"


def test_case_582():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_0, var_0)
    linked_node_4 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_3, linked_list_3)
    assert len(linked_node_6.next) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_7.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_6.__iter__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_12 = module_0.LinkedNode(complex_4)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_9 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    complex_5 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_5)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_11 = linked_list_0.prepend(complex_3)
    assert len(linked_list_0) == 5


def test_case_583():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)


def test_case_584():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_6 = var_3.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_7 = linked_list_2.remove(float_0)
    assert var_7 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(linked_list_3)
    var_9 = linked_list_3.__len__()
    assert var_9 == 0


def test_case_585():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_6, linked_node_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_10.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_13 = linked_list_6.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_6.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_16.__len__()
    var_19 = linked_node_3.checkInfinite()


def test_case_586():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.remove(linked_list_4)
    assert var_3 is False
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()


def test_case_587():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_3 = var_2.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    var_5 = var_4.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.remove(float_0)
    assert var_6 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_3.checkInfinite()
    assert var_8 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(var_7)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_3.prepend(var_1)
    assert len(linked_list_3) == 1


def test_case_588():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(bool_0)
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"


def test_case_589():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_0, var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_4 = linked_list_1.pop()
    assert var_4 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_5 = var_4.__iter__()
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[]"


def test_case_590():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_3 = linked_list_1.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_0)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = linked_list_3.__len__()
    assert var_12 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_4.remove(linked_list_4)
    bool_1 = True
    linked_node_10 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_10.checkInfinite()
    var_15 = var_4.__repr__()


def test_case_591():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_2.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_3.prepend(var_10)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.remove(linked_list_4)
    assert var_12 is False
    var_13 = linked_list_4.__len__()
    assert var_13 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_17 = linked_list_5.__iter__()
    var_18 = linked_list_6.remove(linked_list_6)
    var_19 = linked_list_0.__iter__()


def test_case_592():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_1 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_2 = (tuple_1, int_0, bytes_2)
    list_0 = [str_0, tuple_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_node_1.checkInfinite()


def test_case_593():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False


def test_case_594():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_5 = linked_list_1.remove(float_0)
    assert var_5 is False
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_4 = module_0.LinkedNode(var_8)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_10 = linked_list_2.remove(bool_0)
    assert var_10 is False
    linked_node_5 = module_0.LinkedNode(var_10)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    linked_node_7 = module_0.LinkedNode(linked_node_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_11 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_13, linked_list_5)
    assert len(linked_node_10.next) == 0
    var_14 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_4.__len__()
    assert var_16 == 1


def test_case_595():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()


def test_case_596():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_597():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_5, bytes_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_15 = linked_list_3.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_3.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_4.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_list_5.prepend(var_19)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    linked_node_9 = module_0.LinkedNode(var_20, linked_node_8)
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_21 = linked_list_7.__repr__()
    assert var_21 == "link:[]"
    var_22 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_23 = linked_list_8.__repr__()
    assert var_23 == "link:[]"
    bytes_6 = b"U"
    set_0 = {bytes_6, bytes_6, bytes_6, bytes_6}
    list_1 = [set_0, set_0]
    linked_node_12 = module_0.LinkedNode(list_1)
    var_24 = linked_node_12.checkInfinite()
    var_25 = var_23.__repr__()
    assert var_25 == "'link:[]'"
    var_26 = linked_list_8.__len__()
    assert var_26 == 0
    var_27 = linked_node_5.checkInfinite()


def test_case_598():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    linked_node_7 = module_0.LinkedNode(var_13)
    assert linked_node_7.value == 0
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    object_0 = module_1.object()
    linked_node_8 = module_0.LinkedNode(object_0)


def test_case_599():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_8 = linked_node_2.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_9, var_1)
    assert linked_node_4.value == "link:[]"


def test_case_600():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"


def test_case_601():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bytes_0)


def test_case_602():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_2)
    assert linked_node_1.value == "link:[]"
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.remove(var_7)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_15 = linked_list_6.remove(float_1)
    assert var_15 is False
    linked_node_6 = module_0.LinkedNode(float_1, bytes_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_8.__len__()
    assert var_18 == 0
    var_19 = linked_list_7.__iter__()
    var_20 = linked_list_8.remove(linked_list_8)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_21 = linked_list_9.remove(linked_list_9)
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_25 = linked_list_10.remove(linked_list_10)
    linked_node_11 = module_0.LinkedNode(linked_list_8, var_9)
    assert len(linked_node_11.value) == 0
    assert linked_node_11.next == 0


def test_case_603():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_0.__iter__()
    var_8 = linked_list_0.__len__()
    assert var_8 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_2.__iter__()
    var_13 = linked_list_3.remove(linked_list_3)
    assert var_13 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_14 = linked_list_4.remove(bytes_1)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_node_7.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_21, var_21)
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_11 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_23 = linked_list_10.__iter__()
    none_type_2 = None
    linked_node_12 = module_0.LinkedNode(none_type_2)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_2)
    var_24 = linked_node_13.checkInfinite()
    var_25 = var_24.__repr__()
    var_26 = var_24.__repr__()
    var_27 = var_24.__repr__()
    var_28 = linked_list_5.prepend(var_4)
    assert len(linked_list_5) == 2


def test_case_604():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"


def test_case_605():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_2 = linked_list_2.__repr__()
    assert (
        var_2
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_3 = linked_list_2.pop()
    assert var_3 == "2z8Y!\rS\\wS1L"
    assert len(linked_list_2) == 2


def test_case_606():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    var_11 = linked_list_4.remove(var_6)
    assert var_11 is False


def test_case_607():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2


def test_case_608():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_3 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_0, bytes_2, linked_node_4]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_5 = linked_list_1.__len__()
    assert var_5 == 4
    var_6 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.remove(linked_list_4)
    assert var_10 is False
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__repr__()
    assert var_12 == "link:[]"


def test_case_609():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    var_9 = linked_list_1.remove(none_type_1)
    assert var_9 is False
    var_10 = linked_list_1.__iter__()


def test_case_610():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_6 = linked_list_1.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_7 = var_6.__iter__()
    var_8 = linked_list_0.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_611():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_3, bytes_0, linked_node_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__len__()
    assert var_5 == 4
    var_6 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__iter__()
    var_11 = var_10.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    var_15 = linked_list_8.__iter__()
    linked_node_5 = module_0.LinkedNode(var_15)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    complex_0 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_16 = linked_list_9.remove(none_type_0)
    assert var_16 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(linked_list_10)
    assert var_17 is False
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_20 = linked_list_11.__repr__()
    assert var_20 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_12 = module_0.LinkedList(*list_2)
    assert len(linked_list_12) == 2
    var_21 = linked_list_12.remove(float_0)
    assert var_21 is False
    var_22 = linked_list_12.__repr__()
    assert (
        var_22
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_9 = module_0.LinkedNode(var_20)
    assert linked_node_9.value == "link:[]"
    complex_2 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_node_11 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_11.value) == 0


def test_case_612():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_6 = linked_node_3.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.remove(var_8)
    assert var_9 is False
    var_10 = var_9.__repr__()


def test_case_613():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_1 = module_0.LinkedNode(var_5)
    assert linked_node_1.value == 0
    var_6 = var_4.__repr__()
    assert var_6 == "0"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_11 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_11, linked_list_6)
    assert len(linked_node_3.next) == 0
    var_12 = linked_list_6.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(linked_list_7)
    assert var_13 is False
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_16 = linked_node_5.checkInfinite()
    var_17 = var_5.__repr__()
    assert var_17 == "0"


def test_case_614():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_1)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(bytes_2)
    assert len(linked_list_2) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    float_2 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_4, bytes_4]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_2)
    assert var_8 is False
    var_9 = linked_list_5.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    bytes_5 = b"U"
    set_0 = {bytes_5, bytes_5, bytes_5, bytes_5}
    list_3 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_node_4.checkInfinite()


def test_case_615():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_0, var_0)
    linked_node_4 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_3 = linked_list_3.pop()
    assert var_3 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_4 = var_3.__iter__()
    var_5 = linked_list_3.__iter__()


def test_case_616():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_1)
    assert len(linked_node_2.next) == 0


def test_case_617():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_node_2.checkInfinite()


def test_case_618():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[False]"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_node_0.checkInfinite()


def test_case_619():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    bool_1 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.prepend(bool_1)
    assert len(linked_list_4) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_4 = linked_list_5.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_5.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 2
    var_6 = linked_list_7.remove(float_1)
    assert var_6 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_7 = linked_list_8.__len__()
    assert var_7 == 0
    bool_2 = False
    list_4 = [bool_2, bool_2, bool_2, bool_2]
    linked_list_9 = module_0.LinkedList(*list_4)
    assert len(linked_list_9) == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_620():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_list_2.__iter__()
    var_3 = linked_list_0.__len__()
    assert var_3 == 0


def test_case_621():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0


def test_case_622():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_1, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    bool_0 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_4.prepend(var_4)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_8 = var_5.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(linked_list_5)
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11, var_11)
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__iter__()
    var_14 = var_10.__repr__()


def test_case_623():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_624():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_1 = linked_list_1.remove(none_type_0)
    assert var_1 is False
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    var_4 = linked_list_5.__repr__()
    assert var_4 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_7.__len__()
    assert var_7 == 0
    var_8 = linked_list_6.__iter__()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False


def test_case_625():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_1.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    var_11 = var_8.__repr__()
    var_12 = linked_list_4.pop()
    assert var_12 is False
    assert len(linked_list_4) == 0
    assert len(linked_node_2.value) == 0


def test_case_626():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_1)
    assert var_5 is False
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_3)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    list_3 = [list_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    float_2 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_4, bytes_4]
    linked_list_5 = module_0.LinkedList(*list_4)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_2)
    assert var_8 is False
    var_9 = linked_list_5.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*var_9)
    assert len(linked_list_6) == 96
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    var_13 = linked_list_8.__iter__()
    var_14 = var_13.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(linked_list_0)
    assert var_15 is False


def test_case_627():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_8.prepend(var_12)
    assert len(linked_list_8) == 1
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_list_11.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__iter__()
    var_19 = linked_list_5.__iter__()


def test_case_628():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    var_7 = linked_list_1.remove(linked_list_0)
    assert var_7 is False


def test_case_629():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_2.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(var_6)
    assert var_8 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.remove(var_11)


def test_case_630():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_631():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_12.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_15 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_17 = linked_list_1.__repr__()
    assert var_17 == "link:[]"


def test_case_632():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_633():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_0)
    var_13 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_14 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_node_10.checkInfinite()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_18 = linked_list_9.remove(float_0)
    assert var_18 is False
    var_19 = linked_list_9.__repr__()
    assert (
        var_19
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    linked_list_11 = module_0.LinkedList(*var_13)
    assert (
        f"{type(linked_list_11).__module__}.{type(linked_list_11).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_11) == 0


def test_case_634():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_8, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_9 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_11 = linked_list_4.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_4.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_10)
    assert linked_node_5.value == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_16 = linked_list_7.remove(float_1)
    assert var_16 is False
    var_17 = linked_list_7.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_9.__iter__()
    bool_0 = False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_20 = linked_list_10.remove(bool_0)
    linked_node_11 = module_0.LinkedNode(bytes_1)


def test_case_635():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_7 = linked_node_1.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_9 = linked_list_4.remove(bytes_1)
    assert var_9 is False
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_636():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"


def test_case_637():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    var_8 = var_6.__repr__()
    assert var_8 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    var_13 = var_12.__iter__()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_6.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_7.prepend(var_16)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(var_17, linked_node_5)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.remove(linked_list_9)
    assert var_18 is False
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_22 = linked_list_10.remove(float_0)
    assert var_22 is False
    var_23 = linked_list_10.__iter__()
    var_24 = linked_list_0.__repr__()
    assert var_24 == "link:[]"


def test_case_638():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, var_7)
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_9, var_9)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__iter__()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_639():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == "link:[]"
    bool_0 = True
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    list_3 = [list_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_6 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = var_12.__repr__()
    assert var_13 == "\"'link:[]'\""
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__iter__()
    var_18 = var_11.__repr__()
    assert var_18 == "'link:[]'"


def test_case_640():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    linked_node_5 = module_0.LinkedNode(var_8)
    assert (
        f"{type(linked_node_5.value).__module__}.{type(linked_node_5.value).__qualname__}"
        == "builtins.generator"
    )
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_641():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_1 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_0 = linked_list_1.prepend(dict_1)
    assert len(linked_list_1) == 1
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    list_2 = []
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 0
    var_5 = linked_list_1.__iter__()


def test_case_642():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)


def test_case_643():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_3 = module_0.LinkedNode(var_6)
    assert linked_node_3.value == 0
    var_7 = var_5.__repr__()
    assert var_7 == "0"
    var_8 = linked_list_3.__iter__()


def test_case_644():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_1)
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_1, set_1]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_8 = linked_node_4.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[False]"
    bool_0 = False
    list_3 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_5.__repr__()
    assert var_16 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_645():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_1.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_2 = linked_list_5.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_5.__iter__()
    dict_0 = {
        complex_2: complex_1,
        tuple_1: var_0,
        var_0: linked_list_1,
        linked_list_3: complex_2,
    }
    linked_node_7 = module_0.LinkedNode(dict_0)


def test_case_646():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[]"
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_4)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.prepend(linked_node_8)
    assert len(linked_list_9) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_14 = linked_list_10.prepend(bytes_1)
    assert len(linked_list_10) == 3
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_2 = (dict_0, bytes_2, bool_1)
    linked_node_10 = module_0.LinkedNode(tuple_2, bool_1)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0


def test_case_647():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_1, bytes_1, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_5 = linked_list_2.__len__()
    assert var_5 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(var_6)
    assert var_8 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    var_9 = linked_node_4.checkInfinite()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_2 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    linked_list_8 = module_0.LinkedList(*bytes_3)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[]"
    bytes_4 = b"U"
    set_1 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_3 = [set_1, set_1]
    linked_node_7 = module_0.LinkedNode(list_3)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_15.__repr__()
    assert var_17 == "'link:[]'"
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    bytes_5 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_5)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_17.__len__()
    assert var_20 == 9


def test_case_648():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.prepend(bytes_0)
    assert len(linked_list_3) == 3
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_4 = linked_list_4.pop()
    assert var_4 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_5 = var_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_node_6 = module_0.LinkedNode(complex_1)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    linked_node_9 = module_0.LinkedNode(var_15)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_649():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_1 = linked_list_2.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_node_5 = module_0.LinkedNode(var_9)
    assert linked_node_5.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_13 = linked_list_9.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_9.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 4
    bool_1 = True
    linked_node_7 = module_0.LinkedNode(bool_1)
    var_15 = linked_node_7.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_11.prepend(var_16)
    assert len(linked_list_11) == 1
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_650():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_4)
    assert len(linked_list_4) == 96
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_8.__len__()
    assert var_10 == 0
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    linked_node_4 = module_0.LinkedNode(var_11)
    assert linked_node_4.value == 0
    var_12 = var_10.__repr__()
    assert var_12 == "0"
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_node_6 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.prepend(linked_node_8)
    assert len(linked_list_9) == 1
    var_14 = var_4.__repr__()
    assert (
        var_14
        == "'link:[b\"&Z\\\\xac\\\\x82WC\\\\xc4\\\\x88\\'\\\\\\\\m\\\\x0c\\\\xaf\\\\xccJ\\\\xda\",b\"&Z\\\\xac\\\\x82WC\\\\xc4\\\\x88\\'\\\\\\\\m\\\\x0c\\\\xaf\\\\xccJ\\\\xda\"]'"
    )
    var_15 = var_14.__repr__()
    assert (
        var_15
        == "'\\'link:[b\"&Z\\\\\\\\xac\\\\\\\\x82WC\\\\\\\\xc4\\\\\\\\x88\\\\\\'\\\\\\\\\\\\\\\\m\\\\\\\\x0c\\\\\\\\xaf\\\\\\\\xccJ\\\\\\\\xda\",b\"&Z\\\\\\\\xac\\\\\\\\x82WC\\\\\\\\xc4\\\\\\\\x88\\\\\\'\\\\\\\\\\\\\\\\m\\\\\\\\x0c\\\\\\\\xaf\\\\\\\\xccJ\\\\\\\\xda\"]\\''"
    )


def test_case_651():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_2, var_2)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_6.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    assert var_7 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = var_1.__repr__()


def test_case_652():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13, var_13)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    var_15 = var_10.__repr__()


def test_case_653():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.remove(var_3)
    assert var_6 is False
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_15 = linked_list_7.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_7.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_10.remove(linked_list_10)
    var_19 = linked_list_10.__len__()
    assert var_19 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_20 = linked_node_6.checkInfinite()
    var_21 = linked_list_11.__repr__()
    assert var_21 == "link:[]"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0, var_21)
    assert linked_node_7.next == "link:[]"
    var_22 = var_7.__repr__()


def test_case_654():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_0 = module_0.LinkedNode(var_0)


def test_case_655():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_4 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_3)
    linked_node_4 = module_0.LinkedNode(complex_3)
    complex_4 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_4)
    complex_5 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.prepend(linked_node_6)
    assert len(linked_list_6) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    int_0 = 2552
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.prepend(int_0)
    assert len(linked_list_7) == 1


def test_case_656():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, var_2)
    linked_node_4 = module_0.LinkedNode(var_3)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_0)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(linked_list_3)
    assert var_8 is False
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_4.prepend(var_10)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_14 = var_11.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_15 = linked_list_5.pop()
    assert var_15 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_16 = var_15.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_17)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_list_7.__repr__()
    assert var_18 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_list_8.__repr__()
    assert var_21 == "link:[]"
    var_22 = linked_list_7.__iter__()


def test_case_657():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(linked_list_7)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.remove(linked_list_8)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_16 = linked_list_9.remove(float_0)
    assert var_16 is False
    linked_node_8 = module_0.LinkedNode(float_0, bytes_3)
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 4
    var_17 = linked_list_5.__len__()
    assert var_17 == 0


def test_case_658():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_11, linked_list_5)
    assert len(linked_node_5.next) == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    list_0 = []
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 0
    var_13 = var_1.__repr__()


def test_case_659():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.remove(dict_0)
    assert var_7 is True
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_12 = var_9.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_16)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_17, linked_list_8)
    assert len(linked_node_9.next) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[]"
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_11 = module_0.LinkedNode(set_0)
    linked_node_12 = module_0.LinkedNode(var_11)


def test_case_660():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    var_3 = linked_list_2.__repr__()
    list_1 = []
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_8 = linked_list_0.remove(var_2)
    assert var_8 is False


def test_case_661():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_0)
    var_10 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_3.remove(none_type_0)
    assert var_11 is False


def test_case_662():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    linked_node_3 = module_0.LinkedNode(float_0, bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_7, linked_list_4)
    assert len(linked_node_6.next) == 0
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__iter__()
    linked_node_8 = module_0.LinkedNode(var_12)
    assert (
        f"{type(linked_node_8.value).__module__}.{type(linked_node_8.value).__qualname__}"
        == "builtins.generator"
    )
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(bool_0)
    assert var_13 is False
    linked_node_9 = module_0.LinkedNode(var_13)
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_9.__iter__()
    bool_1 = False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.remove(bool_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_12.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_13.value) == 0
    var_19 = linked_node_13.checkInfinite()
    var_20 = linked_list_11.prepend(var_17)
    assert len(linked_list_11) == 1
    assert len(linked_node_13.value) == 1
    var_21 = linked_list_11.__repr__()
    assert var_21 == "link:[False]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0


def test_case_663():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_6, linked_node_1)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.remove(var_10)
    assert var_13 is False
    var_14 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_664():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    var_9 = linked_list_3.remove(linked_list_3)
    assert var_9 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = var_11.__repr__()
    assert var_12 == "\"'link:[]'\""
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0


def test_case_665():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""


def test_case_666():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_4.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_5 = linked_list_7.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_7.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_10.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0


def test_case_667():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    linked_node_3 = module_0.LinkedNode(var_9)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    linked_list_6 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_668():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4


def test_case_669():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"


def test_case_670():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_671():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_4 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_5 = linked_list_0.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(var_4)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_2.__iter__()
    var_8 = var_3.__repr__()


def test_case_672():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_6 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {var_3: linked_node_3, linked_list_2: var_3}
    linked_list_3 = module_0.LinkedList(*dict_0)
    assert len(linked_list_3) == 2


def test_case_673():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(bool_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_6 = linked_node_2.checkInfinite()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_15 = linked_list_6.remove(float_0)
    assert var_15 is False
    linked_node_9 = module_0.LinkedNode(none_type_0)


def test_case_674():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_3)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_4)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_5 = module_0.LinkedNode(tuple_0, bool_0)
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0


def test_case_675():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_9)
    assert len(linked_list_7) == 96
    bool_1 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_3}
    linked_node_6 = module_0.LinkedNode(set_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 4
    float_1 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_4, bytes_4]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 2
    var_10 = linked_list_9.remove(float_1)
    assert var_10 is False
    var_11 = linked_list_0.__len__()
    assert var_11 == 0


def test_case_676():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)


def test_case_677():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_1 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 2
    var_2 = linked_list_4.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_4.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_4 = linked_list_6.prepend(linked_node_7)
    assert len(linked_list_6) == 1
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_4)
    assert len(linked_list_7) == 2
    var_5 = linked_list_7.remove(float_1)
    assert var_5 is False
    var_6 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_5 = [linked_node_8, linked_list_8, bytes_3, linked_node_8]
    linked_list_9 = module_0.LinkedList(*list_5)
    assert len(linked_list_9) == 4
    var_8 = linked_list_9.__len__()
    assert var_8 == 4
    var_9 = linked_list_9.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_list_11.__len__()
    assert var_12 == 0
    var_13 = linked_list_10.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_list_13.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_14.prepend(var_16)
    assert len(linked_list_14) == 1
    assert len(linked_node_10.value) == 1
    var_18 = var_6.__iter__()


def test_case_678():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0


def test_case_679():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(var_3)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_6 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(var_6)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    var_14 = linked_list_10.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_15 = linked_list_11.remove(linked_list_11)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_14.__repr__()


def test_case_680():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.prepend(bytes_0)
    assert len(linked_list_1) == 3
    var_3 = linked_list_0.__iter__()


def test_case_681():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    var_3 = linked_node_4.checkInfinite()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_4 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    var_8 = var_6.__repr__()
    assert var_8 == "\"'link:[]'\""
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_1, set_1]
    linked_node_6 = module_0.LinkedNode(list_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    linked_list_5 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    linked_node_8 = module_0.LinkedNode(var_15)
    assert linked_node_8.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_16 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_17 = linked_node_1.checkInfinite()


def test_case_682():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    none_type_1 = None
    var_2 = linked_list_2.remove(none_type_1)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    var_12 = linked_list_7.remove(linked_list_7)
    var_13 = linked_list_7.prepend(var_2)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1


def test_case_683():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()


def test_case_684():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_2 = linked_list_3.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_3.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_4 = linked_list_5.__repr__()
    assert var_4 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_6.prepend(var_5)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[False]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(linked_list_7)
    assert var_10 is False
    var_11 = linked_list_4.prepend(var_0)
    assert len(linked_list_4) == 1


def test_case_685():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()


def test_case_686():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(var_7)
    assert var_9 is False
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    var_12 = linked_node_4.checkInfinite()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_14.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    linked_node_8 = module_0.LinkedNode(var_20)
    assert linked_node_8.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_21, var_21)
    var_23 = var_12.__repr__()


def test_case_687():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_688():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    bool_1 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.remove(bool_1)
    assert var_10 is False
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_11 = linked_list_5.remove(float_0)
    assert var_11 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_2.__len__()
    assert var_13 == 0


def test_case_689():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_4)
    assert linked_node_3.value == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    var_11 = linked_list_4.remove(linked_list_4)
    assert var_11 is False
    var_12 = linked_list_0.__repr__()
    assert var_12 == "link:[]"


def test_case_690():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_1 = module_0.LinkedNode(var_5)
    assert linked_node_1.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_1)
    assert var_6 is False
    var_7 = linked_list_5.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_2 = module_0.LinkedNode(set_0)
    bool_1 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.remove(bool_1)
    assert var_8 is False
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_4)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_5 = b"U"
    set_1 = {bytes_5, bytes_5, bytes_5, bytes_5}
    list_3 = [set_1, set_1]
    linked_node_5 = module_0.LinkedNode(list_3)
    var_11 = linked_node_5.checkInfinite()
    bytes_6 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.prepend(bytes_6)
    assert len(linked_list_9) == 1
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_7 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_7)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    linked_node_8 = module_0.LinkedNode(var_15)
    linked_node_9 = module_0.LinkedNode(var_14)


def test_case_691():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_2)


def test_case_692():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_0)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_7.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_693():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, linked_list_4)
    assert len(linked_node_3.next) == 0
    var_8 = var_7.__repr__()


def test_case_694():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_5 = linked_list_1.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_6 = var_5.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    assert var_7 is False
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_4.__iter__()
    var_14 = var_5.__iter__()


def test_case_695():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_6 = linked_list_3.remove(dict_0)
    assert var_6 is True
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, linked_list_4)
    assert len(linked_node_3.next) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.prepend(linked_node_7)
    assert len(linked_list_5) == 1
    complex_4 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_10.prepend(var_16)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_11.value) == 0
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_list_11.__repr__()
    assert var_20 == "link:[]"
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_21 = linked_list_14.__len__()
    assert var_21 == 0


def test_case_696():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    linked_node_2 = module_0.LinkedNode(var_4)
    assert (
        f"{type(linked_node_2.value).__module__}.{type(linked_node_2.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_4, bytes_1, linked_node_7]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_9 = linked_list_5.__len__()
    assert var_9 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__iter__()
    list_1 = []
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 0
    var_14 = var_6.__len__()


def test_case_697():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_node_1)
    linked_node_4 = module_0.LinkedNode(var_1)


def test_case_698():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_1)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_1)
    var_10 = linked_list_0.__iter__()


def test_case_699():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_2.__len__()
    linked_node_5 = module_0.LinkedNode(var_3)


def test_case_700():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 1
    list_2 = [linked_node_3, list_1, bytes_1, linked_node_3]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 4
    str_1 = "Vyx0]D=6H1fKTpZ"
    int_1 = -3330
    tuple_2 = (int_1, int_1)
    bytes_2 = b"z\xe1\xb7"
    tuple_3 = (tuple_2, int_1, bytes_2)
    list_4 = [str_1, tuple_3]
    linked_list_4 = module_0.LinkedList(*list_4)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.prepend(bytes_2)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, var_4)
    linked_node_6 = module_0.LinkedNode(var_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_5 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_5)
    assert len(linked_list_8) == 2
    var_9 = linked_list_8.remove(float_0)
    assert var_9 is False
    linked_node_8 = module_0.LinkedNode(float_0, bytes_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_0.pop()
    assert len(linked_list_0) == 1


def test_case_701():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    linked_node_2 = module_0.LinkedNode(bytes_1, linked_node_1)
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.prepend(bytes_2)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.remove(linked_list_5)
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_2 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    linked_list_7 = module_0.LinkedList(*bytes_3)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__iter__()
    var_12 = var_11.__repr__()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_13 = linked_node_5.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_9.prepend(var_14)
    assert len(linked_list_9) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_18, var_18)
    linked_node_10 = module_0.LinkedNode(var_19)
    bool_1 = True
    bytes_4 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_1 = {bool_1, bool_1, bool_1, bytes_4}
    linked_node_11 = module_0.LinkedNode(set_1)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_702():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_1)
    assert len(linked_list_2) == 96
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    var_8 = var_7.__iter__()
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.remove(float_1)
    assert var_9 is False
    var_10 = linked_list_5.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_11 = linked_node_2.checkInfinite()
    float_2 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_2)
    assert var_12 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_4 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_4)
    var_14 = linked_node_4.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    bytes_5 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_5 = [linked_node_5, linked_list_8, bytes_5, linked_node_5]
    linked_list_9 = module_0.LinkedList(*list_5)
    assert len(linked_list_9) == 4
    var_16 = linked_list_9.__len__()
    assert var_16 == 4
    var_17 = linked_list_9.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    var_19 = var_18.__repr__()
    assert var_19 == "'link:[]'"
    var_20 = var_19.__repr__()
    assert var_20 == "\"'link:[]'\""
    var_21 = linked_list_6.__len__()
    assert var_21 == 2


def test_case_703():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    var_3 = var_2.__repr__()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_1)
    assert var_4 is False
    linked_node_0 = module_0.LinkedNode(float_1, bytes_1)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_2 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    list_3 = []
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 0
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_2 = module_0.LinkedNode(set_0)
    var_5 = linked_list_3.__len__()
    assert var_5 == 2


def test_case_704():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.remove(var_12)
    assert var_15 is False
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_16 = linked_node_6.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_list_7.__iter__()
    var_19 = var_15.__repr__()


def test_case_705():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    var_2 = var_1.__iter__()


def test_case_706():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.pop()
    assert len(linked_list_2) == 0
    var_3 = var_2.__iter__()
    bytes_3 = b"\x87\x82\x9a#\xdbB\x0f"
    list_2 = [bytes_3]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 1
    list_3 = [linked_node_2, list_2, bytes_3, linked_node_2]
    list_4 = [list_3, list_2, list_2, list_2]
    linked_list_4 = module_0.LinkedList(*list_4)
    assert len(linked_list_4) == 4
    var_4 = linked_list_2.__len__()
    assert var_4 == 0


def test_case_707():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_3 = module_0.LinkedNode(var_8)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    linked_node_4 = module_0.LinkedNode(float_0, bytes_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_1 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_11 = linked_list_6.prepend(dict_1)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.prepend(dict_1)
    assert len(linked_list_7) == 1
    var_13 = linked_list_7.remove(dict_1)
    assert var_13 is True
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_8, linked_list_10, bytes_4, linked_node_8]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 4
    var_19 = linked_list_11.__len__()
    assert var_19 == 4
    linked_node_9 = module_0.LinkedNode(var_11, linked_list_2)
    assert len(linked_node_9.next) == 0


def test_case_708():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_node_3 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_3.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    var_13 = var_10.__repr__()
    linked_node_8 = module_0.LinkedNode(var_2)
    assert linked_node_8.value == "link:[]"


def test_case_709():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(var_10, linked_node_2)
    var_11 = linked_list_6.pop()
    assert var_11 == "link:[]"
    assert len(linked_list_6) == 0
    assert len(linked_node_2.value) == 0


def test_case_710():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_4 = module_0.LinkedNode(var_7)
    linked_node_5 = module_0.LinkedNode(linked_node_4)


def test_case_711():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    linked_list_3 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_3) == 1
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_6.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_9)
    assert linked_node_3.value == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(linked_list_9)
    assert var_15 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_5.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_18 = linked_node_6.checkInfinite()
    var_19 = var_17.__len__()
    var_20 = linked_list_11.__iter__()


def test_case_712():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)


def test_case_713():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_1)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_2.remove(bytes_1)


def test_case_714():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[link:[]]"


def test_case_715():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_6 = linked_list_3.remove(dict_0)
    assert var_6 is True
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    var_16 = var_15.__iter__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_4)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_17 = linked_node_3.checkInfinite()


def test_case_716():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_3.__repr__()
    assert var_12 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_13 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_list_11 = module_0.LinkedList(*var_9)
    assert len(linked_list_11) == 5


def test_case_717():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_5.prepend(var_9)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_11 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_13 = linked_list_7.remove(dict_0)
    assert var_13 is True
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_node_7 = module_0.LinkedNode(var_17)
    assert linked_node_7.value == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_10.remove(linked_list_10)
    assert var_18 is False
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_10 = module_0.LinkedNode(set_0)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_22 = linked_list_11.__repr__()
    assert var_22 == "link:[]"
    linked_node_11 = module_0.LinkedNode(var_14)


def test_case_718():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_3)
    assert len(linked_node_2.next) == 0
    var_4 = linked_list_3.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_4.__iter__()


def test_case_719():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.remove(var_2)
    assert var_5 is False
    var_6 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(var_5)


def test_case_720():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_4 = module_0.LinkedNode(var_6)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    var_10 = var_9.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.remove(linked_list_6)
    assert var_13 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = var_13.__repr__()
    var_15 = linked_node_1.checkInfinite()


def test_case_721():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = var_9.__repr__()
    assert var_10 == "\"'link:[]'\""
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.remove(var_12)
    assert var_15 is False
    var_16 = linked_list_7.__iter__()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_17 = linked_node_5.checkInfinite()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_18 = linked_list_8.remove(float_0)
    assert var_18 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_19 = linked_node_6.checkInfinite()
    var_20 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_7, linked_list_10, bytes_1, linked_node_7]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 4
    var_22 = linked_list_11.__len__()
    assert var_22 == 4
    var_23 = linked_list_11.__repr__()
    var_24 = var_11.__repr__()


def test_case_722():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_9 = var_6.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.remove(linked_list_3)
    assert var_10 is False
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_17 = var_15.__len__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_18 = linked_list_5.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_20 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_4 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_4)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_21 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_22 = linked_list_2.__iter__()


def test_case_723():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_3 = linked_list_3.pop()
    assert var_3 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_4 = var_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.remove(linked_list_5)
    assert var_5 is False
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, var_8)
    assert linked_node_3.next == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(linked_list_7)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_2.__repr__()


def test_case_724():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_3 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_5)
    assert len(linked_list_4) == 96
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_node_10 = module_0.LinkedNode(bytes_0)


def test_case_725():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_3.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    bool_1 = True
    linked_node_4 = module_0.LinkedNode(bool_1)
    var_5 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_6)
    var_12 = var_7.__iter__()


def test_case_726():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_0.__repr__()
    assert var_8 == "link:[False]"
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    linked_node_4 = module_0.LinkedNode(var_3, linked_node_0)


def test_case_727():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_4 = linked_list_1.remove(bytes_2)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, var_5)
    linked_node_5 = module_0.LinkedNode(var_6)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_3]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_728():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_729():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_5)
    assert linked_node_1.value == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_8, linked_list_4)
    assert len(linked_node_3.next) == 0
    var_9 = linked_list_4.__iter__()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_1)
    assert var_10 is False
    var_11 = linked_list_5.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.remove(linked_list_8)
    assert var_15 is False
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    float_2 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 2
    var_18 = linked_list_9.remove(float_2)
    assert var_18 is False
    var_19 = linked_list_9.__repr__()
    assert (
        var_19
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_10 = module_0.LinkedList(*var_19)
    assert len(linked_list_10) == 96
    var_20 = linked_list_4.remove(linked_node_4)


def test_case_730():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_6 = var_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_3.checkInfinite()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_2 = []
    tuple_0 = (str_0, bytes_2, list_2)
    list_3 = [tuple_0, list_2, str_0]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 3
    var_13 = linked_list_7.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_9.__iter__()
    var_16 = var_15.__iter__()


def test_case_731():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.prepend(bytes_0)
    assert len(linked_list_3) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__iter__()
    var_13 = var_12.__repr__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_14 = linked_list_5.__repr__()
    assert var_14 == "link:[]"


def test_case_732():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_node_1 = module_0.LinkedNode(var_6)
    assert linked_node_1.value == 0
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_11 = var_8.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.remove(linked_list_5)
    assert var_12 is False
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.__iter__()
    var_20 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_21 = linked_list_8.__repr__()
    assert var_21 == "link:[]"
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = linked_list_0.prepend(var_12)
    assert len(linked_list_0) == 1


def test_case_733():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_7 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_4.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_1.__len__()
    assert var_11 == 1


def test_case_734():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_8 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_10 = linked_list_6.remove(dict_0)
    assert var_10 is True
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_11 = linked_list_7.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_7.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_3.checkInfinite()
    var_14 = var_13.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_node_3)
    var_15 = linked_list_1.prepend(linked_node_5)
    assert len(linked_list_1) == 5


def test_case_735():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_node_6 = module_0.LinkedNode(var_9)
    assert linked_node_6.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_10, var_10)
    linked_node_9 = module_0.LinkedNode(var_11)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_736():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    var_4 = linked_list_1.__iter__()


def test_case_737():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0


def test_case_738():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_739():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_740():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)


def test_case_741():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = var_1.__repr__()


def test_case_742():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, var_4)
    assert linked_node_3.next == "link:[]"
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_1 = False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.remove(bool_1)
    linked_node_8 = module_0.LinkedNode(var_12)
    var_13 = linked_list_4.pop()
    assert var_13 is False
    assert len(linked_list_4) == 0
    assert len(linked_node_6.value) == 0


def test_case_743():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    linked_node_3 = module_0.LinkedNode(var_12)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.remove(linked_list_8)
    assert var_13 is False
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_1.__iter__()


def test_case_744():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    linked_list_2 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_2) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0


def test_case_745():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6, var_6)
    linked_node_6 = module_0.LinkedNode(complex_0, var_1)


def test_case_746():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.__iter__()
    var_15 = var_14.__repr__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_5.checkInfinite()
    var_17 = var_16.__repr__()
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_18 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_node_7.checkInfinite()
    var_21 = linked_list_6.prepend(var_19)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_22 = linked_list_8.__repr__()
    assert var_22 == "link:[]"
    var_23 = linked_node_8.checkInfinite()
    float_1 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_24 = linked_list_9.remove(float_1)
    assert var_24 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_25 = linked_list_10.__len__()
    assert var_25 == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_5)
    var_26 = linked_node_10.checkInfinite()
    var_27 = var_26.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_11.value) == 0
    var_28 = linked_node_11.checkInfinite()
    var_29 = linked_list_11.prepend(var_26)
    assert len(linked_list_11) == 1
    assert len(linked_node_11.value) == 1
    var_30 = linked_list_11.__repr__()
    assert var_30 == "link:[False]"
    linked_node_12 = module_0.LinkedNode(bytes_5)


def test_case_747():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_1)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_2)
    assert len(linked_list_2) == 96
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    assert var_3 is False
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_node_2 = module_0.LinkedNode(var_8)
    assert linked_node_2.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_10, var_10)
    linked_node_5 = module_0.LinkedNode(var_11)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_748():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_5 = module_0.LinkedNode(var_10)
    assert linked_node_5.value == 0
    var_11 = var_9.__repr__()
    assert var_11 == "0"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_3, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_19 = linked_list_8.__len__()
    assert var_19 == 4
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_10.__len__()
    assert var_22 == 0
    var_23 = linked_list_10.__len__()
    assert var_23 == 0
    var_24 = linked_list_10.remove(var_21)
    assert var_24 is False
    var_25 = linked_list_10.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_26 = linked_list_11.__repr__()
    assert var_26 == "link:[]"
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 2
    var_27 = linked_list_12.remove(float_0)
    assert var_27 is False
    var_28 = linked_list_12.__repr__()
    assert (
        var_28
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_10 = module_0.LinkedNode(var_26)
    assert linked_node_10.value == "link:[]"
    bytes_5 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_11 = module_0.LinkedNode(bytes_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_0)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_29 = linked_list_13.remove(linked_list_13)
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_31.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0


def test_case_749():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0


def test_case_750():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)


def test_case_751():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_1, bytes_2, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    var_3 = linked_list_2.__repr__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_4)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0


def test_case_752():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_0.prepend(var_5)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__repr__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_3, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 3
    var_10 = linked_list_1.__repr__()
    assert (
        var_10
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_3.__len__()
    assert var_13 == 0
    var_14 = linked_list_3.__len__()
    assert var_14 == 0
    var_15 = linked_list_3.remove(var_12)
    assert var_15 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_17.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    bytes_5 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_9, linked_list_4, bytes_5, linked_node_9]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    var_21 = linked_list_5.__len__()
    assert var_21 == 4
    linked_node_10 = module_0.LinkedNode(bytes_5, linked_node_9)
    linked_node_11 = module_0.LinkedNode(none_type_0)


def test_case_753():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_4)
    var_5 = linked_list_2.remove(var_1)
    assert var_5 is False


def test_case_754():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__iter__()
    var_12 = linked_list_1.__iter__()


def test_case_755():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_node_1 = module_0.LinkedNode(var_7)
    assert linked_node_1.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_14 = linked_node_4.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_node_6.checkInfinite()
    var_20 = linked_list_9.__len__()
    assert var_20 == 0
    var_21 = linked_list_8.__iter__()
    var_22 = linked_list_8.__repr__()
    assert var_22 == "link:[]"


def test_case_756():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_757():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)


def test_case_758():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_4)
    assert len(linked_list_3) == 96
    bool_1 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(bool_1)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_1)
    assert var_6 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_1.checkInfinite()
    assert var_7 is False
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_6.prepend(var_7)
    assert len(linked_list_6) == 1
    assert len(linked_node_2.value) == 1
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_3.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_4.value) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_4 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_4)
    list_2 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_16 = linked_list_8.prepend(bytes_4)
    assert len(linked_list_8) == 3
    var_17 = linked_list_7.prepend(linked_list_1)
    assert len(linked_list_7) == 2
    assert len(linked_node_4.value) == 2


def test_case_759():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(var_4)
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.remove(linked_node_1)


def test_case_760():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_2)
    assert len(linked_list_2) == 96
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    bytes_3 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_9 = module_0.LinkedNode(bytes_3, bytes_3)
    set_0 = {linked_node_9, bytes_3, bytes_3, bytes_3}
    linked_node_10 = module_0.LinkedNode(set_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_17 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_18 = linked_list_8.__repr__()
    assert var_18 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_11 = module_0.LinkedNode(var_17)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_19 = linked_node_12.checkInfinite()
    var_20 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_19, var_19)
    linked_node_14 = module_0.LinkedNode(var_20)
    var_21 = var_0.__repr__()


def test_case_761():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__repr__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_12 = linked_list_5.remove(dict_0)
    assert var_12 is True
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_13, var_13)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.remove(linked_list_7)
    assert var_15 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    var_16 = linked_list_4.__iter__()


def test_case_762():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_5)
    assert linked_node_1.next == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_5, bytes_0, linked_node_2]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_8 = linked_list_6.__len__()
    assert var_8 == 4
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__iter__()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_5, linked_list_9, bytes_2, linked_node_5]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 4
    var_14 = linked_list_10.__len__()
    assert var_14 == 4
    linked_node_6 = module_0.LinkedNode(bytes_2, linked_node_5)
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 4
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    none_type_1 = None
    var_15 = linked_list_11.remove(none_type_1)
    assert var_15 is False
    var_16 = var_9.__repr__()


def test_case_763():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)


def test_case_764():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(linked_node_3)
    assert len(linked_list_1) == 1
    var_3 = linked_list_1.__repr__()


def test_case_765():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    var_9 = linked_list_1.__iter__()
    var_10 = linked_list_1.__iter__()


def test_case_766():
    float_0 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_0)


def test_case_767():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_11 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList(*linked_list_7)
    assert (
        f"{type(linked_list_8).__module__}.{type(linked_list_8).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_8) == 1


def test_case_768():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_1]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 1
    var_3 = linked_list_1.pop()
    assert var_3 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_0.__len__()
    assert var_8 == 1


def test_case_769():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_1)
    assert len(linked_node_2.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    linked_node_4 = module_0.LinkedNode(var_7)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, var_11)
    assert linked_node_6.next == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_6, bytes_1, linked_node_7]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_770():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_771():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_0.__len__()
    assert var_9 == 0


def test_case_772():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_773():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = var_5.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(var_7)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 3
    var_9 = linked_list_5.__repr__()
    assert (
        var_9
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13, linked_list_7)
    assert len(linked_node_7.next) == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    linked_node_8 = module_0.LinkedNode(none_type_0)


def test_case_774():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    linked_node_3 = module_0.LinkedNode(linked_node_2, linked_list_1)
    assert len(linked_node_3.next) == 0


def test_case_775():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(bool_0)
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_4 = linked_list_4.remove(bytes_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_3.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__repr__()
    assert var_9 == "'link:[]'"
    linked_list_7 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_7) == 1
    var_10 = linked_list_6.__iter__()


def test_case_776():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_3 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = var_5.__repr__()
    assert var_6 == "\"'link:[]'\""
    var_7 = var_5.__repr__()
    assert var_7 == "\"'link:[]'\""
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_8 = linked_list_1.remove(linked_list_1)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_3.__len__()
    assert var_13 == 0
    var_14 = linked_list_3.__len__()
    assert var_14 == 0
    var_15 = linked_list_3.remove(var_12)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_4.__repr__()
    assert var_18 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 1
    var_19 = linked_list_6.__iter__()


def test_case_777():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_5)
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_6 = linked_list_6.remove(float_1)
    assert var_6 is False
    var_7 = linked_list_6.__iter__()
    var_8 = linked_list_4.prepend(linked_node_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1


def test_case_778():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    linked_node_2 = module_0.LinkedNode(var_3)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_7 = linked_node_5.checkInfinite()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_7.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_779():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_3, linked_node_0)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    var_5 = var_2.__iter__()


def test_case_780():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_0)
    var_6 = linked_list_5.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_7, linked_list_7)
    assert len(linked_node_9.next) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_8 = linked_node_10.checkInfinite()
    var_9 = linked_node_10.checkInfinite()
    var_10 = linked_list_8.__repr__()
    assert var_10 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_11.value) == 0


def test_case_781():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_782():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_3 = module_0.LinkedNode(var_7)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_11 = linked_list_4.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_4.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_12)
    assert len(linked_list_5) == 96
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_13 = var_7.__len__()


def test_case_783():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 1
    bool_1 = True
    linked_node_1 = module_0.LinkedNode(bool_1)
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_784():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_2)
    assert linked_node_1.value == "link:[]"
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 1
    list_2 = [linked_node_2, list_1, bytes_1, linked_node_2]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_5 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_6 = linked_list_2.pop()
    assert var_6 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_2) == 1


def test_case_785():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_2 = linked_list_3.remove(float_1)
    assert var_2 is False
    var_3 = linked_list_3.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_5.__len__()
    bytes_3 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_3, bytes_3)
    set_0 = {linked_node_2, bytes_3, bytes_3, bytes_3}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_1.prepend(var_8)
    assert len(linked_list_1) == 97


def test_case_786():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_1 = linked_list_3.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_3.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_1, linked_list_4, bytes_2, linked_node_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    var_4 = linked_list_5.__len__()
    assert var_4 == 4
    linked_node_2 = module_0.LinkedNode(bytes_2, linked_node_1)
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2


def test_case_787():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    var_3 = linked_list_1.pop()
    assert len(linked_list_1) == 3
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_3.value).__module__}.{type(var_3.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_3.value) == 0
    assert var_3.next is None


def test_case_788():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.remove(dict_0)
    assert var_4 is True
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_4.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_6)
    assert len(linked_list_5) == 96
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    assert var_7 is False
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_node_2 = module_0.LinkedNode(var_10)
    assert linked_node_2.value == 0
    var_11 = var_9.__repr__()
    assert var_11 == "0"
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_3.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.remove(var_12)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_4.value) == 0
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_node_4.checkInfinite()
    var_17 = linked_list_11.__len__()
    assert var_17 == 0
    var_18 = linked_list_11.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_19 = linked_node_5.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_21 = linked_list_13.__repr__()
    assert var_21 == "link:[]"
    var_22 = var_21.__repr__()
    assert var_22 == "'link:[]'"
    var_23 = var_22.__repr__()
    assert var_23 == "\"'link:[]'\""
    var_24 = var_22.__repr__()
    assert var_24 == "\"'link:[]'\""
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_1, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    var_25 = linked_list_6.__repr__()
    assert var_25 == "link:[]"


def test_case_789():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_2, bytes_1, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    var_6 = linked_list_0.__iter__()


def test_case_790():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__iter__()
    var_8 = var_3.__len__()
    assert var_8 == 11


def test_case_791():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_0)
    assert linked_node_2.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()


def test_case_792():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_5.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_6.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()


def test_case_793():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    linked_node_5 = module_0.LinkedNode(var_12)
    assert linked_node_5.value == 0
    var_13 = var_11.__repr__()
    assert var_13 == "0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 2
    var_14 = linked_list_9.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_9.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(linked_list_2, linked_list_1)
    assert len(linked_node_6.value) == 0
    assert len(linked_node_6.next) == 0


def test_case_794():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"


def test_case_795():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"


def test_case_796():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1, var_9)
    assert linked_node_4.next == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = var_12.__repr__()
    assert var_13 == "\"'link:[]'\""
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_list_10.__repr__()
    assert var_20 == "link:[]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_797():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, linked_list_5)
    assert len(linked_node_5.next) == 0
    var_8 = linked_list_1.__iter__()


def test_case_798():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""


def test_case_799():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1


def test_case_800():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_7 = linked_list_7.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_7.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()


def test_case_801():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_6)
    assert len(linked_list_3) == 96
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_6)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__len__()
    assert var_18 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = linked_list_7.__repr__()
    assert var_19 == "link:[]"


def test_case_802():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_0.__iter__()
    var_8 = linked_list_1.remove(linked_list_1)
    assert var_8 is False
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_3 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_3, bytes_1, bytes_1, bytes_1}
    linked_node_4 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    var_10 = linked_list_0.__len__()
    assert var_10 == 0


def test_case_803():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_6, linked_list_5)
    assert len(linked_node_2.next) == 0
    var_7 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_8 = linked_list_8.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_8.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_9 = module_0.LinkedList(*var_9)
    assert len(linked_list_9) == 96
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_10 = linked_list_10.__repr__()
    assert var_10 == "link:[]"
    float_2 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_11 = linked_list_11.remove(float_2)
    assert var_11 is False
    var_12 = linked_list_11.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_10)
    assert linked_node_5.value == "link:[]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    dict_0 = {
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
    }
    var_13 = linked_list_12.prepend(dict_0)
    assert len(linked_list_12) == 1
    var_14 = linked_list_12.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    list_3 = [var_7]
    linked_list_13 = module_0.LinkedList(*list_3)
    assert len(linked_list_13) == 1


def test_case_804():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_0, var_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_0)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    linked_list_8 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    var_15 = linked_list_10.__iter__()
    linked_node_9 = module_0.LinkedNode(var_1)


def test_case_805():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False


def test_case_806():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_6, bytes_0, linked_node_2]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_9 = linked_list_7.__len__()
    assert var_9 == 4
    var_10 = linked_list_7.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__iter__()
    var_15 = linked_list_9.remove(linked_list_9)
    assert var_15 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.__repr__()
    assert var_16 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 2
    var_17 = linked_list_11.remove(float_0)
    assert var_17 is False
    var_18 = linked_list_11.__repr__()
    assert (
        var_18
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_4 = module_0.LinkedNode(var_16)
    assert linked_node_4.value == "link:[]"
    var_19 = linked_list_7.prepend(linked_list_10)
    assert len(linked_list_7) == 5


def test_case_807():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    var_5 = linked_list_0.__len__()
    assert var_5 == 0


def test_case_808():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = linked_list_0.__iter__()


def test_case_809():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_810():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.remove(linked_list_0)
    assert var_2 is False


def test_case_811():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_812():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.pop()
    assert var_8 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_9 = var_8.__iter__()
    var_10 = linked_list_0.__iter__()


def test_case_813():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    var_1 = linked_list_2.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(bool_0)
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.remove(linked_list_4)
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_5 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_2 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_8.__len__()
    assert var_9 == 0
    var_10 = linked_list_7.__iter__()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_node_4 = module_0.LinkedNode(linked_node_0)


def test_case_814():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_2 = None
    linked_node_3 = module_0.LinkedNode(none_type_2)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 1
    list_1 = [linked_node_5, list_0, bytes_1, linked_node_5]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_9 = linked_list_8.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_node_7.checkInfinite()
    bool_0 = False
    list_3 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_11 = linked_list_10.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = var_12.__repr__()
    assert var_13 == "\"'link:[]'\""
    var_14 = var_12.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = linked_list_7.prepend(var_6)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1


def test_case_815():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1


def test_case_816():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    bool_2 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.prepend(bool_2)
    assert len(linked_list_2) == 1
    dict_1 = {linked_node_2: var_5, bool_1: bytes_0, linked_node_4: linked_node_1}
    bool_3 = True
    linked_node_5 = module_0.LinkedNode(dict_1, bool_3)


def test_case_817():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_1)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_2)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    bool_1 = False
    linked_node_4 = module_0.LinkedNode(bool_1)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_13.__len__()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bool_2 = True
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    list_4 = [list_3]
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 1
    var_16 = linked_list_8.prepend(list_3)
    assert len(linked_list_8) == 2


def test_case_818():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    var_2 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    var_4 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_3, var_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    var_6 = linked_node_7.checkInfinite()
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_8 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(linked_list_7)
    assert var_10 is False
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    bytes_1 = b"\xdd\xb6w\xf0\xb3j\x9b\xfa\xb5\x03\xc3Ua\xd8Q\x06"
    var_12 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1


def test_case_819():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_1.checkInfinite()
    list_0 = []
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_5 = linked_list_5.remove(float_0)
    assert var_5 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.remove(linked_list_6)
    assert var_6 is False
    var_7 = var_6.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.remove(var_8)
    var_11 = var_8.__repr__()
    assert var_11 == "'link:[]'"


def test_case_820():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_1 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_1, bytes_0, bytes_0, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_node_5 = module_0.LinkedNode(linked_node_3, linked_node_4)
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"


def test_case_821():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(var_12, linked_node_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_7.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    var_20 = linked_list_10.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_8.value) == 0
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_node_8.checkInfinite()
    var_23 = linked_list_13.__len__()
    assert var_23 == 0
    var_24 = linked_list_13.__iter__()
    var_25 = var_24.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_9.value) == 0
    var_26 = linked_node_9.checkInfinite()
    var_27 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_26, var_26)
    linked_node_11 = module_0.LinkedNode(var_27)
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_16)
    assert len(linked_node_12.value) == 0
    var_28 = linked_node_12.checkInfinite()
    var_29 = linked_node_12.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_13 = module_0.LinkedNode(complex_0)
    var_30 = linked_list_16.__iter__()
    var_31 = linked_list_16.__repr__()
    assert var_31 == "link:[]"


def test_case_822():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(linked_list_3)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_4, bytes_3, linked_node_6]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_12 = linked_list_5.__len__()
    assert var_12 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_14 = linked_list_7.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_7.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_7 = module_0.LinkedNode(var_13)
    assert linked_node_7.value == "link:[]"
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_5)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()
    linked_node_10 = module_0.LinkedNode(var_18)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_20 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_21 = linked_list_8.__repr__()
    assert var_21 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_823():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_1.remove(var_1)
    assert var_3 is False


def test_case_824():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    assert var_9 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(linked_list_6)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_5.__iter__()


def test_case_825():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    linked_node_4 = module_0.LinkedNode(var_7)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.remove(linked_list_2)
    assert var_8 is False
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_10 = linked_list_3.remove(bytes_1)
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_3.checkInfinite()


def test_case_826():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    linked_node_4 = module_0.LinkedNode(var_4, linked_list_3)
    assert len(linked_node_4.next) == 0
    var_5 = linked_list_3.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_node_7 = module_0.LinkedNode(linked_node_5, linked_node_6)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = var_9.__repr__()
    assert var_10 == "\"'link:[]'\""
    var_11 = var_9.__repr__()
    assert var_11 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_8.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.remove(var_12)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_14)


def test_case_827():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_2 = linked_list_2.remove(none_type_0)
    assert var_2 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[False]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_node_5.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_6.prepend(var_13)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_8, linked_list_7, bytes_3, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 4
    var_18 = linked_list_8.__len__()
    assert var_18 == 4
    var_19 = linked_list_8.__repr__()
    bool_1 = False
    linked_node_9 = module_0.LinkedNode(bool_1)
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1, none_type_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_list_10.__len__()
    assert var_22 == 0
    var_23 = linked_list_10.__iter__()
    linked_node_12 = module_0.LinkedNode(var_23)
    none_type_2 = None
    linked_node_13 = module_0.LinkedNode(none_type_2)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_828():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 3
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[-731,-731,-731]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.prepend(bytes_1)
    assert len(linked_list_6) == 1
    linked_node_3 = module_0.LinkedNode(list_0)


def test_case_829():
    bool_0 = False
    set_0 = {bool_0}
    linked_node_0 = module_0.LinkedNode(set_0)


def test_case_830():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 1
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.remove(var_4)
    var_8 = linked_list_4.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.prepend(bytes_2)
    assert len(linked_list_5) == 3
    var_10 = linked_list_1.__repr__()
    assert var_10 == "link:[b'E\\xdd2\\xd1\\x1c\\x9ac\\xa3)D~-\\xf9\\xf7>\\xa0']"


def test_case_831():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_5 = var_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.remove(linked_list_7)
    assert var_12 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.__iter__()
    var_14 = var_13.__repr__()
    complex_4 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_4)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(linked_list_9)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = linked_list_3.__repr__()
    assert var_18 == "link:[]"


def test_case_832():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    var_4 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_11 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_node_10 = module_0.LinkedNode(linked_node_8, linked_node_9)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_11.checkInfinite()
    var_16 = var_15.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_5.__repr__()
    assert var_17 == "link:[]"


def test_case_833():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)


def test_case_834():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.remove(linked_list_0)


def test_case_835():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_3 = linked_list_2.__len__()
    assert var_3 == 4
    var_4 = linked_list_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_9, linked_list_6)
    assert len(linked_node_4.next) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_836():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0


def test_case_837():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"


def test_case_838():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_2.__iter__()
    bool_0 = False
    linked_node_5 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_6 = linked_node_8.checkInfinite()
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.remove(var_7)
    assert var_10 is False
    var_11 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = var_13.__repr__()
    assert var_15 == "\"'link:[]'\""
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_0)
    linked_node_10 = module_0.LinkedNode(linked_node_9)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_11 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_11.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_18 = linked_node_12.checkInfinite()
    var_19 = linked_node_12.checkInfinite()
    var_20 = linked_list_9.__len__()
    assert var_20 == 0
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    linked_node_13 = module_0.LinkedNode(var_21)
    assert linked_node_13.value == 0
    none_type_1 = None
    linked_node_14 = module_0.LinkedNode(none_type_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_22 = var_8.__repr__()
    assert var_22 == "0"
    var_23 = var_22.__iter__()


def test_case_839():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__iter__()
    var_6 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.remove(linked_list_5)
    assert var_7 is False
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, var_10)
    assert linked_node_4.next == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 1
    var_11 = linked_list_7.pop()
    assert var_11 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_7) == 0
    var_12 = var_11.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    int_0 = -3565
    linked_node_6 = module_0.LinkedNode(var_12, int_0)


def test_case_840():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    list_0 = []
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_5.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_841():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_1 = linked_list_1.remove(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_10 = var_7.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_5.__iter__()


def test_case_842():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_2.checkInfinite()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_5 = linked_list_1.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_1.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_6)
    assert len(linked_list_2) == 96
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == 0
    var_11 = var_9.__repr__()
    assert var_11 == "0"
    var_12 = linked_list_1.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_843():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_844():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_4 = module_0.LinkedNode(var_2)
    assert linked_node_4.value == "link:[]"
    bool_0 = False
    set_0 = {bool_0}
    linked_node_5 = module_0.LinkedNode(set_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_10.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_14 = linked_node_11.checkInfinite()
    var_15 = linked_node_11.checkInfinite()
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.remove(var_15)
    assert var_18 is False
    var_19 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_845():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(linked_node_3)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_node_5 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_5.value).__module__}.{type(linked_node_5.value).__qualname__}"
        == "builtins.generator"
    )
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_4.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_7)
    assert len(linked_list_5) == 96
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_9 = linked_list_8.__len__()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.__iter__()
    var_11 = var_10.__repr__()
    assert var_11 == "<generator object LinkedList.__iter__ at 0x7f638ec7bb50>"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.remove(linked_list_10)
    assert var_12 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_13 = linked_list_2.__len__()
    assert var_13 == 0


def test_case_846():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    var_6 = var_1.__repr__()


def test_case_847():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0


def test_case_848():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_2)
    assert linked_node_1.value == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    list_1 = []
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_6 = linked_list_6.remove(float_1)
    assert var_6 is False
    var_7 = linked_list_6.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_8.prepend(var_10)
    assert len(linked_list_8) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(var_11, linked_node_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_3.__repr__()
    assert var_15 == "link:[]"


def test_case_849():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1


def test_case_850():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"


def test_case_851():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    var_6 = var_4.__repr__()


def test_case_852():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    var_7 = var_4.__repr__()


def test_case_853():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_3, var_3)
    linked_node_2 = module_0.LinkedNode(var_4)
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_1)
    var_5 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__len__()
    assert var_18 == 0


def test_case_854():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.prepend(var_2)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_7 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8, linked_list_5)
    assert len(linked_node_6.next) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_node_7 = module_0.LinkedNode(linked_node_6)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = var_11.__repr__()
    assert var_12 == "\"'link:[]'\""
    var_13 = var_11.__iter__()


def test_case_855():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_1)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_1, var_1)
    linked_node_4 = module_0.LinkedNode(var_2)
    list_1 = []
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 0
    list_2 = [linked_list_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    var_3 = linked_list_3.__len__()
    assert var_3 == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_8.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_9.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__iter__()
    var_13 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_856():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_0.__len__()
    assert var_5 == 0


def test_case_857():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_5.next) == 0
    var_3 = linked_list_2.__iter__()
    var_4 = linked_list_2.prepend(var_0)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    assert len(linked_node_5.next) == 1
    var_5 = var_4.__repr__()


def test_case_858():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_859():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_7 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_9 = linked_list_4.remove(dict_0)
    assert var_9 is True
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bool_1 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.remove(bool_1)
    assert var_13 is False
    linked_node_7 = module_0.LinkedNode(var_13)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_17 = var_15.__len__()
    bool_2 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_18 = linked_list_6.remove(bool_2)
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 3
    var_19 = linked_list_7.__repr__()
    assert var_19 == "link:[-731,-731,-731]"
    var_20 = linked_list_4.remove(bool_0)
    assert var_20 is False


def test_case_860():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    linked_node_3 = module_0.LinkedNode(var_2)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_1.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_6, linked_list_4, bytes_1, linked_node_6]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_6 = linked_list_5.__len__()
    assert var_6 == 4
    var_7 = linked_list_5.__repr__()
    var_8 = linked_list_5.pop()
    assert len(linked_list_5) == 3
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_8.value).__module__}.{type(var_8.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_8.value) == 0
    assert var_8.next is None
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_9, var_9)
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_11 = linked_list_7.remove(float_1)
    assert var_11 is False
    var_12 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_13 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_9 = module_0.LinkedNode(var_13)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_11.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = linked_list_10.__len__()
    assert var_18 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_861():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1


def test_case_862():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 3
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_node_2 = module_0.LinkedNode(var_9)
    assert linked_node_2.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    list_1 = []
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 0
    list_2 = [linked_list_8]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 1
    var_14 = linked_list_9.__len__()
    assert var_14 == 1
    bool_0 = False
    linked_node_5 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, none_type_0)
    var_15 = linked_list_4.__len__()
    assert var_15 == 0


def test_case_863():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_3, linked_node_2)
    assert len(linked_node_3.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, var_9)
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_6.checkInfinite()
    list_0 = [linked_list_2]
    linked_node_7 = module_0.LinkedNode(list_0)


def test_case_864():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    var_4 = linked_list_3.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(linked_node_5)
    assert len(linked_list_4) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    bool_2 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(bool_2)
    linked_node_8 = module_0.LinkedNode(var_12)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1
    assert len(linked_node_10.value) == 1
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[False]"
    linked_node_11 = module_0.LinkedNode(bool_2, linked_node_5)


def test_case_865():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_1)
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(none_type_1)
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_6.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_3 = None
    linked_node_7 = module_0.LinkedNode(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_6 = linked_node_8.checkInfinite()
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.prepend(set_0)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1


def test_case_866():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_2, bytes_1, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_7 = linked_list_3.__len__()
    assert var_7 == 4
    var_8 = linked_list_3.__repr__()
    var_9 = linked_list_3.pop()
    assert len(linked_list_3) == 3
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_9.value).__module__}.{type(var_9.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_9.value) == 0
    assert var_9.next is None
    var_10 = linked_list_2.remove(complex_1)
    assert var_10 is False


def test_case_867():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_5.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(list_0)


def test_case_868():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_6 = linked_list_3.remove(dict_0)
    assert var_6 is True
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_11 = linked_list_10.remove(linked_list_10)
    assert var_11 is False
    linked_node_8 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_8.value) == 0


def test_case_869():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_0, bytes_0, linked_node_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_node_6 = module_0.LinkedNode(linked_node_4, linked_node_5)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_2 = linked_node_7.checkInfinite()
    var_3 = linked_node_7.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_6 = linked_node_8.checkInfinite()
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_2.__iter__()


def test_case_870():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_3 = module_0.LinkedNode(var_8)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_9 = linked_list_5.remove(bytes_1)
    assert var_9 is False
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_node_8 = module_0.LinkedNode(complex_0)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.remove(linked_list_6)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_node_11.checkInfinite()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_12.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_13.value) == 0
    var_21 = linked_node_13.checkInfinite()
    var_22 = linked_list_8.prepend(var_19)
    assert len(linked_list_8) == 1
    assert len(linked_node_13.value) == 1
    var_23 = linked_list_8.__repr__()
    assert var_23 == "link:[False]"
    var_24 = linked_list_2.__len__()
    assert var_24 == 0


def test_case_871():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_6 = module_0.LinkedNode(var_8)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_10 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_11 = linked_list_3.remove(var_5)
    assert var_11 is False


def test_case_872():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    none_type_0 = None
    var_6 = linked_list_3.remove(none_type_0)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = var_7.__repr__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_0)
    assert var_9 is False
    var_10 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_11 = linked_list_7.remove(bytes_1)
    var_12 = var_1.__len__()


def test_case_873():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"


def test_case_874():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_875():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_5.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_6)
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    float_0 = -2122.54
    linked_node_10 = module_0.LinkedNode(float_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_11.value) == 0
    var_8 = linked_node_11.checkInfinite()
    var_9 = linked_node_11.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_node_12 = module_0.LinkedNode(var_11)
    assert linked_node_12.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_13 = module_0.LinkedNode(bytes_2)
    linked_node_14 = module_0.LinkedNode(linked_node_13)
    var_12 = linked_node_14.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_15 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_15.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_16 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_16.value) == 0
    var_15 = linked_node_16.checkInfinite()
    var_16 = linked_list_8.prepend(var_13)
    assert len(linked_list_8) == 1
    assert len(linked_node_16.value) == 1
    var_17 = linked_list_8.__repr__()
    assert var_17 == "link:[False]"
    linked_node_17 = module_0.LinkedNode(var_17)
    assert linked_node_17.value == "link:[False]"


def test_case_876():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(bool_0)
    assert var_2 is False
    linked_node_0 = module_0.LinkedNode(var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    linked_node_2 = module_0.LinkedNode(var_9)
    assert (
        f"{type(linked_node_2.value).__module__}.{type(linked_node_2.value).__qualname__}"
        == "builtins.generator"
    )
    var_10 = linked_node_2.checkInfinite()


def test_case_877():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_3 = linked_node_1.checkInfinite()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_5 = linked_list_3.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_node_4.checkInfinite()


def test_case_878():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_8 = linked_list_1.prepend(linked_node_7)
    assert len(linked_list_1) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    complex_4 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_4)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_5.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_10 = module_0.LinkedNode(var_11)
    assert linked_node_10.value == "link:[]"
    complex_5 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_4.__repr__()
    assert var_15 == "link:[]"


def test_case_879():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__iter__()
    var_7 = var_6.__repr__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_8 = linked_list_4.remove(none_type_0)
    assert var_8 is False
    var_9 = linked_list_1.__repr__()
    assert var_9 == "link:[((-3330, -3330), -3330, b'z\\xe1\\xb7'),Vyx0]D=6H1fKTpZ]"


def test_case_880():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.prepend(bytes_0)
    assert len(linked_list_3) == 3
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_node_4 = module_0.LinkedNode(var_9)
    assert linked_node_4.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_13 = linked_list_7.remove(float_0)
    assert var_13 is False
    linked_node_7 = module_0.LinkedNode(float_0, bytes_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_17 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0


def test_case_881():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = var_1.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_2.__len__()
    assert var_11 == 0
    var_12 = linked_list_2.__len__()
    assert var_12 == 0
    var_13 = linked_list_2.remove(var_10)
    assert var_13 is False
    var_14 = linked_list_2.__iter__()
    var_15 = linked_list_2.prepend(linked_node_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1


def test_case_882():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_0.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_1 = module_0.LinkedNode(var_8)
    assert linked_node_1.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.remove(var_9)
    assert var_11 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_6.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_13)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_3.value) == 0
    var_14 = linked_node_3.checkInfinite()
    var_15 = linked_node_3.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_18 = var_17.__iter__()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_19 = linked_list_10.remove(float_1)
    assert var_19 is False
    var_20 = linked_list_10.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 2
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_4.value) == 0
    var_21 = linked_node_4.checkInfinite()
    var_22 = linked_node_4.checkInfinite()
    var_23 = linked_list_12.__repr__()
    assert var_23 == "link:[]"
    var_24 = var_11.__repr__()


def test_case_883():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_3, linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, linked_list_4)
    assert len(linked_node_5.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_0, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_11 = linked_list_8.__len__()
    assert var_11 == 4
    linked_node_9 = module_0.LinkedNode(bytes_0, linked_node_8)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_12 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_12, linked_list_10)
    assert len(linked_node_12.next) == 0
    var_13 = linked_list_10.__len__()
    assert var_13 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_14 = linked_list_11.remove(linked_list_11)
    assert var_14 is False
    var_15 = linked_list_11.__len__()
    assert var_15 == 0
    linked_node_13 = module_0.LinkedNode(var_2)
    assert linked_node_13.value == "link:[]"
    var_16 = linked_node_13.checkInfinite()


def test_case_884():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.remove(linked_node_0)
    assert var_1 is False


def test_case_885():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_6 = module_0.LinkedNode(var_11)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_2 = None
    linked_node_7 = module_0.LinkedNode(none_type_2)
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_13 = linked_list_1.remove(bytes_3)
    assert var_13 is False
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_5]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_16 = linked_list_2.pop()
    assert var_16 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_17 = var_16.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_18 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_6 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_6]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_19 = linked_list_4.pop()
    assert len(linked_list_4) == 0
    var_20 = var_19.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    linked_list_6 = module_0.LinkedList(*var_20)
    assert len(linked_list_6) == 10


def test_case_886():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(var_5)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_2.value) == 1
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.prepend(bytes_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_13 = linked_node_3.checkInfinite()
    var_14 = linked_node_3.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    linked_node_4 = module_0.LinkedNode(var_16)
    assert linked_node_4.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(linked_list_10)
    var_18 = linked_list_10.__len__()
    assert var_18 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_list_11.__repr__()
    assert var_20 == "link:[]"
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0, var_20)
    assert linked_node_8.next == "link:[]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_9 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_9, bytes_2, bytes_2, bytes_2}
    linked_node_10 = module_0.LinkedNode(set_0)
    bool_0 = False
    set_1 = {bool_0}
    linked_node_11 = module_0.LinkedNode(set_1)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_887():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = var_0.__iter__()


def test_case_888():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_node_4 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_2 = linked_node_5.checkInfinite()
    assert var_2 is False
    linked_node_6 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_6.next) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    linked_node_7 = module_0.LinkedNode(linked_node_6)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_4 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_9.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_1.__len__()
    assert var_8 == 2


def test_case_889():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_1.__iter__()


def test_case_890():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(linked_node_2)
    assert len(linked_list_4) == 1


def test_case_891():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_2 = linked_list_3.__repr__()
    assert (
        var_2
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_6 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.__len__()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_1 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_8 = linked_list_8.prepend(dict_1)
    assert len(linked_list_8) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_9 = linked_list_9.prepend(dict_1)
    assert len(linked_list_9) == 1
    var_10 = linked_list_9.remove(dict_1)
    assert var_10 is True
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_892():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == "0"
    var_5 = var_1.__repr__()


def test_case_893():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_4 = linked_node_5.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_2 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_2)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    bool_1 = True
    set_1 = {bool_1, bool_1, bool_1, bool_1}
    linked_node_8 = module_0.LinkedNode(set_1, set_1)
    bool_2 = True
    linked_node_9 = module_0.LinkedNode(bool_2)
    var_12 = linked_node_9.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_5.prepend(var_13)
    assert len(linked_list_5) == 1
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_node_11.checkInfinite()
    var_17 = linked_list_4.__iter__()


def test_case_894():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    linked_list_2 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_2) == 1
    var_4 = linked_list_1.remove(var_2)
    assert var_4 is False


def test_case_895():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList(*linked_list_0)
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_896():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_4.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_7)
    assert len(linked_list_5) == 96
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_0 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_13 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_14 = linked_list_11.prepend(dict_0)
    assert len(linked_list_11) == 1
    var_15 = linked_list_11.remove(dict_0)
    assert var_15 is True
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList(*list_0)
    assert len(linked_list_12) == 2


def test_case_897():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()


def test_case_898():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    var_9 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_6.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_10)
    assert linked_node_3.value == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = var_14.__len__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_list_9.prepend(var_19)
    assert len(linked_list_9) == 1
    assert len(linked_node_6.value) == 1
    linked_node_7 = module_0.LinkedNode(var_20, linked_node_6)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_node_8.checkInfinite()
    var_23 = linked_list_10.__repr__()
    assert var_23 == "link:[]"
    var_24 = linked_list_1.remove(linked_node_8)
    assert var_24 is False


def test_case_899():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()


def test_case_900():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_node_5.checkInfinite()
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_13 = linked_node_6.checkInfinite()
    bool_2 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.remove(bool_2)
    assert var_14 is False
    linked_node_7 = module_0.LinkedNode(var_14)
    var_15 = linked_node_1.checkInfinite()


def test_case_901():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False


def test_case_902():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_6 = var_5.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_12 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[{link:[{...}]: link:[{...}]}]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_14 = linked_list_7.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_7.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.remove(linked_list_9)
    assert var_16 is False
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_903():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__iter__()
    var_6 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    tuple_0 = (var_2,)
    linked_node_5 = module_0.LinkedNode(tuple_0, var_5)
    assert (
        f"{type(linked_node_5.next).__module__}.{type(linked_node_5.next).__qualname__}"
        == "builtins.generator"
    )


def test_case_904():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    var_4 = var_3.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_905():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    list_2 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 1
    var_1 = linked_list_2.__len__()
    assert var_1 == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(linked_list_3)
    assert var_2 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = var_2.__repr__()
    bool_0 = True
    list_3 = [bool_0, bool_0, bool_0, bool_0]
    list_4 = [list_3]
    linked_list_5 = module_0.LinkedList(*list_4)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_4 = linked_list_6.prepend(int_0)
    assert len(linked_list_6) == 1


def test_case_906():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_node_3 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    var_8 = var_6.__repr__()
    assert var_8 == "\"'link:[]'\""
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_node_7 = module_0.LinkedNode(linked_node_5, linked_node_6)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_9.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_13 = linked_list_5.remove(bytes_2)
    assert var_13 is False
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_11 = module_0.LinkedNode(set_0, set_0)
    var_14 = var_11.__repr__()


def test_case_907():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_1, set_1]
    linked_node_3 = module_0.LinkedNode(list_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    str_1 = "Vyx0]D=6H1fKTpZ"
    int_1 = -3330
    tuple_2 = (int_1, int_1)
    bytes_2 = b"z\xe1\xb7"
    tuple_3 = (tuple_2, int_1, bytes_2)
    list_2 = [str_1, tuple_3]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.prepend(bytes_2)
    assert len(linked_list_6) == 3
    var_12 = var_11.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_0.remove(list_2)
    assert var_14 is False


def test_case_908():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_909():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = var_7.__repr__()
    assert var_8 == "\"'link:[]'\""
    var_9 = var_7.__repr__()
    assert var_9 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    none_type_0 = None
    var_12 = linked_list_6.remove(none_type_0)
    assert var_12 is False
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_0 = (str_0, bytes_1, list_1)
    list_2 = [tuple_0, list_1, str_0]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 3
    var_13 = linked_list_7.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    list_3 = []
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_4)
    assert len(linked_list_9) == 2
    var_14 = linked_list_9.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_9.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_3 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_11.prepend(var_18)
    assert len(linked_list_11) == 1
    assert len(linked_node_10.value) == 1
    linked_node_11 = module_0.LinkedNode(linked_list_11, linked_node_10)
    assert len(linked_node_11.value) == 1
    var_20 = linked_list_10.prepend(var_19)
    assert len(linked_list_10) == 1
    linked_node_12 = module_0.LinkedNode(complex_2, linked_list_6)
    assert len(linked_node_12.next) == 4


def test_case_910():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_4 = linked_list_0.remove(float_0)
    assert var_4 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    var_15 = var_14.__repr__()
    assert var_15 == "'link:[]'"
    var_16 = var_15.__repr__()
    assert var_16 == "\"'link:[]'\""
    var_17 = var_15.__repr__()
    assert var_17 == "\"'link:[]'\""
    bytes_3 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_3]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 1
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 1
    list_2 = [linked_node_7, list_1, bytes_3, linked_node_7]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 4
    bool_0 = False
    linked_node_8 = module_0.LinkedNode(bool_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_18, linked_list_10)
    assert len(linked_node_10.next) == 0
    var_19 = linked_list_10.__iter__()
    var_20 = linked_list_7.__repr__()
    assert var_20 == "link:[]"


def test_case_911():
    float_0 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    float_1 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_1)
    assert var_3 is False
    var_4 = linked_list_1.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_5 = linked_list_1.__len__()
    assert var_5 == 2


def test_case_912():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 3
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_8 = linked_list_6.remove(bytes_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_1)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    linked_list_8 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_10.prepend(var_14)
    assert len(linked_list_10) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_10, linked_node_7)
    assert len(linked_node_8.value) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_12.__len__()
    assert var_18 == 0
    linked_node_10 = module_0.LinkedNode(linked_node_4)


def test_case_913():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_1 = linked_list_1.remove(none_type_0)
    assert var_1 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = linked_list_4.remove(linked_list_4)
    assert var_6 is False
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_node_6 = module_0.LinkedNode(bytes_0)


def test_case_914():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    var_2 = var_1.__len__()


def test_case_915():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_2 = linked_list_0.__repr__()
    assert (
        var_2
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_5 = module_0.LinkedNode(var_6)
    var_8 = var_2.__len__()
    assert var_8 == 76


def test_case_916():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_3, linked_node_1)
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(bool_0)
    assert var_4 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__iter__()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__iter__()
    linked_node_4 = module_0.LinkedNode(var_10)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.remove(linked_list_7)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_15 = linked_list_8.remove(float_0)
    assert var_15 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    linked_node_8 = module_0.LinkedNode(float_0)


def test_case_917():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_10, linked_list_3)
    assert len(linked_node_5.next) == 0
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, var_12)
    linked_node_8 = module_0.LinkedNode(var_13)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_20)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_13.value) == 0
    var_21 = linked_node_13.checkInfinite()
    var_22 = linked_node_13.checkInfinite()
    var_23 = linked_list_10.__len__()
    assert var_23 == 0
    var_24 = linked_list_9.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_14 = module_0.LinkedNode(var_5)


def test_case_918():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 0


def test_case_919():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_1.__len__()
    assert var_8 == 0


def test_case_920():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7


def test_case_921():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__iter__()
    var_10 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    linked_node_6 = module_0.LinkedNode(var_13)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_node_7)
    list_0 = []
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_4 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_4)
    list_1 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_17 = linked_list_8.prepend(bytes_4)
    assert len(linked_list_8) == 3
    var_18 = var_9.__repr__()


def test_case_922():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_0 = linked_list_2.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_2.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(linked_list_3)
    assert var_2 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_3, var_3)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_7 = linked_list_6.remove(float_1)
    assert var_7 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__len__()
    assert var_8 == 0
    bool_1 = True
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    list_3 = [list_2]
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 1
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_923():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()


def test_case_924():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_5.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*var_11)
    assert len(linked_list_6) == 96
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__iter__()
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 3
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[-731,-731,-731]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    linked_list_11 = module_0.LinkedList(*var_17)
    assert (
        f"{type(linked_list_11).__module__}.{type(linked_list_11).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_12.remove(linked_list_12)
    assert var_20 is False
    var_21 = linked_list_0.remove(linked_node_3)


def test_case_925():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, var_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    linked_list_4 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8, linked_list_5)
    assert len(linked_node_6.next) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_node_9 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_11 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.prepend(linked_node_11)
    assert len(linked_list_9) == 1
    float_0 = -2122.54
    linked_node_12 = module_0.LinkedNode(float_0)
    linked_node_13 = module_0.LinkedNode(var_2)
    assert (
        f"{type(linked_node_13.value).__module__}.{type(linked_node_13.value).__qualname__}"
        == "builtins.generator"
    )


def test_case_926():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(linked_node_3)
    assert len(linked_list_1) == 1
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(linked_node_4, linked_node_5)
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_7 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_7, bytes_0, bytes_0, bytes_0}
    linked_node_8 = module_0.LinkedNode(set_0)
    linked_node_9 = module_0.LinkedNode(set_0)


def test_case_927():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_5 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_4.prepend(var_13)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"\xa5\xfe\x82\xe9\xb6\xa4\x00TEx\xddH#\x19K\xe5/"
    tuple_0 = (bytes_2,)
    linked_node_9 = module_0.LinkedNode(tuple_0)


def test_case_928():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__len__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_3.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__iter__()
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = var_9.__repr__()
    assert var_10 == "\"'link:[]'\""
    var_11 = var_9.__repr__()
    assert var_11 == "\"'link:[]'\""
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_8.prepend(var_14)
    assert len(linked_list_8) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_8, linked_node_4)
    assert len(linked_node_5.value) == 1
    var_16 = linked_list_7.prepend(var_15)
    assert len(linked_list_7) == 1
    list_1 = []
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_17 = linked_list_10.remove(float_0)
    assert var_17 is False
    var_18 = linked_list_10.__repr__()
    assert (
        var_18
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_6.value) == 0
    var_19 = linked_node_6.checkInfinite()
    var_20 = linked_node_6.checkInfinite()
    var_21 = linked_list_12.__len__()
    assert var_21 == 0
    var_22 = linked_list_12.__len__()
    assert var_22 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_23 = linked_node_7.checkInfinite()
    var_24 = var_23.__repr__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_8.value) == 0
    var_25 = linked_node_8.checkInfinite()
    var_26 = linked_list_13.prepend(var_23)
    assert len(linked_list_13) == 1
    assert len(linked_node_8.value) == 1
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0


def test_case_929():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.__iter__()


def test_case_930():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_5)
    assert len(linked_node_5.next) == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == "0"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_7, linked_list_7, bytes_2, linked_node_7]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 4
    var_14 = linked_list_8.__len__()
    assert var_14 == 4
    var_15 = linked_list_8.__repr__()
    var_16 = linked_list_8.pop()
    assert len(linked_list_8) == 3
    assert (
        f"{type(var_16).__module__}.{type(var_16).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_16.value).__module__}.{type(var_16.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_16.value) == 0
    assert var_16.next is None
    var_17 = linked_list_7.__len__()
    assert var_17 == 0


def test_case_931():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False


def test_case_932():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_4 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_6.prepend(var_7)
    assert len(linked_list_6) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_8, linked_node_1)
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_9 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 1


def test_case_933():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList(*linked_list_3)
    assert (
        f"{type(linked_list_4).__module__}.{type(linked_list_4).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_4) == 1
    var_5 = linked_list_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.prepend(linked_node_3)
    assert len(linked_list_5) == 1
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList(*var_11)
    assert len(linked_list_6) == 5


def test_case_934():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    var_2 = linked_list_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_4)
    assert len(linked_list_3) == 96
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_1)
    assert var_5 is False
    var_6 = linked_list_4.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_6.prepend(var_8)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_12 = var_9.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    float_2 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_14 = linked_list_8.remove(float_2)
    assert var_14 is False
    linked_node_8 = module_0.LinkedNode(float_2, bytes_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_15 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    complex_4 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_4)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    linked_node_10 = module_0.LinkedNode(dict_0)


def test_case_935():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.prepend(bytes_1)
    assert len(linked_list_6) == 3
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_1 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_9 = linked_list_7.prepend(dict_1)
    assert len(linked_list_7) == 1
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    int_1 = 720
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.remove(int_1)
    assert var_11 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_2]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 1
    list_2 = [linked_node_5, list_1, bytes_2, linked_node_5]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 4
    var_12 = var_10.__len__()
    assert var_12 == 35


def test_case_936():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    assert var_3 is False
    linked_node_6 = module_0.LinkedNode(var_3, linked_list_3)
    assert len(linked_node_6.next) == 0
    var_4 = linked_list_3.__iter__()
    var_5 = var_0.__len__()
    assert var_5 == 76


def test_case_937():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_2.__iter__()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"


def test_case_938():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__iter__()
    var_16 = linked_list_7.remove(linked_list_7)
    assert var_16 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 3
    var_19 = linked_list_10.__repr__()
    assert var_19 == "link:[-731,-731,-731]"
    complex_4 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_20 = linked_list_11.__repr__()
    assert var_20 == "link:[]"
    var_21 = linked_node_10.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_22 = linked_list_12.remove(var_20)
    int_1 = -731
    list_1 = [int_1, int_1, int_1]
    linked_list_13 = module_0.LinkedList(*list_1)
    assert len(linked_list_13) == 3
    var_23 = linked_list_13.__repr__()
    assert var_23 == "link:[-731,-731,-731]"
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_24 = linked_list_14.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__repr__()
    linked_list_15 = module_0.LinkedList(*var_24)
    assert (
        f"{type(linked_list_15).__module__}.{type(linked_list_15).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_15) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_11.value) == 0


def test_case_939():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = -2122.54
    linked_node_1 = module_0.LinkedNode(float_0)
    float_1 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_1)
    assert var_4 is False
    var_5 = linked_list_3.__iter__()
    bool_0 = False
    set_0 = {bool_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    bool_1 = True
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    list_2 = [list_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_3 = [bytes_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 1
    var_6 = linked_list_5.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_7 = var_6.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    linked_node_4 = module_0.LinkedNode(var_3)
    assert linked_node_4.value == 0


def test_case_940():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.remove(var_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    none_type_2 = None
    linked_node_3 = module_0.LinkedNode(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.__iter__()
    var_10 = var_7.__iter__()


def test_case_941():
    bool_0 = False
    set_0 = {bool_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(linked_node_6)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_8.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_7 = linked_node_9.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_9.value) == 1
    var_9 = var_6.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    complex_3 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_942():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_6 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_node_3 = module_0.LinkedNode(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__iter__()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_15 = linked_list_7.remove(float_0)
    assert var_15 is False
    linked_node_9 = module_0.LinkedNode(float_0, bytes_2)
    var_16 = linked_list_3.__len__()
    assert var_16 == 0


def test_case_943():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    linked_node_3 = module_0.LinkedNode(var_5)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_4 = module_0.LinkedNode(set_0, set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_9 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    linked_node_6 = module_0.LinkedNode(var_14)
    assert linked_node_6.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_8.__len__()
    assert var_15 == 0


def test_case_944():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    var_3 = linked_list_1.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_945():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_946():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_2 = linked_node_5.checkInfinite()
    var_3 = linked_node_5.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_9 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    linked_node_7 = module_0.LinkedNode(linked_list_7, linked_node_6)
    assert len(linked_node_7.value) == 1
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_1, bytes_1, bool_0)
    linked_node_8 = module_0.LinkedNode(tuple_0, bool_0)
    var_15 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 3


def test_case_947():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_11, linked_node_4)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_6.checkInfinite()
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_7 = module_0.LinkedNode(set_0)
    list_0 = []
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_14 = linked_list_9.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_9.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.remove(linked_list_10)
    assert var_16 is False
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_20, linked_list_11)
    assert len(linked_node_11.next) == 0
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_21 = linked_list_12.prepend(bytes_3)
    assert len(linked_list_12) == 1
    var_22 = linked_list_2.__iter__()


def test_case_948():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_8 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_8, linked_list_6)
    assert len(linked_node_2.next) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    bool_0 = False
    linked_node_4 = module_0.LinkedNode(bool_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_node_9.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(var_15)
    assert var_17 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_14)
    assert (
        f"{type(linked_node_11.value).__module__}.{type(linked_node_11.value).__qualname__}"
        == "builtins.generator"
    )


def test_case_949():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    linked_node_2 = module_0.LinkedNode(bytes_0, linked_node_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_10 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11, var_11)
    linked_node_8 = module_0.LinkedNode(var_12)
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_9.__iter__()
    bool_0 = True
    linked_node_11 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_11.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_12.value) == 0
    var_16 = linked_node_12.checkInfinite()
    var_17 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_16, var_16)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 1
    var_18 = linked_list_11.pop()
    assert var_18 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_11) == 0
    var_19 = var_18.__iter__()
    complex_4 = 4095.03 - 599.647583j
    linked_node_14 = module_0.LinkedNode(complex_4)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1


def test_case_950():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_6, linked_list_2)
    assert len(linked_node_2.next) == 0
    int_1 = 720
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(int_1)
    assert var_7 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(var_11, linked_node_3)
    none_type_0 = None
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(none_type_0)
    var_13 = var_6.__repr__()


def test_case_951():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    var_5 = linked_list_0.__repr__()
    assert var_5 == "link:[]"


def test_case_952():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.remove(bool_0)
    linked_node_5 = module_0.LinkedNode(var_13)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_6, bytes_2, linked_node_6]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_15 = linked_list_7.__len__()
    assert var_15 == 4
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_1)
    var_17 = linked_node_7.checkInfinite()
    var_18 = var_16.__repr__()
    assert var_18 == "'link:[]'"
    var_19 = linked_list_8.__len__()
    assert var_19 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.remove(linked_list_9)
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    var_22 = var_14.__repr__()


def test_case_953():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_1 = linked_list_1.pop()
    assert var_1 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    var_6 = var_4.__repr__()
    assert var_6 == "\"'link:[]'\""
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_10 = linked_node_1.checkInfinite()
    assert var_10 is False
    linked_node_2 = module_0.LinkedNode(var_10, linked_list_6)
    assert len(linked_node_2.next) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_8.prepend(var_11)
    assert len(linked_list_8) == 1
    assert len(linked_node_4.value) == 1
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[False]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__repr__()
    assert var_17 == "'link:[]'"
    var_18 = var_17.__repr__()
    assert var_18 == "\"'link:[]'\""
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_19 = linked_list_10.prepend(bytes_2)
    assert len(linked_list_10) == 3
    bytes_3 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_5 = module_0.LinkedNode(bytes_3, bytes_3)
    set_0 = {linked_node_5, bytes_3, bytes_3, bytes_3}
    linked_node_6 = module_0.LinkedNode(set_0)
    var_20 = linked_list_3.prepend(var_17)
    assert len(linked_list_3) == 1


def test_case_954():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_1.value) == 1
    var_9 = var_6.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_2.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_955():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_5 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_956():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_6 = linked_list_3.__iter__()
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2)
    linked_node_6 = module_0.LinkedNode(none_type_2)
    linked_node_7 = module_0.LinkedNode(linked_node_5, linked_node_6)
    bytes_1 = b"\x97"
    var_7 = linked_list_0.prepend(bytes_1)
    assert len(linked_list_0) == 1


def test_case_957():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_0)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_4 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_7, var_7)
    linked_node_8 = module_0.LinkedNode(var_8)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_9.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_958():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.remove(linked_list_2)
    assert var_1 is False
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, var_4)
    assert linked_node_3.next == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_5 = linked_list_4.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_4.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_6)
    assert len(linked_list_5) == 96
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(var_7)
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_4 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_4)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    var_12 = linked_list_10.__repr__()
    assert var_12 == "link:[]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_13 = linked_list_11.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_4.__iter__()


def test_case_959():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_3 = var_2.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_9)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.remove(var_11)
    assert var_14 is False
    var_15 = linked_list_9.__iter__()
    var_16 = var_2.__repr__()


def test_case_960():
    float_0 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = False
    linked_node_3 = module_0.LinkedNode(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bool_1 = False
    set_0 = {bool_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_node_6 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_6.value) == 0


def test_case_961():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.remove(dict_0)
    assert var_6 is True
    assert len(linked_list_4) == 0
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_4.__len__()
    assert var_13 == 0


def test_case_962():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.remove(linked_node_0)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_5 = linked_list_3.__len__()
    assert var_5 == 4
    var_6 = linked_list_3.__repr__()
    var_7 = linked_list_3.pop()
    assert len(linked_list_3) == 3
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_7.value).__module__}.{type(var_7.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_7.value) == 0
    assert var_7.next is None
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__iter__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.prepend(bytes_1)
    assert len(linked_list_5) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_11, linked_list_7)
    assert len(linked_node_5.next) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.__repr__()
    assert var_12 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_13 = linked_list_10.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_10.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == "link:[]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_15 = linked_list_11.remove(linked_list_11)
    var_16 = linked_list_5.__len__()
    assert var_16 == 1


def test_case_963():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)


def test_case_964():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_3.__iter__()
    linked_node_1 = module_0.LinkedNode(var_4)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_7 = linked_list_5.remove(dict_0)
    assert var_7 is True
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_7.prepend(var_10)
    assert len(linked_list_7) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_7, linked_node_3)
    assert len(linked_node_4.value) == 1
    var_12 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    bool_0 = False
    var_13 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    assert len(linked_node_0.value) == 1


def test_case_965():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, var_8)
    assert linked_node_4.next == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_9 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_5 = module_0.LinkedNode(var_9)
    var_11 = linked_list_2.remove(dict_0)


def test_case_966():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_2.next) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, var_4)
    linked_node_6 = module_0.LinkedNode(var_5)
    none_type_0 = None
    list_2 = [none_type_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList(*linked_list_6)
    assert (
        f"{type(linked_list_7).__module__}.{type(linked_list_7).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_7) == 1
    var_6 = linked_list_7.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_6.__iter__()


def test_case_967():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_4, bytes_0, linked_node_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_5 = linked_list_5.__len__()
    assert var_5 == 4
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1, none_type_1)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.__repr__()
    assert var_6 == "link:[]"
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_7.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    var_11 = linked_list_3.pop()
    assert var_11 is False
    assert len(linked_list_3) == 3


def test_case_968():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    var_1 = linked_list_0.prepend(linked_list_0)
    assert len(linked_list_0) == 4


def test_case_969():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_5 = var_1.__repr__()


def test_case_970():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_node_1.checkInfinite()
    bool_2 = True
    linked_node_2 = module_0.LinkedNode(bool_2)
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(linked_list_4)
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_1.__repr__()


def test_case_971():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__iter__()
    var_4 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_node_5 = module_0.LinkedNode(linked_node_3, linked_node_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.remove(var_6)
    assert var_9 is False
    var_10 = linked_list_6.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_11.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_1.__repr__()
    assert var_13 == "link:[link:[]]"


def test_case_972():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.pop()
    assert var_3 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_4 = var_3.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_8.__len__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_node_7 = module_0.LinkedNode(none_type_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == "0"
    var_15 = linked_list_5.__iter__()


def test_case_973():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()


def test_case_974():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False


def test_case_975():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_5 = var_2.__iter__()
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 1
    list_2 = [linked_node_2, list_1, bytes_2, linked_node_2]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_6 = linked_node_3.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(bool_0)
    linked_node_5 = module_0.LinkedNode(var_10)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 2
    var_14 = linked_list_8.remove(float_1)
    assert var_14 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_5 = [linked_node_8, linked_list_10, bytes_4, linked_node_8]
    linked_list_11 = module_0.LinkedList(*list_5)
    assert len(linked_list_11) == 4
    var_17 = linked_list_11.__len__()
    assert var_17 == 4
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_5 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_5)
    list_6 = [str_0, tuple_1]
    linked_list_12 = module_0.LinkedList(*list_6)
    assert len(linked_list_12) == 2
    var_18 = var_7.__repr__()


def test_case_976():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = linked_list_0.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = var_1.__repr__()


def test_case_977():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(linked_list_4)
    assert var_4 is False
    list_0 = []
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_5 = linked_list_6.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_6.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_8.__len__()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, linked_list_10)
    assert len(linked_node_7.next) == 0
    var_13 = linked_list_10.__iter__()
    var_14 = linked_list_1.__len__()
    assert var_14 == 0


def test_case_978():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_2)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    linked_list_3 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_3) == 1
    var_4 = linked_list_2.__iter__()


def test_case_979():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_node_2 = module_0.LinkedNode(complex_1)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(linked_list_4)
    assert var_4 is False
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, var_7)
    assert linked_node_6.next == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_12 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_12, linked_list_8)
    assert len(linked_node_10.next) == 0
    var_13 = linked_list_6.prepend(linked_list_4)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1


def test_case_980():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"


def test_case_981():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 1
    list_1 = [linked_node_3, list_0, bytes_0, linked_node_3]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 4


def test_case_982():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1


def test_case_983():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    var_4 = linked_list_1.remove(none_type_0)
    assert var_4 is False


def test_case_984():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)
    list_0 = [bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.remove(set_0)
    assert var_0 is False


def test_case_985():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_node_2.checkInfinite()
    none_type_2 = None
    linked_node_3 = module_0.LinkedNode(none_type_2)
    linked_node_4 = module_0.LinkedNode(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_10 = linked_list_7.prepend(bytes_1)
    assert len(linked_list_7) == 3
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_986():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    list_0 = [bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_1 = linked_list_2.remove(set_0)
    assert var_1 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_4.prepend(var_4)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_5.prepend(var_6)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_1, set_1]
    linked_node_6 = module_0.LinkedNode(list_1)
    var_10 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(bytes_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_12 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_14 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 2


def test_case_987():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 1
    list_2 = [linked_node_0, list_1, bytes_0, linked_node_0]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_2 = module_0.LinkedList(*list_3)
    assert len(linked_list_2) == 4
    bool_0 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_1 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    list_4 = []
    linked_list_4 = module_0.LinkedList(*list_4)
    assert len(linked_list_4) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_5 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_5)
    assert len(linked_list_5) == 2
    var_2 = linked_list_5.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_5.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_1 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_4 = linked_list_6.remove(bool_1)
    assert var_4 is False
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_8.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_9.prepend(var_9)
    assert len(linked_list_9) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(var_10, linked_node_3)
    var_11 = linked_list_6.__len__()
    assert var_11 == 0


def test_case_988():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(var_0, linked_list_1)
    assert linked_node_0.value == "link:[-731,-731,-731]"
    assert len(linked_node_0.next) == 0


def test_case_989():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == "0"
    var_7 = var_6.__repr__()
    assert var_7 == "'0'"


def test_case_990():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    linked_node_1 = module_0.LinkedNode(var_4)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    assert var_9 is False
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_8, bytes_1, linked_node_6]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 4
    var_15 = linked_list_9.__len__()
    assert var_15 == 4
    linked_node_7 = module_0.LinkedNode(bytes_1, linked_node_6)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_11.__len__()
    assert var_18 == 0
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_10.prepend(linked_list_2)
    assert len(linked_list_10) == 1


def test_case_991():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    var_1 = linked_list_0.prepend(linked_list_0)
    assert len(linked_list_0) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_4.__repr__()


def test_case_992():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList(*linked_list_0)
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    none_type_1 = None
    linked_node_0 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == "0"
    none_type_2 = None
    linked_node_2 = module_0.LinkedNode(none_type_2)
    linked_node_3 = module_0.LinkedNode(none_type_2)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.__len__()
    assert var_12 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = var_5.__iter__()


def test_case_993():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__iter__()


def test_case_994():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_5.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_4.__iter__()
    int_0 = 720
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.remove(int_0)
    assert var_7 is False
    bool_1 = False
    linked_node_7 = module_0.LinkedNode(bool_1)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1, none_type_1)
    var_8 = linked_list_2.__len__()
    assert var_8 == 0


def test_case_995():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_5 = module_0.LinkedNode(var_10)
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_8.remove(linked_node_10)
    assert var_15 is False
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 3
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[-731,-731,-731]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    linked_list_11 = module_0.LinkedList(*var_17)
    assert (
        f"{type(linked_list_11).__module__}.{type(linked_list_11).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_11) == 0
    list_1 = []
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 0
    list_2 = [linked_list_12]
    linked_list_13 = module_0.LinkedList(*list_2)
    assert len(linked_list_13) == 1
    var_20 = linked_list_13.__len__()
    assert var_20 == 1
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0


def test_case_996():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.__len__()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__iter__()
    list_0 = []
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 0
    list_1 = [linked_list_4]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_9 = linked_list_5.__len__()
    assert var_9 == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_10 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_4 = module_0.LinkedNode(var_10)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_2)
    var_15 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(bytes_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = linked_list_0.__len__()
    assert var_19 == 0


def test_case_997():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_0, bytes_1, linked_node_2]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    var_2 = linked_list_1.__len__()
    assert var_2 == 4
    var_3 = linked_list_1.__repr__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_2 = []
    tuple_0 = (str_0, bytes_2, list_2)
    list_3 = [tuple_0, list_2, str_0]
    linked_list_2 = module_0.LinkedList(*list_3)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_3 = b"U"
    set_1 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_4 = [set_1, set_1]
    linked_node_3 = module_0.LinkedNode(list_4)
    var_5 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_998():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_1 = module_0.LinkedNode(set_0, set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_999():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_1 = linked_list_0.prepend(linked_node_1)
    assert len(linked_list_0) == 2


def test_case_1000():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_3.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_15, var_15)
    linked_node_6 = module_0.LinkedNode(var_16)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_9.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_list_10.prepend(var_19)
    assert len(linked_list_10) == 1
    assert len(linked_node_7.value) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 4
    complex_0 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_21 = linked_list_11.remove(none_type_0)
    assert var_21 is False
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_22 = linked_list_12.remove(linked_list_12)
    assert var_22 is False
    var_23 = linked_list_12.__len__()
    assert var_23 == 0
    bool_1 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_3}
    linked_node_9 = module_0.LinkedNode(set_0)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_1001():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    var_2 = var_1.__iter__()


def test_case_1002():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 1
    list_1 = [linked_node_3, list_0, bytes_0, linked_node_3]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.remove(var_6)
    assert var_9 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = var_10.__repr__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_8.__iter__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_node_7 = module_0.LinkedNode(none_type_1)
    var_14 = var_3.__iter__()


def test_case_1003():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 1
    float_1 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__len__()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0


def test_case_1004():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_0, bytes_1, linked_node_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_3 = linked_list_1.__len__()
    assert var_3 == 4
    var_4 = linked_list_1.__repr__()
    var_5 = linked_list_1.pop()
    assert len(linked_list_1) == 3
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_5.value).__module__}.{type(var_5.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_5.value) == 0
    assert var_5.next is None
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_2, bytes_2, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_7 = linked_list_3.__len__()
    assert var_7 == 4
    linked_node_3 = module_0.LinkedNode(bytes_2, linked_node_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, var_8)
    var_10 = linked_list_2.__repr__()
    assert var_10 == "link:[]"


def test_case_1005():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 1
    list_1 = [linked_node_2, list_0, bytes_0, linked_node_2]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 4
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 2
    var_1 = linked_list_3.remove(float_0)
    assert var_1 is False
    linked_node_3 = module_0.LinkedNode(float_0, bytes_1)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    list_4 = []
    linked_list_4 = module_0.LinkedList(*list_4)
    assert len(linked_list_4) == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_5 = [bytes_3, bytes_3]
    linked_list_5 = module_0.LinkedList(*list_5)
    assert len(linked_list_5) == 2
    var_2 = linked_list_5.remove(float_1)
    assert var_2 is False
    var_3 = linked_list_5.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_7.__len__()
    assert var_6 == 0
    var_7 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_9.__len__()
    assert var_10 == 0
    var_11 = linked_list_8.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_1006():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_3 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_1 = module_0.LinkedNode(var_3)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 3
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[-731,-731,-731]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList(*var_9)
    assert (
        f"{type(linked_list_7).__module__}.{type(linked_list_7).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[]"
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_1, set_1]
    linked_node_6 = module_0.LinkedNode(list_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    linked_list_9 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_9) == 1
    var_15 = linked_list_1.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"


def test_case_1007():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    var_2 = var_1.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    var_6 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    linked_node_8 = module_0.LinkedNode(var_10)
    assert linked_node_8.value == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_9.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_10.value) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_16 = linked_node_11.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_17 = linked_node_12.checkInfinite()
    var_18 = linked_node_12.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_19 = linked_list_9.prepend(var_18)
    assert len(linked_list_9) == 1
    assert len(linked_node_12.value) == 1
    float_0 = -2122.54
    linked_node_13 = module_0.LinkedNode(float_0)
    var_20 = linked_list_4.__iter__()


def test_case_1008():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_0 = (str_0, bytes_1, list_1)
    list_2 = [tuple_0, list_1, str_0]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 3
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_node_2.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.remove(var_9)
    assert var_11 is False
    float_0 = -2122.54
    linked_node_3 = module_0.LinkedNode(float_0)
    none_type_0 = None
    list_3 = [none_type_0]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList(*linked_list_7)
    assert (
        f"{type(linked_list_8).__module__}.{type(linked_list_8).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_8) == 1
    var_12 = linked_list_8.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_5.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__repr__()
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_7.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_9.__repr__()
    assert var_22 == "'link:[]'"


def test_case_1009():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_7, bytes_1, linked_node_4]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 4
    var_10 = linked_list_8.__len__()
    assert var_10 == 4
    var_11 = linked_list_8.__repr__()
    var_12 = linked_list_8.pop()
    assert len(linked_list_8) == 3
    assert (
        f"{type(var_12).__module__}.{type(var_12).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_12.value).__module__}.{type(var_12.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_12.value) == 0
    assert var_12.next is None
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_13, linked_list_9)
    assert len(linked_node_6.next) == 0
    var_14 = linked_list_9.__iter__()
    none_type_0 = None
    list_2 = [none_type_0]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 1
    linked_list_11 = module_0.LinkedList(*linked_list_10)
    assert (
        f"{type(linked_list_11).__module__}.{type(linked_list_11).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_11) == 1
    var_15 = linked_list_11.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    var_18 = linked_list_7.__iter__()


def test_case_1010():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    var_5 = var_2.__iter__()


def test_case_1011():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList(*linked_list_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_node_1.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_2.checkInfinite()
    var_13 = var_12.__repr__()
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_1)
    var_14 = linked_node_3.checkInfinite()
    var_15 = var_13.__repr__()


def test_case_1012():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_6.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_4.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 3
    var_18 = linked_list_8.__repr__()
    assert var_18 == "link:[-731,-731,-731]"
    var_19 = linked_list_8.prepend(linked_list_8)
    assert len(linked_list_8) == 4
    linked_node_6 = module_0.LinkedNode(linked_list_0, list_0)
    assert len(linked_node_6.value) == 0


def test_case_1013():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_2, linked_node_0)
    assert len(linked_node_1.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_6 = linked_list_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    var_7 = linked_list_4.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_8 = var_7.__iter__()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    var_9 = var_8.__iter__()


def test_case_1014():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_8 = linked_list_8.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_8.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_10 = var_5.__repr__()


def test_case_1015():
    tuple_0 = ()
    linked_node_0 = module_0.LinkedNode(tuple_0)


def test_case_1016():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_3 = linked_list_0.__repr__()
    assert (
        var_3
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.prepend(bytes_2)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_16 = var_13.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_17 = linked_list_6.__repr__()
    assert var_17 == "link:[]"
    var_18 = var_17.__iter__()
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    linked_node_6 = module_0.LinkedNode(var_9)


def test_case_1017():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5)
    var_6 = var_3.__iter__()


def test_case_1018():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_1.__iter__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_1019():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    var_3 = linked_list_1.pop()
    assert len(linked_list_1) == 3
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_3.value).__module__}.{type(var_3.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_3.value) == 0
    assert var_3.next is None
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    linked_node_1 = module_0.LinkedNode(float_0, bytes_1)
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 3
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[-731,-731,-731]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_3 = [linked_node_5, linked_list_6, bytes_3, linked_node_5]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 4
    var_9 = linked_list_7.__len__()
    assert var_9 == 4
    linked_node_6 = module_0.LinkedNode(bytes_3, linked_node_5)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_1020():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0


def test_case_1021():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_1022():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    list_2 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 1
    var_1 = linked_list_2.__len__()
    assert var_1 == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 2
    var_2 = linked_list_3.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_3.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 2
    int_0 = -731
    list_4 = [int_0, int_0, int_0]
    linked_list_5 = module_0.LinkedList(*list_4)
    assert len(linked_list_5) == 3
    var_4 = linked_list_5.__repr__()
    assert var_4 == "link:[-731,-731,-731]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_5 = linked_list_6.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    linked_list_7 = module_0.LinkedList(*var_5)
    assert (
        f"{type(linked_list_7).__module__}.{type(linked_list_7).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_7) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_8 = linked_list_8.prepend(linked_node_6)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_9 = linked_list_10.__iter__()
    var_10 = linked_list_10.__iter__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_11 = linked_list_11.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_node_8.checkInfinite()
    assert var_12 is False
    var_13 = var_11.__iter__()


def test_case_1023():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0, linked_node_0)


def test_case_1024():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(none_type_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_2 = module_0.LinkedNode(var_6)
    assert linked_node_2.value == 0
    var_7 = var_5.__repr__()
    assert var_7 == "0"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    var_9 = linked_list_5.pop()
    assert var_9 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_10 = var_9.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__iter__()
    var_12 = var_11.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_13, var_13)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_9.prepend(var_15)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    var_19 = var_16.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    var_21 = linked_node_8.checkInfinite()
    list_3 = [linked_list_1, bytes_2]
    linked_node_9 = module_0.LinkedNode(list_3, var_21)


def test_case_1025():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__len__()
    assert var_5 == 7
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__iter__()
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_1.__iter__()


def test_case_1026():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    tuple_0 = ()
    linked_node_3 = module_0.LinkedNode(tuple_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.pop()
    assert var_8 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_9 = var_8.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_11.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    var_14 = linked_node_8.checkInfinite()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_15 = linked_list_1.__iter__()


def test_case_1027():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_0, linked_list_3, bytes_1, linked_node_0]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    var_7 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    assert var_8 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    str_1 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_1 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_2 = (tuple_1, int_0, bytes_2)
    list_3 = [str_1, tuple_2]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 2
    var_11 = linked_list_7.prepend(bytes_2)
    assert len(linked_list_7) == 3
    var_12 = var_11.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_node_1.checkInfinite()
    var_14 = linked_list_8.__iter__()
    linked_node_2 = module_0.LinkedNode(none_type_0)


def test_case_1028():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    tuple_0 = (var_1, var_0, list_0)
    linked_node_0 = module_0.LinkedNode(tuple_0)


def test_case_1029():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.remove(linked_node_0)
    assert var_1 is False
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 3
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[-731,-731,-731]"
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_7.__len__()
    assert var_8 == 0
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_2.remove(linked_list_2)
    assert var_10 is False


def test_case_1030():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 3
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_6 = module_0.LinkedNode(var_7)
    assert linked_node_6.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_1)
    var_9 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_10 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1


def test_case_1031():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    var_3 = var_1.__repr__()


def test_case_1032():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_5 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    var_10 = linked_list_3.remove(linked_list_3)
    assert var_10 is False
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_11 = linked_list_4.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_4.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.__iter__()
    var_14 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__repr__()
    assert var_16 == "'link:[]'"
    var_17 = var_16.__repr__()
    assert var_17 == "\"'link:[]'\""
    var_18 = var_16.__repr__()
    assert var_18 == "\"'link:[]'\""
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.remove(bool_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0


def test_case_1033():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_2)
    assert len(linked_list_2) == 96
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_3 = var_0.__len__()
    assert var_3 == 7


def test_case_1034():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_2 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    bool_2 = True
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.prepend(bool_2)
    assert len(linked_list_8) == 1
    var_15 = linked_list_8.__len__()
    assert var_15 == 1


def test_case_1035():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 2
    var_1 = linked_list_2.remove(float_0)
    assert var_1 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 2
    var_2 = linked_list_3.remove(float_1)
    assert var_2 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__len__()
    assert var_3 == 0
    float_2 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_4)
    assert len(linked_list_5) == 2
    var_4 = linked_list_5.remove(float_2)
    assert var_4 is False
    var_5 = linked_list_5.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_2.pop()
    assert var_7 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_2) == 1


def test_case_1036():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    var_4 = var_2.__repr__()
    assert var_4 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_10 = linked_node_3.checkInfinite()


def test_case_1037():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.remove(linked_list_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_0.prepend(list_1)
    assert len(linked_list_0) == 1


def test_case_1038():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_2.__iter__()
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0


def test_case_1039():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False


def test_case_1040():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.remove(dict_0)
    assert var_3 is True
    assert len(linked_list_2) == 0
    bool_1 = True
    linked_node_4 = module_0.LinkedNode(bool_1)
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    var_8 = linked_list_3.pop()
    assert var_8 is False
    assert len(linked_list_3) == 0


def test_case_1041():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_1, set_1]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_10 = linked_node_4.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_15 = var_12.__repr__()
    var_16 = linked_list_5.__len__()
    assert var_16 == 0


def test_case_1042():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_2 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_7.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_5 = linked_list_4.remove(dict_0)
    assert var_5 is True
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.prepend(linked_list_4)
    assert len(linked_list_5) == 1


def test_case_1043():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.remove(bool_1)
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, var_6)
    assert linked_node_4.next == "link:[]"
    var_7 = linked_node_1.checkInfinite()


def test_case_1044():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_9 = var_6.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.remove(linked_list_4)
    assert var_10 is False
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = var_12.__repr__()
    assert var_13 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.remove(var_15)
    var_19 = linked_list_7.__iter__()
    bool_0 = False
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_20 = var_15.__repr__()
    var_21 = var_20.__iter__()


def test_case_1045():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_1)
    assert var_2 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_2 = module_0.LinkedNode(var_5)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.remove(var_16)
    assert var_19 is False
    var_20 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_21 = linked_node_6.checkInfinite()
    var_22 = linked_node_6.checkInfinite()
    var_23 = linked_list_8.__len__()
    assert var_23 == 0
    var_24 = linked_list_8.__len__()
    assert var_24 == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_25 = linked_node_7.checkInfinite()
    var_26 = var_25.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_27 = var_20.__iter__()
    var_28 = var_27.__iter__()


def test_case_1046():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    bool_0 = False
    set_0 = {bool_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.remove(var_5)
    assert var_8 is False
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    int_0 = 720
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(int_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0


def test_case_1047():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(bytes_1)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_1.__iter__()


def test_case_1048():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.remove(var_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_node_1)
    linked_node_4 = module_0.LinkedNode(complex_0, linked_node_2)


def test_case_1049():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.prepend(bytes_1)
    assert len(linked_list_3) == 3
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_5 = linked_list_4.remove(bytes_2)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_6.prepend(var_8)
    assert len(linked_list_6) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_9, linked_node_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = var_10.__repr__()
    var_12 = var_1.__repr__()
    assert var_12 == "'0'"


def test_case_1050():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[[True, True, True, True]]"


def test_case_1051():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_2 = linked_list_1.remove(none_type_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    bool_1 = False
    linked_node_3 = module_0.LinkedNode(bool_1)
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1, none_type_1)
    bool_2 = True
    set_1 = {bool_2, bool_2, bool_2, bool_2}
    linked_node_5 = module_0.LinkedNode(set_1, set_1)
    list_2 = [bool_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.remove(set_1)
    assert var_7 is False
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_8 = linked_list_4.remove(set_1)
    assert var_8 is False


def test_case_1052():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    var_3 = linked_list_1.pop()
    assert len(linked_list_1) == 3
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_3.value).__module__}.{type(var_3.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_3.value) == 0
    assert var_3.next is None
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[-731,-731,-731]"
    var_5 = linked_list_2.prepend(linked_list_2)
    assert len(linked_list_2) == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_2)
    var_11 = linked_node_2.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_3 = [bytes_2]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 1
    list_4 = [linked_node_3, list_3, bytes_2, linked_node_3]
    list_5 = [list_4, list_3, list_3, list_3]
    linked_list_7 = module_0.LinkedList(*list_5)
    assert len(linked_list_7) == 4
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    bool_0 = False
    linked_node_6 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0, none_type_0)
    list_6 = []
    linked_list_9 = module_0.LinkedList(*list_6)
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = var_2.__iter__()


def test_case_1053():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_1054():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11, linked_list_5)
    assert len(linked_node_7.next) == 0
    var_12 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_2 = None
    linked_node_8 = module_0.LinkedNode(none_type_2)
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    var_14 = linked_node_9.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_1055():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)


def test_case_1056():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 3
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[-731,-731,-731]"
    var_3 = linked_list_1.prepend(linked_list_1)
    assert len(linked_list_1) == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 0


def test_case_1057():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_5 = var_2.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_12 = linked_list_7.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_7.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_3 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_3)
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(bytes_4)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_15 = linked_list_10.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_10.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_list_12.__len__()
    assert var_19 == 0
    var_20 = linked_list_11.__iter__()
    var_21 = linked_list_11.__len__()
    assert var_21 == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_5)
    var_22 = linked_node_10.checkInfinite()
    var_23 = var_22.__repr__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_11.value) == 0
    var_24 = linked_node_11.checkInfinite()
    var_25 = linked_list_13.prepend(var_22)
    assert len(linked_list_13) == 1
    assert len(linked_node_11.value) == 1
    var_26 = linked_list_13.__repr__()
    assert var_26 == "link:[False]"
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_12.value) == 0
    var_27 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_27)
    var_28 = linked_list_7.remove(var_20)
    assert var_28 is False


def test_case_1058():
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_0 = module_0.LinkedNode(bytes_0)


def test_case_1059():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_5.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_6.value) == 1
    var_6 = var_3.__iter__()
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_7 = linked_list_3.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_3.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_7 = module_0.LinkedNode(list_1)


def test_case_1060():
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == "0"
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_1061():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(linked_list_4)
    assert var_4 is False
    var_5 = var_4.__repr__()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList(*linked_list_5)
    assert (
        f"{type(linked_list_6).__module__}.{type(linked_list_6).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_6) == 1
    var_6 = linked_list_6.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bool_0 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.prepend(bool_0)
    assert len(linked_list_7) == 1
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 3
    var_10 = linked_list_8.__repr__()
    assert var_10 == "link:[-731,-731,-731]"
    var_11 = linked_list_8.prepend(linked_list_8)
    assert len(linked_list_8) == 4
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__iter__()
    var_14 = var_12.__len__()
    assert var_14 == 7


def test_case_1062():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(none_type_1)
    assert var_5 is False
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.prepend(bytes_0)
    assert len(linked_list_5) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 1
    var_7 = linked_list_6.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_6) == 0
    var_8 = var_7.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_9 = linked_list_8.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.__repr__()
    assert var_12 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_2)
    var_13 = linked_node_2.checkInfinite()
    assert var_13 is False
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_3.value) == 0
    var_15 = linked_node_3.checkInfinite()
    var_16 = linked_node_3.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    var_17 = linked_list_11.__iter__()
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0


def test_case_1063():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_1064():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_10 = linked_node_3.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_13, linked_list_7)
    assert len(linked_node_5.next) == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__iter__()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 1
    tuple_0 = (var_16, var_15, list_1)
    linked_node_6 = module_0.LinkedNode(tuple_0)
    none_type_0 = None
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(none_type_0)
    assert var_17 is False
    var_18 = var_5.__repr__()


def test_case_1065():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.remove(linked_list_2)
    assert var_9 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, var_13)
    linked_node_9 = module_0.LinkedNode(var_14)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__iter__()
    var_19 = linked_list_6.__len__()
    assert var_19 == 0
    linked_list_8 = module_0.LinkedList(*var_7)
    assert len(linked_list_8) == 5


def test_case_1066():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    tuple_0 = (var_1, var_0, list_0)
    linked_node_0 = module_0.LinkedNode(tuple_0)
    bool_1 = True
    linked_node_1 = module_0.LinkedNode(bool_1)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.prepend(linked_node_6)
    assert len(linked_list_4) == 1
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 1


def test_case_1067():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[[True, True, True, True]]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    int_0 = 720
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(int_0)
    assert var_5 is False
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_6 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    list_2 = []
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_0, bytes_0]
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 2
    var_13 = linked_list_10.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_10.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_15, var_15)
    linked_node_7 = module_0.LinkedNode(var_16)
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0


def test_case_1068():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_8 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_5, linked_node_4)
    assert len(linked_node_5.value) == 1
    var_14 = linked_list_4.prepend(var_13)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_15, linked_list_6)
    assert len(linked_node_7.next) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_0)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_16.__repr__()
    assert var_18 == "'link:[]'"
    linked_list_9 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_9) == 1
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_19 = linked_list_10.remove(float_0)
    assert var_19 is False
    var_20 = linked_list_10.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_node_9.checkInfinite()
    var_23 = linked_list_12.__len__()
    assert var_23 == 0
    var_24 = linked_list_11.__iter__()
    var_25 = linked_list_12.remove(linked_list_12)
    assert var_25 is False
    none_type_0 = None
    list_2 = [none_type_0]
    linked_list_13 = module_0.LinkedList(*list_2)
    assert len(linked_list_13) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    var_26 = linked_node_10.checkInfinite()
    var_27 = linked_node_2.checkInfinite()


def test_case_1069():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_8 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 3
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[-731,-731,-731]"
    var_11 = linked_list_6.prepend(linked_list_6)
    assert len(linked_list_6) == 4
    var_12 = linked_list_0.remove(var_0)
    assert var_12 is False


def test_case_1070():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.remove(linked_list_2)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_13 = linked_list_3.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_3.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_1071():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_3 = linked_list_2.remove(none_type_0)
    assert var_3 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    assert var_9 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_12 = linked_list_0.__len__()
    assert var_12 == 0


def test_case_1072():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == "0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == "link:[]"
    str_0 = "^"
    var_6 = linked_list_2.prepend(str_0)
    assert len(linked_list_2) == 1


def test_case_1073():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_0.prepend(linked_list_3)
    assert len(linked_list_0) == 1


def test_case_1074():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    float_0 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[[True, True, True, True]]"
    bool_1 = False
    set_0 = {bool_1}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_2.checkInfinite()
    assert var_7 is False
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_1, set_1]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_12 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(bytes_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_13 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_14 = linked_list_5.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_6 = module_0.LinkedNode(var_13)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(linked_list_6)
    assert var_15 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_list_9.prepend(var_19)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_9, linked_node_7)
    assert len(linked_node_8.value) == 1
    var_21 = var_17.__repr__()


def test_case_1075():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, var_3)
    linked_node_4 = module_0.LinkedNode(var_4)
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_8 = linked_list_6.__iter__()
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()


def test_case_1076():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(bytes_2)
    assert len(linked_list_2) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_4)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_8 = linked_node_5.checkInfinite()
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_5)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_node_5.checkInfinite()


def test_case_1077():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    var_7 = var_6.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_8 = linked_list_3.remove(float_0)
    assert var_8 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[False]"
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_15, linked_list_7)
    assert len(linked_node_10.next) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.remove(linked_list_8)
    assert var_16 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = var_0.__repr__()
    assert var_17 == "'link:[]'"


def test_case_1078():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[[True, True, True, True]]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[]"


def test_case_1079():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()


def test_case_1080():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_4, linked_node_2)
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == "0"
    int_0 = 720
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.remove(int_0)
    assert var_11 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    int_1 = -731
    list_0 = [int_1, int_1, int_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 3
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[-731,-731,-731]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_19 = linked_list_10.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__repr__()
    linked_list_11 = module_0.LinkedList(*var_19)
    assert (
        f"{type(linked_list_11).__module__}.{type(linked_list_11).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_7.value) == 0
    var_22 = linked_node_7.checkInfinite()
    var_23 = linked_node_7.checkInfinite()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0


def test_case_1081():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0


def test_case_1082():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == "0"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    var_9 = linked_list_4.remove(none_type_1)
    assert var_9 is False
    none_type_2 = None
    linked_node_4 = module_0.LinkedNode(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_9.prepend(var_17)
    assert len(linked_list_9) == 1
    assert len(linked_node_6.value) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_node_7.checkInfinite()
    var_21 = linked_list_11.__repr__()
    assert var_21 == "link:[]"
    var_22 = linked_list_12.prepend(var_21)
    assert len(linked_list_12) == 1
    assert len(linked_node_7.value) == 1
    var_23 = var_11.__iter__()


def test_case_1083():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == "link:[]"
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_2)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_3.__iter__()


def test_case_1084():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(bool_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.prepend(bytes_0)
    assert len(linked_list_6) == 3
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = var_12.__repr__()
    assert var_13 == "\"'link:[]'\""
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_15 = linked_node_2.checkInfinite()
    var_16 = var_14.__repr__()
    assert var_16 == "'link:[]'"
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_0.__iter__()


def test_case_1085():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    var_9 = linked_list_6.remove(linked_list_6)
    assert var_9 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_2.value) == 0
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_node_2.checkInfinite()
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_8.prepend(var_12)
    assert len(linked_list_8) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_8, linked_node_2)
    assert len(linked_node_3.value) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_15 = linked_list_12.__iter__()
    var_16 = linked_list_12.__iter__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_17 = linked_list_13.__repr__()
    assert var_17 == "link:[]"
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0


def test_case_1086():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_1)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    list_2 = []
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 0
    list_3 = [linked_list_5]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 1
    var_5 = linked_list_6.__len__()
    assert var_5 == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_3 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_6 = module_0.LinkedNode(bytes_3, bytes_3)
    set_0 = {linked_node_6, bytes_3, bytes_3, bytes_3}
    linked_node_7 = module_0.LinkedNode(set_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_14, linked_list_10)
    assert len(linked_node_9.next) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bool_0 = False
    list_4 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_12 = module_0.LinkedList(*list_4)
    assert len(linked_list_12) == 4
    complex_2 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_2)
    none_type_1 = None
    var_15 = linked_list_12.remove(none_type_1)
    assert var_15 is False
    float_2 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_5 = [bytes_4, bytes_4]
    linked_list_13 = module_0.LinkedList(*list_5)
    assert len(linked_list_13) == 2
    var_16 = linked_list_13.remove(float_2)
    assert var_16 is False
    linked_node_11 = module_0.LinkedNode(float_2, bytes_4)
    linked_list_14 = module_0.LinkedList(*list_4)
    assert len(linked_list_14) == 4


def test_case_1087():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_3, linked_node_2)
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.remove(var_3)
    assert var_8 is False


def test_case_1088():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_1.__len__()
    assert var_7 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_2.prepend(var_8)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_12 = var_9.__iter__()
    linked_node_5 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_5.value) == 1


def test_case_1089():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0


def test_case_1090():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_1, linked_node_1)
    assert len(linked_node_2.value) == 1
    var_5 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_2, bytes_0, linked_node_3]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_7 = linked_list_3.__len__()
    assert var_7 == 4
    var_8 = linked_list_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_11 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, var_12)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 4
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    none_type_0 = None
    var_14 = linked_list_7.remove(none_type_0)
    assert var_14 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__repr__()
    assert var_16 == "'link:[]'"
    var_17 = var_16.__repr__()
    assert var_17 == "\"'link:[]'\""
    var_18 = linked_node_4.checkInfinite()


def test_case_1091():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 1
    list_2 = [linked_node_2, list_1, bytes_1, linked_node_2]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_1 = module_0.LinkedList(*list_3)
    assert len(linked_list_1) == 4
    var_1 = linked_node_0.checkInfinite()


def test_case_1092():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    var_4 = linked_list_4.pop()
    assert var_4 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_5 = var_4.__iter__()
    var_6 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1


def test_case_1093():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_4)
    assert linked_node_2.value == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_5.__repr__()
    assert var_9 == "False"


def test_case_1094():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_5 = linked_list_5.prepend(bytes_1)
    assert len(linked_list_5) == 3
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_7.prepend(var_11)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    var_15 = var_12.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    var_17 = var_16.__repr__()
    assert var_17 == "0"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_10.remove(linked_list_10)
    assert var_18 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    int_1 = -731
    list_1 = [int_1, int_1, int_1]
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 3
    var_21 = linked_list_12.__repr__()
    assert var_21 == "link:[-731,-731,-731]"
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_22 = linked_list_13.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__repr__()
    linked_list_14 = module_0.LinkedList(*var_22)
    assert (
        f"{type(linked_list_14).__module__}.{type(linked_list_14).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_14) == 0
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_25 = linked_node_9.checkInfinite()
    var_26 = linked_list_5.pop()
    assert var_26 == b"z\xe1\xb7"
    assert len(linked_list_5) == 2


def test_case_1095():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 0
    var_4 = var_3.__repr__()


def test_case_1096():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    bool_1 = False
    set_0 = {bool_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_5 = linked_list_1.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_1.__iter__()
    var_7 = linked_list_1.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_1097():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__len__()
    assert var_2 == 1
    var_3 = linked_list_1.__len__()
    assert var_3 == 0


def test_case_1098():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    list_0 = [linked_list_3, linked_node_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_5 = linked_list_5.__repr__()


def test_case_1099():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.prepend(linked_node_4)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    linked_list_5 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    complex_3 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_3)
    none_type_0 = None
    var_14 = linked_list_9.remove(none_type_0)
    assert var_14 is False
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    complex_4 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_15 = linked_list_10.remove(linked_list_10)
    assert var_15 is False
    var_16 = var_15.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_list_12.__len__()
    assert var_19 == 0
    var_20 = linked_list_11.__iter__()
    var_21 = linked_list_6.remove(var_7)


def test_case_1100():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.remove(linked_node_2)
    assert var_1 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_1 = True
    set_1 = {bool_1, bool_1, bool_1, bool_1}
    linked_node_5 = module_0.LinkedNode(set_1, set_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    var_8 = linked_list_3.remove(linked_list_3)
    bool_2 = True
    linked_node_7 = module_0.LinkedNode(bool_2)
    var_9 = linked_node_7.checkInfinite()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_10 = linked_list_4.__iter__()
    var_11 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 5


def test_case_1101():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_0 = (str_0, bytes_1, list_1)
    list_2 = [tuple_0, list_1, str_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 3
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_node_1 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_5.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    float_1 = -2122.54
    linked_node_5 = module_0.LinkedNode(float_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_9.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_10.value) == 0
    var_10 = linked_node_10.checkInfinite()
    var_11 = var_9.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0


def test_case_1102():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.pop()
    assert var_1 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_0) == 1
    var_2 = var_1.__len__()


def test_case_1103():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_10 = linked_list_6.remove(float_0)
    assert var_10 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_0)
    var_11 = linked_list_6.prepend(var_4)
    assert len(linked_list_6) == 3


def test_case_1104():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, var_8)
    assert linked_node_3.next == "link:[]"
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0


def test_case_1105():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    var_10 = linked_list_4.__len__()
    assert var_10 == 1


def test_case_1106():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__len__()
    assert var_2 == 1
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_2 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_2)
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    none_type_0 = None
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(none_type_0)
    int_0 = 720
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.remove(int_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.__len__()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_10.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_11.prepend(var_14)
    assert len(linked_list_11) == 1
    assert len(linked_node_5.value) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_12.__repr__()
    assert var_17 == "link:[]"
    var_18 = var_4.__iter__()


def test_case_1107():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_1108():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 1
    tuple_0 = (var_2, var_1, list_1)
    linked_node_1 = module_0.LinkedNode(tuple_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(none_type_0)
    assert var_3 is False
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[[True, True, True, True]]"


def test_case_1109():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 3
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_11 = linked_list_7.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_7.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_13 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_5 = module_0.LinkedNode(var_13)
    var_15 = var_9.__repr__()


def test_case_1110():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    linked_node_3 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_node_5 = module_0.LinkedNode(var_11)
    assert linked_node_5.value == 0
    var_12 = var_10.__repr__()
    assert var_12 == "0"
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_14 = linked_list_9.remove(float_1)
    assert var_14 is False
    var_15 = linked_list_9.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_11.prepend(var_18)
    assert len(linked_list_11) == 1
    assert len(linked_node_8.value) == 1
    linked_node_9 = module_0.LinkedNode(var_19, linked_node_8)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_13.__len__()
    assert var_22 == 0
    var_23 = linked_list_13.__len__()
    assert var_23 == 0
    linked_node_11 = module_0.LinkedNode(var_23)
    assert linked_node_11.value == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0


def test_case_1111():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1, linked_list_2)
    assert len(linked_node_2.next) == 0


def test_case_1112():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_node_1.checkInfinite()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_6 = linked_list_5.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_7 = var_6.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == "0"
    var_10 = var_9.__len__()


def test_case_1113():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.pop()
    assert var_2 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_1) == 1
    var_3 = var_2.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.remove(linked_list_4)
    var_13 = linked_list_4.__len__()
    assert var_13 == 0
    list_1 = []
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 0
    list_2 = [linked_list_5]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    var_14 = linked_list_6.__len__()
    assert var_14 == 1
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    var_16 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 2


def test_case_1114():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = False
    set_0 = {bool_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.remove(linked_node_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_1115():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    var_4 = var_2.__repr__()
    assert var_4 == "\"'link:[]'\""
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    assert var_7 is False
    var_8 = linked_node_1.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_node_2.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_14)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__repr__()
    linked_node_8 = module_0.LinkedNode(var_17)
    var_19 = var_7.__repr__()
    var_20 = var_19.__len__()


def test_case_1116():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    linked_node_2 = module_0.LinkedNode(var_0, linked_node_1)
    assert linked_node_2.value == "link:[]"


def test_case_1117():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_2, bytes_1, bytes_1, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_5.next) == 0
    var_3 = linked_list_3.__iter__()
    int_0 = 720
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(int_0)
    assert var_4 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    float_0 = -2122.54
    linked_node_7 = module_0.LinkedNode(float_0)
    linked_node_8 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_8.value).__module__}.{type(linked_node_8.value).__qualname__}"
        == "builtins.generator"
    )


def test_case_1118():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1


def test_case_1119():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    list_2 = []
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 0
    list_3 = [linked_list_4]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 1
    var_7 = linked_list_5.__len__()
    assert var_7 == 1
    bool_1 = True
    linked_node_1 = module_0.LinkedNode(bool_1)
    var_8 = linked_node_1.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_2.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.remove(linked_list_9)
    assert var_12 is False
    var_13 = var_12.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_11.prepend(var_16)
    assert len(linked_list_11) == 1
    assert len(linked_node_6.value) == 1
    var_18 = linked_list_9.__iter__()


def test_case_1120():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[-731,-731,-731]"
    linked_node_1 = module_0.LinkedNode(linked_list_2, linked_list_1)
    assert len(linked_node_1.value) == 3
    assert len(linked_node_1.next) == 0


def test_case_1121():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    float_0 = -2122.54
    linked_node_2 = module_0.LinkedNode(float_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1)


def test_case_1122():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__len__()
    assert var_8 == 56


def test_case_1123():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.prepend(bytes_0)
    assert len(linked_list_1) == 3
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0


def test_case_1124():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    tuple_0 = (var_1, var_0, list_0)
    linked_node_1 = module_0.LinkedNode(tuple_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = var_5.__repr__()
    assert var_6 == "\"'link:[]'\""
    var_7 = var_5.__repr__()
    assert var_7 == "\"'link:[]'\""
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    assert var_8 is False
    linked_node_3 = module_0.LinkedNode(var_8, linked_list_4)
    assert len(linked_node_3.next) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_9 = var_2.__iter__()


def test_case_1125():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_3, linked_node_1)
    assert len(linked_node_2.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.remove(linked_node_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_9 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_list_7.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_16, linked_node_4)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.remove(linked_list_9)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = linked_list_3.remove(dict_0)
    assert var_21 is False


def test_case_1126():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(var_3)
    float_0 = -2122.54
    linked_node_2 = module_0.LinkedNode(float_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_node_9 = module_0.LinkedNode(var_14)
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_node_11 = module_0.LinkedNode(bool_0)
    none_type_1 = None
    linked_node_12 = module_0.LinkedNode(none_type_1, none_type_1)
    var_16 = var_15.__iter__()


def test_case_1127():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0


def test_case_1128():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_4.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = linked_list_1.prepend(linked_node_0)
    assert len(linked_list_1) == 1


def test_case_1129():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    str_1 = "Vyx0]D=6H1fKTpZ"
    int_1 = -3330
    tuple_2 = (int_1, int_1)
    bytes_1 = b"z\xe1\xb7"
    tuple_3 = (tuple_2, int_1, bytes_1)
    list_1 = [str_1, tuple_3]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 3
    var_1 = var_0.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__iter__()
    bool_0 = True
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    list_3 = [list_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    tuple_4 = (var_8, var_7, list_2)
    linked_node_5 = module_0.LinkedNode(tuple_4)
    var_9 = linked_node_1.checkInfinite()


def test_case_1130():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.prepend(bytes_1)
    assert len(linked_list_3) == 3
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 1
    list_2 = [linked_node_3, list_1, bytes_2, linked_node_3]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 4
    bool_0 = False
    set_0 = {bool_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    var_7 = linked_list_4.__iter__()


def test_case_1131():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_6 = linked_list_1.__iter__()
    var_7 = var_3.__iter__()


def test_case_1132():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = var_5.__repr__()
    assert var_6 == "\"'link:[]'\""
    var_7 = var_5.__repr__()
    assert var_7 == "\"'link:[]'\""
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_9.__len__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    linked_node_7 = module_0.LinkedNode(int_0)


def test_case_1133():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_5.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_9 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_10, var_10)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_9 = module_0.LinkedNode(set_0, set_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_12 = linked_list_3.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_10.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_14 = linked_list_4.remove(var_12)
    assert var_14 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_14.__repr__()


def test_case_1134():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = linked_list_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_node_2.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_11, linked_node_4)
    bool_1 = True
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    linked_node_6 = module_0.LinkedNode(set_0, set_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_12)
    float_0 = -2122.54
    linked_node_9 = module_0.LinkedNode(float_0)
    linked_node_10 = module_0.LinkedNode(linked_node_8)
    float_1 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_1)
    assert var_13 is False
    linked_node_11 = module_0.LinkedNode(float_1, bytes_0)
    bool_2 = True
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    list_2 = [list_1]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 1
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.__repr__()
    assert var_14 == "link:[]"
    var_15 = var_14.__repr__()
    assert var_15 == "'link:[]'"
    var_16 = var_15.__repr__()
    assert var_16 == "\"'link:[]'\""
    var_17 = var_3.__repr__()


def test_case_1135():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_2.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_5 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_7 = linked_list_6.remove(dict_0)
    assert var_7 is True
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_8.__len__()
    assert var_10 == 0
    var_11 = linked_list_7.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    int_0 = 397
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.prepend(int_0)
    assert len(linked_list_10) == 1


def test_case_1136():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_3, bytes_2, linked_node_7]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_12 = linked_list_4.__len__()
    assert var_12 == 4
    var_13 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_17, var_17)
    linked_node_11 = module_0.LinkedNode(var_18)
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_19 = linked_list_7.remove(float_0)
    assert var_19 is False
    var_20 = linked_list_7.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_2 = None
    linked_node_12 = module_0.LinkedNode(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_21 = linked_node_12.checkInfinite()
    var_22 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_23 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0


def test_case_1137():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_6, linked_node_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_0.__len__()
    assert var_9 == 0


def test_case_1138():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_2 = module_0.LinkedNode(var_4)
    assert linked_node_2.value == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = var_9.__repr__()
    assert var_10 == "\"'link:[]'\""
    var_11 = var_9.__repr__()
    assert var_11 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_12 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_13 = linked_node_0.checkInfinite()


def test_case_1139():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_list_2.remove(linked_node_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__repr__()
    assert var_8 == "'link:[]'"
    var_9 = var_8.__repr__()
    assert var_9 == "\"'link:[]'\""
    var_10 = var_8.__repr__()
    assert var_10 == "\"'link:[]'\""
    var_11 = var_4.__repr__()


def test_case_1140():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_1 = linked_list_2.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_2.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(linked_list_3)
    assert var_3 is False
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, var_6)
    assert linked_node_2.next == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_2 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_7 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    float_1 = -2122.54
    linked_node_3 = module_0.LinkedNode(float_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.remove(tuple_1)


def test_case_1141():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_1 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_1, bytes_1, bytes_1, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.remove(none_type_0)
    assert var_0 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_4.__len__()
    assert var_3 == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_4.remove(var_2)
    var_6 = linked_list_4.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_1.__iter__()


def test_case_1142():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_2 = var_1.__iter__()


def test_case_1143():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_1)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_11 = linked_list_6.remove(bytes_2)
    assert var_11 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_4.__repr__()
    assert var_13 == "link:[]"


def test_case_1144():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[[True, True, True, True]]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_2, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_5 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_2.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_10.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(var_2)


def test_case_1145():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.pop()
    assert var_2 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_1) == 1
    var_3 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(var_5)
    assert var_7 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_9)
    assert len(linked_list_7) == 96
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_3 = [bytes_3]
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 1
    var_10 = linked_list_8.pop()
    assert len(linked_list_8) == 0
    var_11 = var_10.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, linked_list_11)
    assert len(linked_node_7.next) == 0
    var_13 = linked_list_11.__len__()
    assert var_13 == 0
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    linked_node_10 = module_0.LinkedNode(bytes_3)


def test_case_1146():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_5 = linked_list_1.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_6 = var_5.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__iter__()
    var_15 = linked_list_8.remove(linked_list_8)
    assert var_15 is False
    var_16 = var_3.__repr__()


def test_case_1147():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_5, linked_node_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_node_3 = module_0.LinkedNode(var_9)
    assert linked_node_3.value == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_11.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__iter__()
    var_19 = linked_list_11.remove(linked_list_11)
    assert var_19 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_node_10 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_12 = module_0.LinkedNode(complex_3)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_12.prepend(linked_node_12)
    assert len(linked_list_12) == 1
    none_type_0 = None
    linked_node_13 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_14 = module_0.LinkedNode(bytes_2)
    var_21 = linked_node_14.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    var_24 = linked_list_8.__repr__()
    assert var_24 == "link:[]"


def test_case_1148():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    var_6 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_node_4)


def test_case_1149():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_3, linked_node_0)
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    linked_node_4 = module_0.LinkedNode(linked_node_3)


def test_case_1150():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    var_8 = var_6.__repr__()
    assert var_8 == "0"
    var_9 = linked_list_0.__len__()
    assert var_9 == 0


def test_case_1151():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    list_1 = [linked_list_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_3 = linked_list_3.__len__()
    assert var_3 == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_4.prepend(var_4)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_0)
    assert var_8 is False
    linked_node_6 = module_0.LinkedNode(float_0, bytes_1)
    none_type_0 = None
    list_3 = [none_type_0]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList(*linked_list_6)
    assert (
        f"{type(linked_list_7).__module__}.{type(linked_list_7).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_7) == 1
    var_9 = linked_list_7.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_7.__repr__()


def test_case_1152():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(float_0)
    assert var_2 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(linked_node_3, linked_node_4)
    linked_node_6 = module_0.LinkedNode(complex_0, var_1)
    assert linked_node_6.next == "0"


def test_case_1153():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    linked_list_2 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_2) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    none_type_0 = None
    var_5 = linked_list_3.remove(none_type_0)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_node_5.checkInfinite()
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_4)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = linked_list_11.prepend(bytes_3)
    assert len(linked_list_11) == 1
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_4, bytes_4]
    linked_list_12 = module_0.LinkedList(*list_2)
    assert len(linked_list_12) == 2
    var_20 = linked_list_12.remove(float_0)
    assert var_20 is False
    var_21 = linked_list_12.pop()
    assert var_21 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_12) == 1
    var_22 = var_21.__len__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_1154():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"


def test_case_1155():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_10 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.remove(linked_list_9)
    assert var_11 is False
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    list_0 = []
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 0
    list_1 = [linked_list_10]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 1
    var_13 = linked_list_11.__len__()
    assert var_13 == 1
    var_14 = linked_list_10.__len__()
    assert var_14 == 0
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_12 = module_0.LinkedList(*list_2)
    assert len(linked_list_12) == 3
    var_15 = linked_list_12.__repr__()
    assert var_15 == "link:[-731,-731,-731]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_16 = linked_node_4.checkInfinite()
    var_17 = var_16.__repr__()
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_18 = linked_node_5.checkInfinite()
    var_19 = linked_list_13.__iter__()
    linked_node_6 = module_0.LinkedNode(var_17, var_4)


def test_case_1156():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_4, linked_node_4)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_6.checkInfinite()


def test_case_1157():
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.prepend(bytes_1)
    assert len(linked_list_3) == 3
    var_4 = var_3.__repr__()
    var_5 = linked_list_0.__repr__()
    assert var_5 == "link:[]"


def test_case_1158():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_1 = linked_list_2.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_2.pop()
    assert var_2 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_2) == 1
    var_3 = var_2.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__iter__()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 1
    tuple_0 = (var_5, var_4, list_1)
    linked_node_2 = module_0.LinkedNode(tuple_0)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.remove(float_1)
    assert var_6 is False
    var_7 = linked_list_5.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_8 = var_7.__iter__()
    int_0 = -731
    list_4 = [int_0, int_0, int_0]
    linked_list_6 = module_0.LinkedList(*list_4)
    assert len(linked_list_6) == 3
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[-731,-731,-731]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    linked_list_8 = module_0.LinkedList(*var_10)
    assert (
        f"{type(linked_list_8).__module__}.{type(linked_list_8).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_8) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.__repr__()
    assert var_13 == "link:[]"
    linked_node_5 = module_0.LinkedNode(var_10)


def test_case_1159():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_5 = module_0.LinkedNode(set_0, set_0)
    list_0 = [bool_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 1
    var_5 = linked_list_5.remove(set_0)
    assert var_5 is False
    var_6 = var_0.__repr__()


def test_case_1160():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_0 = module_0.LinkedNode(var_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_1 = module_0.LinkedNode(set_0, set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.remove(var_3)
    assert var_6 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_7 = linked_list_3.prepend(bytes_1)
    assert len(linked_list_3) == 3
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.pop()
    assert var_10 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_11 = var_10.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_7.remove(linked_node_6)
    linked_node_7 = module_0.LinkedNode(linked_list_7, var_10)
    assert len(linked_node_7.value) == 0


def test_case_1161():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__iter__()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    tuple_0 = (var_4, var_3, list_0)
    linked_node_0 = module_0.LinkedNode(tuple_0)
    var_5 = linked_list_2.__iter__()


def test_case_1162():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_8.__iter__()
    var_13 = var_12.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    bool_0 = False
    linked_node_9 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    var_15 = linked_list_0.prepend(var_12)
    assert len(linked_list_0) == 1


def test_case_1163():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.pop()
    assert var_1 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_0) == 1
    var_2 = var_1.__len__()
    var_3 = linked_list_0.__len__()
    assert var_3 == 1


def test_case_1164():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_4.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_6 = var_5.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    var_9 = linked_list_0.__iter__()


def test_case_1165():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    tuple_0 = (var_1, var_0, list_0)
    linked_node_0 = module_0.LinkedNode(tuple_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_node_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_5.prepend(var_6)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_5, linked_node_4)
    assert len(linked_node_5.value) == 1
    var_8 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9, linked_list_6)
    assert len(linked_node_7.next) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = var_11.__repr__()
    assert var_12 == "\"'link:[]'\""
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_13 = linked_node_11.checkInfinite()
    var_14 = linked_node_11.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    bool_1 = True
    linked_node_12 = module_0.LinkedNode(bool_1)
    var_16 = linked_node_12.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_13.value) == 0
    var_17 = linked_node_13.checkInfinite()
    var_18 = linked_node_13.checkInfinite()
    var_19 = linked_list_10.prepend(var_17)
    assert len(linked_list_10) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    none_type_1 = None
    linked_node_14 = module_0.LinkedNode(none_type_1)
    var_20 = linked_list_12.__repr__()
    assert var_20 == "link:[]"
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_21 = linked_list_13.__repr__()
    assert var_21 == "link:[]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_15 = module_0.LinkedNode(bytes_1)
    bool_2 = False
    linked_node_16 = module_0.LinkedNode(bool_2)
    none_type_2 = None
    linked_node_17 = module_0.LinkedNode(none_type_2, none_type_2)
    list_2 = []
    linked_list_14 = module_0.LinkedList(*list_2)
    assert len(linked_list_14) == 0
    var_22 = linked_list_14.__len__()
    assert var_22 == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    linked_node_18 = module_0.LinkedNode(linked_list_16)
    assert len(linked_node_18.value) == 0
    var_23 = linked_node_18.checkInfinite()
    var_24 = linked_node_18.checkInfinite()
    var_25 = linked_list_15.__repr__()
    assert var_25 == "link:[]"
    linked_list_17 = module_0.LinkedList()
    assert len(linked_list_17) == 0
    var_26 = linked_list_11.remove(var_20)
    assert var_26 is False


def test_case_1166():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_4.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.remove(linked_list_5)
    assert var_5 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_node_2, linked_list_7)
    assert len(linked_node_3.next) == 0
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 3
    var_6 = linked_list_8.__repr__()
    assert var_6 == "link:[-731,-731,-731]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_7 = linked_list_9.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    linked_list_10 = module_0.LinkedList(*var_7)
    assert (
        f"{type(linked_list_10).__module__}.{type(linked_list_10).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_12.__len__()
    assert var_12 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_13 = linked_list_13.__len__()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == "0"
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_15 = var_4.__len__()
    assert var_15 == 96


def test_case_1167():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == "0"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    linked_node_6 = module_0.LinkedNode(var_5)


def test_case_1168():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    list_2 = [linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 1


def test_case_1169():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_0.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_10 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_5, bytes_0, linked_node_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    var_12 = linked_list_6.__repr__()
    var_13 = var_3.__iter__()


def test_case_1170():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.remove(linked_node_0)
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    var_10 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[[True, True, True, True]]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 2
    var_14 = linked_list_6.remove(float_0)
    assert var_14 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()
    bool_1 = True
    list_4 = [bool_1, bool_1, bool_1, bool_1]
    list_5 = [list_4]
    linked_list_8 = module_0.LinkedList(*list_5)
    assert len(linked_list_8) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.__iter__()
    linked_node_9 = module_0.LinkedNode(var_13)
    assert linked_node_9.value == "link:[[True, True, True, True]]"


def test_case_1171():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 4
    var_1 = linked_list_2.__iter__()
    none_type_1 = None
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(none_type_1)
    assert var_2 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_4 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_4, bytes_1, bytes_1, bytes_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.__iter__()
    var_8 = var_1.__iter__()


def test_case_1172():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_2 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_4 = linked_list_6.remove(bytes_1)
    assert var_4 is False
    var_5 = linked_list_1.remove(linked_node_2)


def test_case_1173():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.remove(linked_node_0)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList(*linked_list_6)
    assert (
        f"{type(linked_list_7).__module__}.{type(linked_list_7).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_7) == 1
    var_10 = linked_list_7.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_1.value) == 0
    var_16 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_9, bytes_0, linked_node_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 4
    var_17 = linked_list_10.__len__()
    assert var_17 == 4
    linked_node_2 = module_0.LinkedNode(bytes_0, linked_node_1)
    list_2 = []
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 0
    list_3 = [linked_list_11]
    linked_list_12 = module_0.LinkedList(*list_3)
    assert len(linked_list_12) == 1
    var_18 = linked_list_12.__len__()
    assert var_18 == 1
    bool_0 = False
    list_4 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_13 = module_0.LinkedList(*list_4)
    assert len(linked_list_13) == 4
    linked_node_3 = module_0.LinkedNode(var_7, linked_list_3)
    assert len(linked_node_3.next) == 0


def test_case_1174():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_1)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.remove(var_5)
    assert var_8 is False
    linked_node_2 = module_0.LinkedNode(float_0)


def test_case_1175():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.pop()
    assert var_1 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_0) == 1
    var_2 = var_1.__len__()
    float_1 = -2122.54
    linked_node_0 = module_0.LinkedNode(float_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    var_11 = linked_list_4.__iter__()
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"


def test_case_1176():
    bool_0 = False
    set_0 = {bool_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.remove(var_3)
    assert var_6 is False
    var_7 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(linked_node_0)


def test_case_1177():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, var_4)
    linked_node_6 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == "0"
    var_8 = var_7.__iter__()
    var_9 = linked_list_2.remove(var_4)
    assert var_9 is False


def test_case_1178():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_14)
    float_0 = -2122.54
    linked_node_7 = module_0.LinkedNode(float_0)
    linked_node_8 = module_0.LinkedNode(linked_node_6)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__iter__()
    linked_node_10 = module_0.LinkedNode(var_18)
    assert (
        f"{type(linked_node_10.value).__module__}.{type(linked_node_10.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_19 = linked_list_8.remove(linked_list_8)
    var_20 = linked_list_8.__len__()
    assert var_20 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_list_9.__repr__()
    assert var_22 == "link:[]"
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0, var_22)
    assert linked_node_12.next == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_13.value) == 0
    var_23 = linked_node_13.checkInfinite()
    var_24 = linked_node_13.checkInfinite()
    var_25 = linked_list_10.__repr__()
    assert var_25 == "link:[]"
    var_26 = linked_list_11.prepend(var_25)
    assert len(linked_list_11) == 1
    assert len(linked_node_13.value) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_27 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_28 = var_27.__repr__()
    linked_node_14 = module_0.LinkedNode(var_19)


def test_case_1179():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(linked_list_4)
    assert var_9 is False
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.remove(linked_list_5)
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__iter__()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__repr__()
    assert var_16 == "'link:[]'"
    var_17 = var_16.__repr__()
    assert var_17 == "\"'link:[]'\""
    var_18 = var_16.__repr__()
    assert var_18 == "\"'link:[]'\""
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_19 = linked_node_5.checkInfinite()
    var_20 = linked_node_5.checkInfinite()
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    linked_node_6 = module_0.LinkedNode(var_22)
    assert linked_node_6.value == 0
    linked_node_7 = module_0.LinkedNode(var_13, var_7)
    assert (
        f"{type(linked_node_7.value).__module__}.{type(linked_node_7.value).__qualname__}"
        == "builtins.generator"
    )


def test_case_1180():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)


def test_case_1181():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1, var_4)
    assert linked_node_3.next == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_3, bytes_0, linked_node_4]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    var_7 = linked_list_4.__repr__()
    var_8 = linked_list_4.pop()
    assert len(linked_list_4) == 3
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_8.value).__module__}.{type(var_8.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_8.value) == 0
    assert var_8.next is None
    var_9 = var_3.__repr__()


def test_case_1182():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_1.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(linked_list_2)
    assert var_6 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_3, linked_list_4)
    assert len(linked_node_4.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0


def test_case_1183():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.prepend(var_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_5.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_4.__iter__()


def test_case_1184():
    float_0 = -1821.1908
    linked_node_0 = module_0.LinkedNode(float_0, float_0)


def test_case_1185():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_1 = -3330
    tuple_0 = (int_1, int_1)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_1, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    var_8 = var_7.__repr__()
    bool_0 = False
    linked_node_3 = module_0.LinkedNode(bool_0)
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    str_1 = "Vyx0]D=6H1fKTpZ"
    int_2 = -3330
    tuple_2 = (int_2, int_2)
    bytes_1 = b"z\xe1\xb7"
    tuple_3 = (tuple_2, int_2, bytes_1)
    list_1 = [str_1, tuple_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.prepend(bytes_1)
    assert len(linked_list_5) == 3
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_14 = var_11.__repr__()
    var_15 = linked_list_2.__len__()
    assert var_15 == 0


def test_case_1186():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_4 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_4) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_11, var_11)
    linked_node_5 = module_0.LinkedNode(var_12)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    var_13 = linked_list_6.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_2 = [str_0, tuple_1]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_14 = linked_list_7.prepend(bytes_2)
    assert len(linked_list_7) == 3
    var_15 = var_14.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__iter__()
    bool_1 = True
    list_3 = [bool_1, bool_1, bool_1, bool_1]
    list_4 = [list_3]
    linked_list_9 = module_0.LinkedList(*list_4)
    assert len(linked_list_9) == 1
    tuple_2 = (var_17, var_16, list_3)
    linked_node_6 = module_0.LinkedNode(tuple_2)
    var_18 = linked_list_7.__repr__()
    assert (
        var_18
        == "link:[b'z\\xe1\\xb7',((-3330, -3330), -3330, b'z\\xe1\\xb7'),Vyx0]D=6H1fKTpZ]"
    )
    var_19 = var_18.__len__()
    assert var_19 == 73


def test_case_1187():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_3.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_6 = var_2.__iter__()


def test_case_1188():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_4)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_0.__len__()
    assert var_3 == 1


def test_case_1189():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_5 = linked_list_2.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__iter__()
    int_0 = -1404
    var_7 = linked_list_3.prepend(int_0)
    assert len(linked_list_3) == 1


def test_case_1190():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(var_3)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_4, linked_node_1)
    assert len(linked_node_2.value) == 1
    var_10 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    list_0 = []
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_15 = linked_list_6.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_6.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_18 = linked_node_4.checkInfinite()
    var_19 = var_17.__repr__()
    assert var_19 == "'link:[]'"
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_21 = linked_list_8.remove(linked_list_8)
    var_22 = var_21.__repr__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_3 = []
    tuple_0 = (str_0, bytes_3, list_3)
    list_4 = [tuple_0, list_3, str_0]
    linked_list_9 = module_0.LinkedList(*list_4)
    assert len(linked_list_9) == 3
    var_23 = linked_list_9.__repr__()
    assert (
        var_23
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_24 = linked_list_6.__iter__()


def test_case_1191():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_2.__repr__()


def test_case_1192():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    list_0 = []
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 0
    list_1 = [linked_list_4]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_6 = linked_list_5.__len__()
    assert var_6 == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(linked_list_7)
    assert var_9 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_11.__repr__()
    assert var_15 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_2]
    linked_list_13 = module_0.LinkedList(*list_2)
    assert len(linked_list_13) == 1
    var_16 = linked_list_13.pop()
    assert var_16 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_13) == 0
    var_17 = var_16.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_9.value) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_3, bytes_3]
    linked_list_15 = module_0.LinkedList(*list_3)
    assert len(linked_list_15) == 2
    var_18 = linked_list_15.remove(float_0)
    assert var_18 is False
    var_19 = linked_list_15.__iter__()
    var_20 = linked_list_15.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )


def test_case_1193():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_8 = linked_list_2.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_2.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.remove(list_0)


def test_case_1194():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_1, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_node_1 = module_0.LinkedNode(bytes_1, linked_node_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4)
    float_0 = -2122.54
    linked_node_5 = module_0.LinkedNode(float_0)
    linked_node_6 = module_0.LinkedNode(linked_node_4)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_7.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_list_5.prepend(var_5)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_9 = linked_node_9.checkInfinite()
    var_10 = linked_node_9.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    linked_node_10 = module_0.LinkedNode(var_12)
    assert (
        f"{type(linked_node_10.value).__module__}.{type(linked_node_10.value).__qualname__}"
        == "builtins.generator"
    )
    bool_0 = False
    linked_node_11 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_13.value) == 0
    var_13 = linked_node_13.checkInfinite()
    var_14 = linked_node_13.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_5.__iter__()


def test_case_1195():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.prepend(bytes_0)
    assert len(linked_list_3) == 3
    float_0 = -1821.1908
    linked_node_1 = module_0.LinkedNode(float_0, float_0)
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0


def test_case_1196():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == "0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__len__()
    assert var_9 == 7
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_13 = linked_list_8.__iter__()
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0


def test_case_1197():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(bool_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = var_11.__repr__()
    assert var_12 == "\"'link:[]'\""
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_5.__iter__()
    bool_1 = False
    linked_node_6 = module_0.LinkedNode(bool_1)
    tuple_0 = ()
    linked_node_7 = module_0.LinkedNode(tuple_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_2]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 1
    var_19 = linked_list_8.pop()
    assert var_19 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_8) == 0
    var_20 = var_19.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    linked_node_10 = module_0.LinkedNode(linked_node_8)


def test_case_1198():
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    linked_node_4 = module_0.LinkedNode(bytes_1, list_2)


def test_case_1199():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_4)
    assert len(linked_node_4.next) == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_7.__iter__()
    complex_4 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_4)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_node_7.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.remove(var_11)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = var_10.__repr__()


def test_case_1200():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.remove(linked_list_2)
    assert var_7 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_3, linked_list_4)
    assert len(linked_node_4.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_6, linked_list_6, bytes_1, linked_node_6]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 4
    var_9 = linked_list_7.__len__()
    assert var_9 == 4
    linked_node_7 = module_0.LinkedNode(bytes_1, linked_node_6)
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_8.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_8.prepend(var_11)
    assert len(linked_list_8) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_10.checkInfinite()
    var_15 = var_14.__repr__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_16 = linked_list_10.remove(float_0)
    assert var_16 is False
    var_17 = linked_list_10.__iter__()
    var_18 = var_3.__repr__()
    assert var_18 == "'link:[]'"


def test_case_1201():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_2 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1


def test_case_1202():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_3)
    assert len(linked_node_2.next) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    var_5 = var_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    int_1 = -731
    list_1 = [int_1, int_1, int_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 3
    var_13 = linked_list_10.__repr__()
    assert var_13 == "link:[-731,-731,-731]"
    var_14 = linked_node_3.checkInfinite()


def test_case_1203():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    list_1 = []
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 0
    list_2 = [linked_list_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.__len__()
    assert var_2 == 1
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_0.value) == 0
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_12)
    bool_1 = True
    linked_node_5 = module_0.LinkedNode(bool_1)
    var_13 = linked_node_5.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_10.prepend(var_14)
    assert len(linked_list_10) == 1
    var_17 = var_0.__repr__()


def test_case_1204():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = linked_list_6.prepend(var_3)
    assert len(linked_list_6) == 1


def test_case_1205():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    var_6 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0


def test_case_1206():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1, linked_list_2)
    assert len(linked_node_2.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_0, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_2 = linked_list_4.__len__()
    assert var_2 == 4
    var_3 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_4 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_5 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_6 = linked_list_7.__repr__()
    assert var_6 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_7 = linked_list_8.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__len__()
    assert var_8 == 7
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_10.__len__()
    assert var_11 == 0
    var_12 = linked_list_10.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    var_13 = var_11.__repr__()
    assert var_13 == "0"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    bool_0 = False
    linked_node_8 = module_0.LinkedNode(bool_0)
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_13 = module_0.LinkedList(*list_1)
    assert len(linked_list_13) == 1
    linked_node_9 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_9.value) == 1
    list_2 = [linked_node_9, list_1, bytes_1, linked_node_9]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_14 = module_0.LinkedList(*list_3)
    assert len(linked_list_14) == 4
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_10.checkInfinite()
    var_16 = var_15.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    var_17 = linked_list_6.prepend(linked_list_9)
    assert len(linked_list_6) == 1
    var_18 = var_17.__repr__()


def test_case_1207():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_node_2 = module_0.LinkedNode(var_6)
    assert linked_node_2.value == 0
    var_7 = var_5.__repr__()
    assert var_7 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_13.__len__()
    assert var_14 == 7
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__repr__()
    assert var_17 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = linked_list_11.__repr__()
    assert var_19 == "link:[]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_12.__len__()
    assert var_20 == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_node_7.checkInfinite()
    var_23 = linked_list_13.__repr__()
    assert var_23 == "link:[]"
    var_24 = linked_list_14.prepend(var_23)
    assert len(linked_list_14) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(var_24, linked_node_7)
    var_25 = linked_node_2.checkInfinite()


def test_case_1208():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_3 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 1
    var_1 = linked_list_3.pop()
    assert var_1 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_2 = var_1.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_6.__len__()
    assert var_5 == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_4)
    assert len(linked_list_7) == 2
    var_6 = linked_list_7.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_7.pop()
    assert len(linked_list_7) == 1
    var_8 = var_7.__len__()
    var_9 = linked_list_2.__repr__()


def test_case_1209():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__len__()
    assert var_2 == 1
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    float_0 = -2122.54
    linked_node_2 = module_0.LinkedNode(float_0)
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"


def test_case_1210():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.prepend(bytes_1)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_10 = linked_list_8.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(var_4)


def test_case_1211():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(bool_0)
    assert var_10 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_11 = linked_list_9.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_9.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(bytes_0, var_2)
    assert linked_node_5.next == 0


def test_case_1212():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    bool_0 = False
    set_0 = {bool_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"


def test_case_1213():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_1)
    assert len(linked_node_3.next) == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_4 = linked_list_1.__len__()
    assert var_4 == 0


def test_case_1214():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    var_2 = var_1.__iter__()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[-731,-731,-731]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    linked_node_7 = module_0.LinkedNode(var_7)


def test_case_1215():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.remove(linked_list_5)
    var_6 = var_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 3
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[-731,-731,-731]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    linked_list_9 = module_0.LinkedList(*var_11)
    assert (
        f"{type(linked_list_9).__module__}.{type(linked_list_9).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_0 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_14 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_15 = linked_list_11.__repr__()
    assert var_15 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_16 = linked_node_5.checkInfinite()
    var_17 = var_15.__repr__()
    assert var_17 == "'link:[]'"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_12 = module_0.LinkedList(*list_2)
    assert len(linked_list_12) == 2
    var_18 = linked_list_12.remove(float_0)
    assert var_18 is False
    var_19 = linked_list_12.__repr__()
    assert (
        var_19
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_20 = var_19.__iter__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0


def test_case_1216():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    var_2 = var_0.__repr__()


def test_case_1217():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_1.next) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    bool_1 = False
    linked_node_3 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, none_type_0)
    list_2 = []
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_3 = [bytes_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 1
    list_4 = [linked_node_5, list_3, bytes_2, linked_node_5]
    list_5 = [list_4, list_3, list_3, list_3]
    linked_list_5 = module_0.LinkedList(*list_5)
    assert len(linked_list_5) == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_7.__len__()
    assert var_6 == 0
    var_7 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_8 = linked_list_10.__len__()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == "0"
    var_10 = var_9.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0


def test_case_1218():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    tuple_0 = ()
    linked_node_1 = module_0.LinkedNode(tuple_0)
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_6 = linked_list_2.__iter__()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_9 = var_8.__iter__()
    bytes_1 = b"\x0f\x90\xbc\x034\xb4\xadKI \xdc\x7f"
    var_10 = linked_list_4.remove(bytes_1)
    assert var_10 is False


def test_case_1219():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_1.__iter__()


def test_case_1220():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.remove(bool_0)
    assert var_8 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_9.__len__()
    assert var_11 == 0
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_13 = linked_list_9.remove(var_10)
    var_14 = linked_list_9.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_15 = linked_list_10.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_10.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_17 = var_16.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_18 = linked_list_12.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_12.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_20 = linked_list_13.__repr__()
    assert var_20 == "link:[]"
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_4.__iter__()


def test_case_1221():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_9 = linked_list_4.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_12 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_14 = linked_list_8.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_8.pop()
    assert var_15 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_8) == 1
    var_16 = var_15.__len__()
    var_17 = linked_list_8.__len__()
    assert var_17 == 1
    var_18 = linked_list_6.__iter__()


def test_case_1222():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1223():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert len(linked_list_0) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1224():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1225():
    none_type_0 = None
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    int_0 = 3392
    set_0 = {int_0}
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__iter__()
    var_1.remove(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    set_0 = {linked_list_0, linked_list_0, linked_list_0}
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_0.remove(set_0)


def test_case_1228():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1229():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.pop()
    assert len(linked_list_0) == 3
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1230():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bool_0 = True
    module_0.LinkedList(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1234():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_3.__iter__()


def test_case_1235():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1236():
    float_0 = -4800.2
    str_0 = ">2"
    bytes_0 = b"|\xad\xc1\xa6"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(str_0)
    assert var_0 is False
    var_0.prepend(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1238():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__len__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12.prepend(linked_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_5.prepend(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_10.remove(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_6.checkInfinite()
    var_7.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_6.__iter__()


def test_case_1246():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_6.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_4.__len__()
    assert var_15 == 0
    var_13.prepend(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_7.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_13.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1249():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_node_0 = module_0.LinkedNode(var_0)
    assert (
        f"{type(linked_node_0.value).__module__}.{type(linked_node_0.value).__qualname__}"
        == "builtins.generator"
    )
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_2.checkInfinite()


def test_case_1250():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1251():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_1.__iter__()
    var_2.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1253():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_node_0)
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_12.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1256():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1257():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_4.remove(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1260():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1261():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    module_0.LinkedList(*var_6)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    tuple_0 = ()
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(none_type_0)
    assert len(linked_list_0) == 1
    var_0.prepend(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1264():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1265():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    var_11.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1266():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_4.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1267():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.prepend(var_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_7.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_13.__len__()
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1269():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_2.prepend(var_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_1.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = '.e!\\"O_AB9Rs4%'
    list_0 = [str_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == '.e!\\"O_AB9Rs4%'
    assert len(linked_list_0) == 0
    var_1 = var_0.__len__()
    var_1.remove(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1273():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1275():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_13 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_list_7.prepend(var_18)
    assert len(linked_list_7) == 1
    assert len(linked_node_11.value) == 1
    var_17.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1276():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    set_0 = {complex_0, linked_node_0, complex_0, complex_0}
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.prepend(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_2.__iter__()


def test_case_1278():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


def test_case_1279():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


def test_case_1280():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_6 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_6.prepend(var_12)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1
    var_16 = linked_list_6.__repr__()
    assert var_16 == "link:[False]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_4.prepend(var_14)
    assert len(linked_list_4) == 1
    assert len(linked_node_9.value) == 1
    var_18 = var_15.__repr__()
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1282():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_1.prepend(linked_node_0)


def test_case_1283():
    tuple_0 = ()
    linked_list_0 = module_0.LinkedList(*tuple_0)
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1284():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_6 = var_3.__repr__()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_6.pop()


def test_case_1286():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_8.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_14.__len__()
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_list_7.prepend(var_17)
    assert len(linked_list_7) == 1
    assert len(linked_node_11.value) == 1
    var_21 = var_18.__repr__()
    var_20.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    var_1.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_3.prepend(var_13)
    assert len(linked_list_3) == 1
    assert len(linked_node_9.value) == 1
    var_17 = var_14.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_11.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = linked_list_5.__len__()
    assert var_21 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    linked_node_13 = module_0.LinkedNode(bool_0)
    var_22 = linked_node_13.checkInfinite()
    var_14.pop()


def test_case_1290():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1
    var_14 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_list_8.prepend(var_17)
    assert len(linked_list_8) == 1
    assert len(linked_node_11.value) == 1
    var_21 = linked_list_8.__repr__()
    assert var_21 == "link:[False]"
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0)
    with pytest.raises(Exception):
        linked_list_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_8 = linked_list_3.remove(float_0)
    assert var_8 is False
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    assert len(linked_node_10.value) == 1
    var_19 = var_16.__repr__()
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1292():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_15 = linked_list_4.__repr__()
    assert var_15 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_16 = linked_list_6.remove(float_0)
    assert var_16 is False
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1293():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_2.__repr__()
    assert var_11 == "link:[False]"
    var_10.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1296():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_3.prepend(var_2)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_8.value) == 1
    var_15 = var_12.__repr__()
    var_16 = linked_list_0.prepend(var_12)
    assert len(linked_list_0) == 3
    var_16.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1297():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[False]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    list_1 = [linked_list_3]
    var_3.remove(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_4.__repr__()
    assert var_13 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1299():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1300():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_10 = var_7.__repr__()
    var_11 = linked_list_2.__len__()
    assert var_11 == 0
    var_11.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_10 = linked_list_2.__repr__()
    assert var_10 == "link:[False]"
    var_10.remove(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_10.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    var_17 = var_14.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_4, bytes_4]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_20 = linked_list_8.remove(float_0)
    assert var_20 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1303():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__iter__()
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1304():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_0.prepend(linked_node_3)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"\x14\x0f\xf4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[b'\\x14\\x0f\\xf4',b'\\x14\\x0f\\xf4',b'\\x14\\x0f\\xf4',b'\\x14\\x0f\\xf4']"
    )
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1306():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_11 = linked_list_2.__repr__()
    assert var_11 == "link:[False]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_15.__len__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_list_8.prepend(var_18)
    assert len(linked_list_8) == 1
    assert len(linked_node_10.value) == 1
    var_22 = var_19.__repr__()
    var_13.remove(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_10 = linked_list_3.remove(float_0)
    assert var_10 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_12.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_node_10 = module_0.LinkedNode(bool_0)
    var_19 = linked_node_10.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[False]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_8.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_16 = linked_list_7.remove(float_0)
    assert var_16 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    var_15.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1312():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_1.remove(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    none_type_0 = None
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_7.prepend(var_16)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1315():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_8.prepend(var_14)
    assert len(linked_list_8) == 1
    assert len(linked_node_8.value) == 1
    var_18 = linked_list_8.__repr__()
    assert var_18 == "link:[False]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_9.prepend(var_19)
    assert len(linked_list_9) == 1
    assert len(linked_node_10.value) == 1
    var_23 = var_20.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_24 = linked_node_11.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_25 = linked_node_12.checkInfinite()
    var_26 = var_25.__repr__()
    var_27 = linked_list_11.__len__()
    assert var_27 == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_5.__repr__()
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1317():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.remove(float_0)
    assert var_2 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_12 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    var_5.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_1.__repr__()
    assert var_8 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_8.remove(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__iter__()
    var_8.prepend(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_4.checkInfinite()
    var_5.prepend(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_5.prepend(var_6)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_10 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    var_15.remove(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    assert len(linked_node_8.value) == 1
    var_19 = linked_list_8.__repr__()
    assert var_19 == "link:[False]"
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_list_9.prepend(var_20)
    assert len(linked_list_9) == 1
    assert len(linked_node_10.value) == 1
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1326():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    module_0.LinkedList(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_0)
    assert var_12 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    var_10.remove(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[False]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_15 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    var_5.remove(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_0.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_13 = var_10.__repr__()
    var_11.remove(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_5.prepend(var_9)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_6.remove(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.prepend(var_9)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__iter__()
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1333():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1335():
    float_0 = 712.5935
    linked_node_0 = module_0.LinkedNode(float_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1336():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_2, bytes_2, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_8 = linked_list_3.__len__()
    assert var_8 == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_10.__iter__()


def test_case_1337():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1338():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[False]"
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_11 = linked_list_4.remove(float_0)
    assert var_11 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_7.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_20 = linked_list_10.remove(var_1)
    assert var_20 is False
    var_20.remove(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_5.prepend(var_6)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_7, bytes_1, linked_node_6]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_14 = linked_list_8.__len__()
    assert var_14 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_15 = linked_list_10.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1340():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1341():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_7.prepend(var_8)
    assert len(linked_list_7) == 1
    assert len(linked_node_4.value) == 1
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[False]"
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_8.prepend(var_13)
    assert len(linked_list_8) == 1
    assert len(linked_node_7.value) == 1
    var_17 = var_14.__repr__()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_18 = linked_node_8.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_list_9.prepend(var_18)
    assert len(linked_list_9) == 1
    assert len(linked_node_9.value) == 1
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_10.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_5.prepend(var_13)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_7 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_17)
    var_16.pop()


@pytest.mark.xfail(strict=True)
def test_case_1343():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_4.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1344():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    linked_node_3 = module_0.LinkedNode(var_1)
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_1.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_12 = linked_list_4.remove(float_0)
    assert var_12 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_13)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    var_14 = var_3.__repr__()
    var_2.remove(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1347():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_2, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_16 = linked_list_8.__len__()
    assert var_16 == 4
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_list_9.prepend(var_17)
    assert len(linked_list_9) == 1
    assert len(linked_node_11.value) == 1
    var_21 = var_18.__repr__()
    module_0.LinkedList(*var_10)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_9 = linked_list_3.remove(float_0)
    assert var_9 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1349():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_1, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_3 = linked_list_2.__len__()
    assert var_3 == 4
    var_2.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    bool_1 = False
    var_4.remove(bool_1)


def test_case_1352():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[False]"
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1353():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1354():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_8)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_5, bytes_1, linked_node_8]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1356():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_1.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1358():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_3.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_6.__len__()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_7.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_5.prepend(var_9)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1360():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1361():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_5, bytes_2, linked_node_5]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_12 = linked_list_6.__len__()
    assert var_12 == 4
    var_12.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    var_0.prepend(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_4.remove(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_10 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_11 = linked_list_3.__iter__()
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_6 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    bool_1 = True
    linked_node_9 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_9.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_10.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    var_18 = var_16.__len__()
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_9.prepend(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = "2Xv]KWn&_p8G3m;kDa"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(str_0)
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1368():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1369():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1371():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_3, bytes_2, linked_node_5]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_11 = linked_list_4.__len__()
    assert var_11 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_17, linked_list_10)
    assert len(linked_node_9.next) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_12.__len__()
    assert var_20 == 0
    var_21 = linked_list_12.__len__()
    assert var_21 == 0
    var_5.prepend(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_1, bytes_1, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_6 = linked_list_2.__len__()
    assert var_6 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_5.prepend(var_8)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1375():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_4.prepend(var_12)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = var_17.__len__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1376():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_0.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_9)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_5, linked_list_7, bytes_1, linked_node_5]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 4
    var_11 = linked_list_8.__len__()
    assert var_11 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_9.prepend(var_12)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    var_16 = var_13.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_10.prepend(var_17)
    assert len(linked_list_10) == 1
    assert len(linked_node_9.value) == 1
    var_21 = linked_list_10.__repr__()
    assert var_21 == "link:[False]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1378():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_4.remove(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1
    var_11 = var_8.__repr__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_12 = linked_list_3.remove(float_0)
    assert var_12 is False
    bool_0 = True
    bytes_4 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_4}
    linked_node_7 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_13 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_11.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_4.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_3.prepend(var_11)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_15 = var_12.__repr__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_7 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_16)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_11.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_12.value) == 0
    var_19 = linked_node_12.checkInfinite()
    var_20 = linked_list_6.prepend(var_17)
    assert len(linked_list_6) == 1
    assert len(linked_node_12.value) == 1
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_5)
    var_21 = linked_node_13.checkInfinite()
    var_22 = var_21.__repr__()
    var_5.remove(linked_node_9)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4)
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1385():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__len__()
    assert var_0 == 0
    var_0.remove(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_1, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_6 = linked_list_5.__len__()
    assert var_6 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_6.prepend(var_7)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[False]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1387():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_0.prepend(var_5)
    assert len(linked_list_0) == 1
    assert len(linked_node_4.value) == 1
    var_9 = linked_list_0.__repr__()
    assert var_9 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_1, bytes_3, linked_node_6]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_11 = linked_list_2.__len__()
    assert var_11 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_14 = linked_list_4.remove(float_0)
    assert var_14 is False
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1389():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0.checkInfinite()


def test_case_1390():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    with pytest.raises(Exception):
        linked_list_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1391():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_4)
    assert len(linked_node_3.next) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_8, bytes_0, linked_node_6]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 4
    var_11 = linked_list_9.__len__()
    assert var_11 == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_0 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_12 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1392():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_1 = linked_list_2.__len__()
    assert var_1 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2)
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_0)
    assert var_3 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_4, linked_list_5)
    assert len(linked_node_5.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    var_6 = linked_node_7.checkInfinite()
    var_5.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1393():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    var_10 = linked_node_8.checkInfinite()
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_12 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_12, linked_list_9)
    assert len(linked_node_11.next) == 0
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1394():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__repr__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1395():
    none_type_0 = None
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1398():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_4, bytes_1, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_9 = linked_list_5.__len__()
    assert var_9 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_10.prepend(var_15)
    assert len(linked_list_10) == 1
    assert len(linked_node_7.value) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_8.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_11.prepend(var_19)
    assert len(linked_list_11) == 1
    assert len(linked_node_9.value) == 1
    var_23 = linked_list_11.__repr__()
    assert var_23 == "link:[False]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_10.value) == 0
    var_24 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_24)
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_4)
    var_25 = linked_node_13.checkInfinite()
    var_26 = var_25.__repr__()
    var_27 = var_25.__repr__()
    var_6.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_3 = linked_node_5.checkInfinite()
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_5, bytes_1, linked_node_6]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_8 = linked_list_6.__len__()
    assert var_8 == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_9 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_13 = linked_list_9.__iter__()
    var_14 = var_13.__iter__()
    var_7.remove(linked_list_7)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_5, bytes_1, linked_node_6]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_12 = linked_list_6.__len__()
    assert var_12 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_15 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_10.__len__()
    assert var_20 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_22 = linked_node_11.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = linked_list_12.__len__()
    assert var_24 == 0
    var_17.remove(var_21)


def test_case_1401():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    assert var_7 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_12 = var_9.__repr__()
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_8 = module_0.LinkedNode(set_0)
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1402():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_2.prepend(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_4.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_5 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_0.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_1)
    assert len(linked_node_3.next) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_7.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_10)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_9.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13, linked_list_5)
    assert len(linked_node_7.next) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_14 = linked_list_6.remove(float_0)
    assert var_14 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.__iter__()
    var_19 = var_18.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    var_3.prepend(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_3.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_7.prepend(var_13)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    var_17 = var_14.__repr__()
    module_0.LinkedList(*var_15)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__iter__()
    var_13 = var_12.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_14 = linked_node_3.checkInfinite()
    var_15 = var_14.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_4.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_18 = linked_node_5.checkInfinite()
    var_19 = linked_list_7.prepend(var_16)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_20 = linked_node_6.checkInfinite()
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    var_8 = var_7.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_9, linked_list_3)
    assert len(linked_node_4.next) == 0
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.remove(linked_list_5)
    assert var_12 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_3, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_17 = linked_list_8.__len__()
    assert var_17 == 4
    var_18 = linked_node_2.checkInfinite()
    var_18.prepend(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_9.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1410():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_8 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__iter__()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_7.value) == 1
    var_18 = var_15.__repr__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1411():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_10 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__iter__()
    var_15 = var_14.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_10.__len__()
    assert var_19 == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1412():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, linked_list_3)
    assert len(linked_node_7.next) == 0
    var_12.prepend(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.prepend(var_2)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1414():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1415():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_15 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[{link:[{...}]: link:[{...}]}]"
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1416():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_6)
    assert len(linked_node_8.next) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_9, linked_list_7, bytes_3, linked_node_9]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_15 = linked_list_8.__len__()
    assert var_15 == 4
    var_2.prepend(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_4 = module_0.LinkedNode(set_0)
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1418():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_10 = linked_list_3.remove(float_0)
    assert var_10 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_10.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1419():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_node_5.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__iter__()
    var_20 = var_19.__iter__()
    var_9.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1420():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_2.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_list_5.prepend(var_9)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_16.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1422():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1423():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1424():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_2, bytes_1, linked_node_3]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__iter__()
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_5.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_10.__len__()
    assert var_14 == 0
    var_15 = linked_list_10.__len__()
    assert var_15 == 0
    var_13.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_3.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    assert var_9 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_13 = linked_list_10.remove(float_0)
    assert var_13 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_2, bytes_2, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1427():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_8)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[False]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_7, bytes_1, linked_node_6]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_15 = linked_list_8.__len__()
    assert var_15 == 4
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_16 = linked_list_9.remove(float_0)
    assert var_16 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_18.__len__()
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1428():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_3.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    var_7.remove(linked_list_3)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_8 = linked_list_4.__len__()
    assert var_8 == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_5)
    assert len(linked_node_5.next) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_10)
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_8 = module_0.LinkedNode(set_0)
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_6.value) == 1
    var_15 = linked_list_5.__repr__()
    assert var_15 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_16)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_17 = linked_list_7.remove(float_0)
    assert var_17 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_20.__repr__()
    var_22 = var_20.__repr__()
    var_23 = linked_list_6.prepend(var_15)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_23.pop()


@pytest.mark.xfail(strict=True)
def test_case_1432():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_4.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_5.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    var_6 = linked_node_7.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_5, bytes_0, linked_node_8]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_10 = linked_list_6.__len__()
    assert var_10 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_9.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_list_7.prepend(var_11)
    assert len(linked_list_7) == 1
    assert len(linked_node_10.value) == 1
    var_15 = linked_list_7.__repr__()
    assert var_15 == "link:[False]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_16 = linked_node_11.checkInfinite()
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    var_11.prepend(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__repr__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_4.__len__()
    assert var_15 == 0
    var_16 = linked_list_4.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_5.prepend(var_17)
    assert len(linked_list_5) == 1
    assert len(linked_node_10.value) == 1
    var_21 = linked_list_5.__repr__()
    assert var_21 == "link:[False]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_22 = linked_node_11.checkInfinite()
    var_23 = linked_node_11.checkInfinite()
    var_24 = linked_list_7.__len__()
    assert var_24 == 0
    var_16.prepend(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1435():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_5, bytes_1, linked_node_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    var_9 = linked_list_6.__len__()
    assert var_9 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_7.prepend(var_10)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[False]"
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1436():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_0.__len__()


def test_case_1437():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1438():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_12.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__iter__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1439():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_5.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    var_8 = var_7.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[False]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_14 = linked_list_4.remove(float_0)
    assert var_14 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_3.__repr__()
    assert var_15 == "link:[]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = var_17.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_7.__len__()
    assert var_22 == 0
    var_23 = linked_list_7.__len__()
    assert var_23 == 0
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_24 = linked_node_11.checkInfinite()
    var_25 = var_24.__repr__()
    var_26 = var_24.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_27 = linked_node_12.checkInfinite()
    var_28 = linked_node_12.checkInfinite()
    var_29 = linked_list_9.__len__()
    assert var_29 == 0
    var_30 = linked_list_9.__iter__()
    var_31 = var_30.__iter__()
    var_30.remove(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.remove(linked_list_1)
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_node_7 = module_0.LinkedNode(var_10)
    assert linked_node_7.value == 0
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1443():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_0, bytes_2, linked_node_2]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_3 = linked_list_1.__len__()
    assert var_3 == 4
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == 0
    var_6.checkInfinite()


def test_case_1445():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_5.next) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_4 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    linked_node_9 = module_0.LinkedNode(var_14)
    assert linked_node_9.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    with pytest.raises(Exception):
        linked_list_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1446():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    var_13 = var_12.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_20 = linked_node_8.checkInfinite()
    var_21 = var_20.__repr__()
    var_22 = var_20.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_node_10.checkInfinite()
    var_25 = linked_list_10.__len__()
    assert var_25 == 0
    var_26 = linked_list_10.__len__()
    assert var_26 == 0
    linked_node_11 = module_0.LinkedNode(var_26)
    assert linked_node_11.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_12.value) == 0
    var_27 = linked_node_12.checkInfinite()
    var_28 = linked_node_12.checkInfinite()
    var_25.__len__()


def test_case_1448():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1449():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_4.next) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_11 = linked_node_10.checkInfinite()
    var_12 = linked_node_10.checkInfinite()
    var_0.prepend(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_1)
    assert len(linked_node_4.next) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1451():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    var_10 = var_9.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_12.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.__len__()
    assert var_18 == 0
    linked_node_7 = module_0.LinkedNode(var_18)
    assert linked_node_7.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    module_0.LinkedList(*var_7)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_0.__repr__()
    assert var_8 == "link:[False]"
    var_5.prepend(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_7 = module_0.LinkedNode(var_10)
    assert linked_node_7.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_11.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_12.value) == 0
    var_20 = linked_node_12.checkInfinite()
    var_16.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1454():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_5, bytes_2, linked_node_7]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_12 = linked_list_7.remove(float_0)
    assert var_12 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_13 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1455():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_8 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_5)
    var_16 = linked_node_10.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_node_11.checkInfinite()
    var_21 = linked_list_7.__repr__()
    assert var_21 == "link:[]"
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1456():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_0.prepend(var_6)


def test_case_1457():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_13)
    bool_1 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_3}
    linked_node_8 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_5.__len__()
    assert var_16 == 0
    var_17 = linked_list_5.__len__()
    assert var_17 == 0
    linked_node_10 = module_0.LinkedNode(var_17)
    assert linked_node_10.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    var_21 = linked_list_7.__len__()
    assert var_21 == 0
    linked_node_12 = module_0.LinkedNode(var_21)
    assert linked_node_12.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_13 = module_0.LinkedNode(bytes_4)
    var_22 = linked_node_13.checkInfinite()
    var_23 = var_22.__repr__()
    with pytest.raises(Exception):
        linked_list_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1458():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_0 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[False]"
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_0.remove(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1461():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1462():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_2.__len__()


def test_case_1463():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = var_8.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_11.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_5.prepend(var_14)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_18 = linked_list_5.__repr__()
    assert var_18 == "link:[False]"
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_19 = linked_node_11.checkInfinite()
    var_20 = linked_node_11.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    with pytest.raises(Exception):
        linked_list_8.pop()


def test_case_1464():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_node_3 = module_0.LinkedNode(var_10)
    assert linked_node_3.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_17, linked_list_9)
    assert len(linked_node_10.next) == 0
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    with pytest.raises(Exception):
        linked_list_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1466():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_5 = linked_list_3.__len__()
    assert var_5 == 4
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_6 = module_0.LinkedNode(var_11)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_4.prepend(var_13)
    assert len(linked_list_4) == 1
    assert len(linked_node_8.value) == 1
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_5.prepend(var_17)
    assert len(linked_list_5) == 1
    assert len(linked_node_10.value) == 1
    var_21 = var_18.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_node_12 = module_0.LinkedNode(complex_0)
    none_type_2 = None
    linked_node_13 = module_0.LinkedNode(none_type_2)
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_14 = module_0.LinkedNode(bytes_5)
    var_22 = linked_node_14.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_15 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_15.value) == 0
    var_26 = linked_node_15.checkInfinite()
    linked_node_16 = module_0.LinkedNode(var_26, linked_list_7)
    assert len(linked_node_16.next) == 0
    var_27 = linked_list_7.__len__()
    assert var_27 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_17 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_17.value) == 0
    var_28 = linked_node_17.checkInfinite()
    var_29 = linked_node_17.checkInfinite()
    var_30 = linked_list_9.__len__()
    assert var_30 == 0
    var_31 = linked_list_9.__len__()
    assert var_31 == 0
    linked_node_18 = module_0.LinkedNode(var_31)
    assert linked_node_18.value == 0
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1467():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_1 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_1)
    assert len(linked_list_3) == 1
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1468():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1469():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_3 = module_0.LinkedNode(var_4)
    assert linked_node_3.value == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1470():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_0, bytes_2, linked_node_4]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_5 = linked_list_1.__len__()
    assert var_5 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_1 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1471():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_2.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    var_8.remove(linked_list_4)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_8.__len__()
    none_type_2 = None
    linked_node_7 = module_0.LinkedNode(none_type_2)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_17 = linked_node_10.checkInfinite()
    var_18 = var_17.__repr__()
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1473():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_2 = module_0.LinkedNode(var_6)
    assert linked_node_2.value == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_9.checkInfinite()
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_16 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_16, linked_list_8)
    assert len(linked_node_12.next) == 0
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1474():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[False]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_14.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_6.__len__()
    assert var_19 == 0
    var_20 = linked_list_6.__iter__()
    var_21 = var_20.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_22 = linked_node_9.checkInfinite()
    var_23 = linked_node_9.checkInfinite()
    var_24 = linked_list_8.__len__()
    assert var_24 == 0
    var_25 = linked_list_8.__len__()
    assert var_25 == 0
    linked_node_10 = module_0.LinkedNode(var_25)
    assert linked_node_10.value == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_26 = linked_node_11.checkInfinite()
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1475():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    var_10 = linked_node_8.checkInfinite()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__len__()
    assert var_12 == 0
    linked_node_9 = module_0.LinkedNode(var_12)
    assert linked_node_9.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_13 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_14 = linked_list_5.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1476():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_9)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_node_6 = module_0.LinkedNode(var_12)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    linked_node_8 = module_0.LinkedNode(var_17)
    assert linked_node_8.value == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1477():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_2.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_3 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_1 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_1)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_node_5 = module_0.LinkedNode(var_9)
    assert linked_node_5.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_9.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()
    linked_node_10 = module_0.LinkedNode(var_18)
    var_20 = linked_list_1.__iter__()
    var_20.prepend(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.remove(linked_list_1)
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_4.__repr__()
    assert var_13 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_18 = linked_list_8.remove(float_0)
    assert var_18 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_19 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_20 = linked_node_7.checkInfinite()
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_list_11.__len__()
    assert var_22 == 0
    var_23 = linked_list_11.__len__()
    assert var_23 == 0
    linked_node_8 = module_0.LinkedNode(var_23)
    assert linked_node_8.value == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_12.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1479():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1480():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    str_0 = ">M\x0bE2WfnbV=TJz"
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_2.prepend(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_node_5 = module_0.LinkedNode(var_10)
    assert linked_node_5.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    module_0.LinkedList(*var_10)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, linked_list_5)
    assert len(linked_node_7.next) == 0
    complex_0 = -1428.8 + 565j
    var_8.remove(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_1 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    linked_node_1 = module_0.LinkedNode(var_4)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1484():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_node_4 = module_0.LinkedNode(var_9)
    assert linked_node_4.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_5, bytes_2, linked_node_6]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1485():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_5 = module_0.LinkedNode(var_6)
    var_8 = var_1.__len__()
    var_8.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__iter__()
    var_7 = var_6.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__iter__()
    var_5.remove(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    var_5.checkInfinite()


def test_case_1490():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_4 = module_0.LinkedNode(var_4)
    assert linked_node_4.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    var_6 = var_5.__repr__()
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1491():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_1, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_4, bytes_2, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_7 = linked_list_5.__len__()
    assert var_7 == 4
    bool_1 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.remove(bool_1)
    assert var_8 is False
    var_6.remove(linked_list_6)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_3 = module_0.LinkedNode(var_3)
    assert linked_node_3.value == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_5)
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1493():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_3 = module_0.LinkedNode(var_5)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_15 = var_12.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = True
    linked_node_8 = module_0.LinkedNode(bool_1)
    var_16 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_list_5.prepend(var_17)
    assert len(linked_list_5) == 1
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1494():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_13 = var_10.__repr__()
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_8.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_16, linked_list_8)
    assert len(linked_node_11.next) == 0
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_5.remove(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, var_2)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_6.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_5.__len__()
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_5 = linked_list_0.__iter__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.remove(bool_0)
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_2, bytes_2, linked_node_3]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_8 = linked_list_3.__len__()
    assert var_8 == 4
    bool_1 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_3}
    linked_node_4 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.remove(linked_list_6)
    var_14 = var_13.__repr__()
    var_0.prepend(linked_list_6)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_node_3 = module_0.LinkedNode(var_8)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    linked_node_8 = module_0.LinkedNode(var_14)
    assert linked_node_8.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_1)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_9, linked_list_7)
    assert len(linked_node_8.next) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.remove(linked_list_8)
    assert var_11 is False
    var_12 = var_11.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_10.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_15 = linked_node_11.checkInfinite()
    var_16 = linked_node_11.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__iter__()
    var_17.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = True
    linked_node_1 = module_0.LinkedNode(bool_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    var_3.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    bool_1 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_1}
    linked_node_7 = module_0.LinkedNode(set_0)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_9.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_12 = linked_node_10.checkInfinite()
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    var_16 = var_15.__iter__()
    var_13.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1502():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_18 = var_17.__iter__()
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1504():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1505():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    linked_node_8 = module_0.LinkedNode(var_15)
    assert linked_node_8.value == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_10.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_17.__len__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_20)
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1506():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    linked_node_4 = module_0.LinkedNode(var_11)
    assert linked_node_4.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_6.prepend(var_12)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    var_16 = linked_list_6.__repr__()
    assert var_16 == "link:[False]"
    var_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_1507():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_8, linked_list_6)
    assert len(linked_node_5.next) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_7, bytes_1, linked_node_7]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_11 = linked_list_8.__len__()
    assert var_11 == 4
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_12.__len__()
    assert var_16 == 0
    var_17 = linked_list_12.__len__()
    assert var_17 == 0
    linked_node_10 = module_0.LinkedNode(var_17)
    assert linked_node_10.value == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1508():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_0.__repr__()
    assert var_7 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_8 = linked_list_1.remove(linked_list_1)
    assert var_8 is False
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_4.checkInfinite()
    bool_1 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_10 = linked_list_2.remove(bool_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_13 = linked_list_3.remove(float_0)
    assert var_13 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1509():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[False]"
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__repr__()
    linked_node_5 = module_0.LinkedNode(var_9)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    linked_node_10 = module_0.LinkedNode(var_18)
    assert linked_node_10.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_8.prepend(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(bool_0)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_11 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_8.prepend(var_13)
    assert len(linked_list_8) == 1
    assert len(linked_node_6.value) == 1
    var_17 = var_14.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    var_15.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1511():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    var_5.prepend(linked_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.remove(linked_list_0)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    var_1.prepend(var_0)


def test_case_1514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1515():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__len__()
    var_3.pop()


def test_case_1517():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_0.__iter__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_node_6.checkInfinite()
    var_20 = linked_list_9.__len__()
    assert var_20 == 0
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    linked_node_7 = module_0.LinkedNode(var_21)
    assert linked_node_7.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_22 = linked_list_10.remove(linked_list_10)
    assert var_22 is False
    var_23 = var_22.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_10.value) == 0
    var_24 = linked_node_10.checkInfinite()
    var_25 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_24, var_24)
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11)
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_0)
    assert var_12 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__iter__()
    var_17 = var_16.__iter__()
    var_14.prepend(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_1.__iter__()
    var_7 = var_6.__iter__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.remove(linked_list_2)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_1.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    assert var_9 is False
    var_10 = var_9.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_node_8 = module_0.LinkedNode(complex_1)
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_9.checkInfinite()
    var_2.checkInfinite()


def test_case_1522():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_3 = module_0.LinkedNode(var_6)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1523():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_5.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    linked_node_7 = module_0.LinkedNode(var_11)
    assert linked_node_7.value == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1524():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, linked_list_5)
    assert len(linked_node_4.next) == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_7 = module_0.LinkedNode(var_10)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    var_4.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_4 = module_0.LinkedNode(var_4)
    assert linked_node_4.value == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_6.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.remove(float_0)
    assert var_9 is False
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1526():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__iter__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1527():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.__iter__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1528():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_2.__iter__()
    var_8.remove(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    linked_node_4 = module_0.LinkedNode(var_10)
    assert linked_node_4.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_8 = module_0.LinkedNode(set_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.remove(linked_list_7)
    assert var_16 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_17 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_10.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = linked_list_10.__len__()
    assert var_21 == 0
    var_15.prepend(linked_list_10)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    var_9 = var_8.__iter__()
    var_5.prepend(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_1.prepend(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = var_13.__len__()
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_6.prepend(var_14)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_18 = linked_list_7.remove(linked_list_7)
    assert var_18 is False
    var_19 = var_18.__repr__()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1534():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    module_0.LinkedList(*linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_0.prepend(var_4)
    assert len(linked_list_0) == 1
    assert len(linked_node_4.value) == 1
    var_8 = linked_list_0.__repr__()
    assert var_8 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_2.__len__()
    assert var_11 == 0
    var_12 = linked_list_2.__len__()
    assert var_12 == 0
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_14 = linked_list_4.remove(linked_list_4)
    assert var_14 is False
    var_15 = linked_list_4.__len__()
    assert var_15 == 0
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1536():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_8.prepend(var_12)
    assert len(linked_list_8) == 1
    assert len(linked_node_7.value) == 1
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_16 = linked_list_9.remove(float_0)
    assert var_16 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_8, linked_list_10, bytes_4, linked_node_8]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 4
    var_18 = linked_list_11.__len__()
    assert var_18 == 4
    none_type_0 = None
    var_17.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1538():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.remove(float_0)
    assert var_6 is False
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1539():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(bool_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_6.next) == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1540():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_13 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_14 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11.remove(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_7.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_12, linked_list_1)
    assert len(linked_node_9.next) == 0
    module_0.LinkedList(*var_8)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    module_0.LinkedList(*linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11, linked_list_5)
    assert len(linked_node_6.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_12, linked_list_8)
    assert len(linked_node_9.next) == 0
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_14 = linked_list_9.remove(linked_list_9)
    assert var_14 is False
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_12.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    complex_1 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_1)
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1545():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1546():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    var_11 = var_10.__iter__()
    var_5.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_1, var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    var_12 = var_11.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1548():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_1, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1549():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1550():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_2.next) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_node_4 = module_0.LinkedNode(complex_1)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_6.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_8.checkInfinite()
    var_8 = var_7.__repr__()
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_10.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    none_type_2 = None
    linked_node_11 = module_0.LinkedNode(none_type_2)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_12.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_node_13 = module_0.LinkedNode(var_14)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_4 = b""
    tuple_0 = (dict_0, bytes_4, bool_0)
    linked_node_14 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_15 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_15.value) == 0
    var_16 = linked_node_15.checkInfinite()
    var_17 = linked_node_15.checkInfinite()
    var_18 = linked_list_4.__len__()
    assert var_18 == 0
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1551():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_5 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9, var_9)
    var_3.prepend(bytes_2)


def test_case_1552():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1553():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_6.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_9 = linked_list_3.remove(float_0)
    assert var_9 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_13 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_6 = module_0.LinkedNode(set_0)
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1554():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_7.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.__iter__()
    var_20 = var_19.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_21, linked_list_7)
    assert len(linked_node_10.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_node_12 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    linked_node_13 = module_0.LinkedNode(none_type_1)
    var_21.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_10 = linked_list_3.remove(linked_list_3)
    assert var_10 is False
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_12 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_5.prepend(var_13)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_17 = var_14.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_1 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_18 = linked_list_6.prepend(dict_1)
    assert len(linked_list_6) == 1
    var_19 = linked_list_6.__repr__()
    assert var_19 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_20 = linked_list_7.remove(linked_list_7)
    var_21 = var_20.__repr__()
    var_18.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1557():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_11 = var_8.__repr__()
    var_7.remove(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_8 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_2.prepend(var_9)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_4.prepend(var_12)
    assert len(linked_list_4) == 1
    assert len(linked_node_9.value) == 1
    var_16 = var_13.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_17 = linked_list_5.__repr__()
    assert var_17 == "link:[]"
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_18 = linked_list_6.remove(linked_list_6)
    assert var_18 is False
    var_19 = var_18.__repr__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1560():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_7, linked_list_5)
    assert len(linked_node_5.next) == 0
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(linked_list_7)
    assert var_9 is False
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[]"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1561():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, var_9)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    linked_node_7 = module_0.LinkedNode(var_14)
    assert linked_node_7.value == 0
    bool_1 = True
    linked_node_8 = module_0.LinkedNode(bool_1)
    var_15 = linked_node_8.checkInfinite()
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1562():
    str_0 = "3\n,JUE3f[O;rPA"
    linked_node_0 = module_0.LinkedNode(str_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1563():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_1)
    assert len(linked_node_3.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(bool_0)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1564():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1565():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_2 = (dict_0, bytes_3, bool_1)
    linked_node_3 = module_0.LinkedNode(tuple_2, bool_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_9.prepend(bytes_2)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1567():
    none_type_0 = None
    int_0 = -1444
    linked_node_0 = module_0.LinkedNode(int_0)
    dict_0 = {}
    list_0 = [linked_node_0, int_0, dict_0, dict_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.__repr__()
    var_0.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_8, var_8)
    var_10 = linked_node_3.checkInfinite()
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1569():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_2)
    assert len(linked_node_5.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_7.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_3.prepend(var_11)
    assert len(linked_list_3) == 1
    bool_1 = True
    linked_node_9 = module_0.LinkedNode(bool_1)
    var_14 = linked_node_9.checkInfinite()
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1570():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1572():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(bool_0)
    linked_node_0 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_node_5 = module_0.LinkedNode(var_12)
    assert linked_node_5.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_13 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_11 = module_0.LinkedList(*list_0)
    assert len(linked_list_11) == 2
    var_15 = linked_list_11.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_11.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.remove(linked_list_12)
    assert var_17 is False
    var_18 = var_17.__repr__()
    var_9.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_3.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_4 = linked_list_0.remove(float_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1577():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_3, bytes_1, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    var_3.remove(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_1.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    float_0 = 2219.0
    linked_node_0 = module_0.LinkedNode(float_0, float_0)
    linked_node_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1580():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_node_7 = module_0.LinkedNode(var_12, bytes_0)
    linked_node_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1581():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_node_3 = module_0.LinkedNode(var_4)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(bool_0)
    assert var_6 is False
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1582():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(bool_0)
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(linked_list_7)
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_10.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1583():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_1 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_1)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    str_0 = "V)iC"
    var_8.remove(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    var_9 = var_8.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.prepend(bool_1)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_4.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_16, linked_list_9)
    assert len(linked_node_6.next) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_17, linked_list_11)
    assert len(linked_node_8.next) == 0
    var_18 = linked_list_11.__len__()
    assert var_18 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_19.__repr__()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1586():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_0.checkInfinite()


def test_case_1587():
    pass


def test_case_1588():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1589():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_1)
    assert len(linked_node_3.next) == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_7.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    var_10 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_8.value) == 1
    var_11 = var_8.__repr__()
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.remove(bool_0)
    assert var_12 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    var_16 = linked_list_6.__iter__()
    var_17 = var_16.__iter__()
    var_17.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1590():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_4.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_5 = linked_list_1.remove(float_0)
    assert var_5 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_6, var_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_5.prepend(var_12)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_16 = var_13.__repr__()
    var_6.prepend(linked_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.__repr__()
    assert var_6 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_5.__iter__()
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_5.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_18 = linked_node_6.checkInfinite()
    var_19 = linked_list_7.prepend(var_16)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    var_20 = var_17.__repr__()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_21 = linked_node_8.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__repr__()
    linked_node_9 = module_0.LinkedNode(var_23)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_25 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_26 = linked_node_10.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_27 = linked_node_11.checkInfinite()
    var_28 = var_27.__repr__()
    var_29 = linked_list_10.__len__()
    assert var_29 == 0
    bool_0 = True
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_30 = linked_list_11.prepend(bool_0)
    assert len(linked_list_11) == 1
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_4 = b""
    tuple_0 = (dict_0, bytes_4, bool_1)
    linked_node_12 = module_0.LinkedNode(tuple_0, bool_1)
    var_15.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    bytes_0 = b'\n\xb9\x8ba}\xb2\xcf\xe2a"\xcc\x82\xa0\xbd\xb7\xed'
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    var_0.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_2.checkInfinite()
    var_9 = var_8.__repr__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_3.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11, var_11)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_14.__len__()
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1594():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.prepend(var_6)
    assert len(linked_list_1) == 1
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1595():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_1 = True
    linked_node_3 = module_0.LinkedNode(bool_1)
    var_11 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    var_3.__len__()


def test_case_1596():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1597():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_0.prepend(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_8 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_9 = linked_list_1.__repr__()
    assert var_9 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_10 = linked_list_2.remove(bool_0)
    assert var_10 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_11, var_11)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_1 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_13 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    bool_1 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.remove(bool_1)
    linked_node_6 = module_0.LinkedNode(var_14)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_15 = linked_list_7.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_7.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_17 = linked_list_8.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    module_0.LinkedList(*var_7)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    linked_node_8 = module_0.LinkedNode(var_13)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_3.prepend(var_15)
    assert len(linked_list_3) == 1
    assert len(linked_node_10.value) == 1
    var_19 = linked_list_3.__repr__()
    assert var_19 == "link:[False]"
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_5)
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_12.value) == 0
    var_22 = linked_node_12.checkInfinite()
    var_23 = var_21.__len__()
    bool_0 = True
    linked_node_13 = module_0.LinkedNode(bool_0)
    var_24 = linked_node_13.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_14.value) == 0
    var_25 = linked_node_14.checkInfinite()
    var_26 = linked_node_14.checkInfinite()
    var_27 = linked_list_5.prepend(var_25)
    assert len(linked_list_5) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_15 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_15.value) == 0
    var_28 = linked_node_15.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_6 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_16 = module_0.LinkedNode(bytes_6)
    var_29 = linked_node_16.checkInfinite()
    var_30 = var_29.__repr__()
    var_31 = linked_list_9.__len__()
    assert var_31 == 0
    var_30.prepend(linked_list_5)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_3 = module_0.LinkedNode(var_6)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.remove(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_6, bytes_1, linked_node_4]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_9 = linked_list_7.__len__()
    assert var_9 == 4
    var_10 = linked_list_7.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    linked_node_6 = module_0.LinkedNode(var_14)
    assert linked_node_6.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_list_11.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_13 = module_0.LinkedList(*list_1)
    assert len(linked_list_13) == 2
    var_19 = linked_list_13.remove(float_0)
    assert var_19 is False
    var_20 = linked_list_13.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_0.prepend(linked_list_3)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1602():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_node_3 = module_0.LinkedNode(var_8)
    assert linked_node_3.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_6.prepend(var_12)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_16 = linked_list_6.__repr__()
    assert var_16 == "link:[False]"
    var_15.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1603():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1604():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[False]"
    bool_1 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.prepend(bool_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(linked_list_3)
    assert var_8 is False
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__iter__()
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1605():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = linked_list_5.__len__()
    assert var_16 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_list_8.__len__()
    assert var_20 == 0
    var_21 = linked_list_8.__iter__()
    var_14.remove(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(linked_list_4)
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_6.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_9.prepend(var_12)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[False]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    var_20 = linked_list_11.__iter__()
    linked_node_9 = module_0.LinkedNode(var_20)
    bool_0 = True
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_21 = linked_list_12.prepend(bool_0)
    assert len(linked_list_12) == 1
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_22 = linked_node_11.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = var_22.__repr__()
    var_25 = var_23.__len__()
    var_22.remove(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_4, bytes_2, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_9 = linked_list_5.__len__()
    assert var_9 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_5 = module_0.LinkedNode(set_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_6.prepend(var_10)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_5)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    var_18.pop()


@pytest.mark.xfail(strict=True)
def test_case_1608():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_2, var_2)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_7, linked_list_4)
    assert len(linked_node_6.next) == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1610():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_5.next) == 0
    var_7 = linked_list_3.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_10 = linked_list_4.remove(float_0)
    assert var_10 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_14 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    bool_0 = True
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.prepend(bool_0)
    assert len(linked_list_9) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_4 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_4)
    list_1 = [str_0, tuple_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_14.prepend(var_9)


def test_case_1611():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_4 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_4)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1612():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1614():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.remove(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    var_0.remove(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    bool_1 = True
    linked_node_1 = module_0.LinkedNode(bool_1)
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    linked_node_4 = module_0.LinkedNode(var_12)
    assert linked_node_4.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(linked_list_10)
    var_18 = var_17.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_19 = linked_node_7.checkInfinite()
    var_20 = var_19.__repr__()
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_23 = linked_node_12.checkInfinite()
    var_24 = var_23.__repr__()
    var_25 = var_23.__repr__()
    module_0.LinkedList(*var_5)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(bool_0)
    assert var_4 is False
    linked_node_3 = module_0.LinkedNode(var_4)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_5 = module_0.LinkedNode(var_8)
    assert linked_node_5.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_7.next) == 0
    var_10 = linked_list_4.__iter__()
    var_3.__iter__()


def test_case_1618():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_2.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_9 = linked_list_1.__repr__()
    assert var_9 == "link:[False]"
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_7 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_14 = linked_list_2.remove(linked_list_2)
    assert var_14 is False
    none_type_2 = None
    linked_node_8 = module_0.LinkedNode(none_type_2)
    linked_node_9 = module_0.LinkedNode(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    with pytest.raises(Exception):
        linked_list_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1619():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_1, bytes_1, linked_node_3]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_5 = linked_list_2.__len__()
    assert var_5 == 4
    var_6 = linked_list_2.__repr__()
    var_4.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1621():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bool_1 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_10 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11, linked_list_4)
    assert len(linked_node_6.next) == 0
    var_12 = linked_list_4.__iter__()
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1622():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_node_7 = module_0.LinkedNode(var_9)
    assert linked_node_7.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_6, bytes_1, linked_node_8]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    var_14 = linked_list_7.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_15, linked_list_9)
    assert len(linked_node_10.next) == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_2.__iter__()


def test_case_1623():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1624():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_5, bytes_2, linked_node_6]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_13 = linked_list_6.__len__()
    assert var_13 == 4
    var_14 = linked_list_6.__repr__()
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__repr__()
    linked_node_9 = module_0.LinkedNode(var_17)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.remove(linked_list_7)
    module_0.LinkedList(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_3.checkInfinite()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6, var_6)
    var_8 = var_3.__repr__()
    var_8.prepend(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(bool_0)
    assert var_3 is False
    bool_1 = True
    linked_node_0 = module_0.LinkedNode(bool_1)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_6)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1627():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, var_4)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_7 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_3, bytes_1, linked_node_5]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_9 = linked_list_4.__len__()
    assert var_9 == 4
    var_10 = linked_list_4.__repr__()
    bool_0 = True
    bytes_2 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_2}
    linked_node_6 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    var_14.prepend(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_9 = var_6.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_2.prepend(var_10)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_14 = var_11.__iter__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_4.__len__()
    assert var_19 == 0
    var_20 = linked_list_4.__iter__()
    linked_node_8 = module_0.LinkedNode(var_20)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_21 = linked_list_5.remove(linked_list_5)
    assert var_21 is False
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    var_22 = linked_node_10.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = var_22.__repr__()
    var_25 = var_23.__len__()
    var_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_1629():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__len__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    var_16 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_11, linked_list_8, bytes_3, linked_node_11]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 4
    var_21 = linked_list_9.__len__()
    assert var_21 == 4
    var_22 = linked_list_9.__repr__()
    var_19.remove(linked_list_9)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1632():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__iter__()
    var_14 = var_13.__iter__()
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1633():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(bool_0)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bool_1 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(bool_1)
    linked_node_5 = module_0.LinkedNode(var_7)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    bool_2 = True
    dict_1 = {bool_2: bool_2}
    bytes_2 = b""
    tuple_0 = (dict_1, bytes_2, bool_2)
    linked_node_7 = module_0.LinkedNode(tuple_0, bool_2)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_14 = var_11.__repr__()
    var_8.prepend(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1635():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1637():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1638():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    var_5 = var_3.__repr__()
    assert var_5 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_5 = module_0.LinkedNode(var_10)
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1639():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_node_5 = module_0.LinkedNode(var_10)
    assert (
        f"{type(linked_node_5.value).__module__}.{type(linked_node_5.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__iter__()
    var_15 = var_14.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_16.__repr__()
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_9.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_node_11 = module_0.LinkedNode(complex_1)
    bool_0 = True
    linked_node_12 = module_0.LinkedNode(bool_0)
    var_22 = linked_node_12.checkInfinite()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1640():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(linked_list_5)
    assert var_6 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_10.__len__()
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1641():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_6 = var_3.__iter__()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_4.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_2, bytes_1, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_9 = linked_list_3.__len__()
    assert var_9 == 4
    var_10 = linked_list_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_12 = linked_node_6.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_5.prepend(var_13)
    assert len(linked_list_5) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_8.__iter__()
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_11.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1642():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = var_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_5.checkInfinite()
    var_6.remove(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1644():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_0)
    assert len(linked_list_0) == 1
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    var_1.prepend(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_1)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_1)
    bool_2 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.prepend(bool_2)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_5.value) == 1
    var_9 = var_6.__iter__()
    var_3.remove(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_4.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_6 = var_3.__iter__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_7 = linked_list_3.remove(float_0)
    assert var_7 is False
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_8 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1648():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.remove(float_0)
    assert var_9 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10.prepend(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.prepend(var_4)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(linked_list_5)
    assert var_9 is False
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bool_0 = True
    linked_node_7 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_7.checkInfinite()
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1650():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_5.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.remove(linked_list_8)
    assert var_16 is False
    var_1.prepend(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_node_7 = module_0.LinkedNode(var_12)
    assert linked_node_7.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    var_16 = linked_list_7.__iter__()
    var_17 = var_16.__iter__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1652():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1653():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_0, linked_list_3, bytes_1, linked_node_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    var_5 = linked_list_4.__repr__()
    var_6 = var_1.__repr__()
    assert var_6 == "False"
    var_7 = var_6.__iter__()
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    var_12 = linked_list_3.__repr__()
    assert var_12 == "link:[False]"
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    module_0.LinkedList(*var_8)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1656():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(bool_1)
    assert var_4 is False
    linked_node_4 = module_0.LinkedNode(var_4)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_5 = linked_list_1.remove(float_0)
    assert var_5 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    bool_2 = True
    linked_node_6 = module_0.LinkedNode(bool_2)
    var_7 = linked_node_6.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_8.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_6.prepend(var_14)
    assert len(linked_list_6) == 1
    assert len(linked_node_9.value) == 1
    var_18 = linked_list_6.__repr__()
    assert var_18 == "link:[False]"
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1657():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_4 = linked_list_0.remove(float_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_1, bytes_2, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    var_6 = linked_list_2.__len__()
    assert var_6 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_node_5 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    var_14.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_2, var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_1, set_1]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    var_1.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_3 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_1 = module_0.LinkedNode(var_5)
    assert linked_node_1.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, var_6)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__iter__()
    var_12 = linked_list_4.__len__()
    assert var_12 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__iter__()
    linked_node_8 = module_0.LinkedNode(var_19)
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_11.__len__()
    assert var_22 == 0
    var_23 = linked_list_10.__iter__()
    var_20.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1661():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1663():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    var_5 = linked_list_4.__iter__()
    linked_node_4 = module_0.LinkedNode(var_5)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_6, linked_list_6)
    assert len(linked_node_6.next) == 0
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.remove(linked_list_7)
    assert var_8 is False
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_10)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_11 = linked_list_9.remove(float_0)
    assert var_11 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.__len__()
    assert var_12 == 0
    var_11.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1664():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6, var_6)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__iter__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1665():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    var_8.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_1.prepend(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_8.prepend(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1669():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_1 = linked_list_2.__len__()
    assert var_1 == 4
    var_2 = linked_list_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_3.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_6 = module_0.LinkedNode(var_7)
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(bool_0)
    assert var_9 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_7.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = var_11.__len__()
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1670():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.remove(linked_list_7)
    assert var_7 is False
    var_8 = linked_list_7.__len__()
    assert var_8 == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_15 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_10.prepend(var_16)
    assert len(linked_list_10) == 1
    bool_2 = False
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_19 = linked_list_12.remove(bool_2)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_20 = linked_list_13.__repr__()
    assert var_20 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_0)
    var_21 = linked_node_8.checkInfinite()
    var_22 = var_20.__repr__()
    assert var_22 == "'link:[]'"
    var_7.remove(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, var_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_10, linked_list_5)
    assert len(linked_node_6.next) == 0
    var_11 = linked_list_5.__iter__()
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_node_7.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.__iter__()
    var_19 = linked_list_8.__len__()
    assert var_19 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_node_11 = module_0.LinkedNode(none_type_0)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_22 = linked_list_12.__repr__()
    assert var_22 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_12 = module_0.LinkedNode(list_0)
    var_23 = linked_node_12.checkInfinite()
    var_24 = var_22.__repr__()
    assert var_24 == "'link:[]'"
    var_25 = linked_list_12.__len__()
    assert var_25 == 0
    var_4.remove(linked_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_4 = linked_list_0.remove(float_0)
    assert var_4 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_node_3 = module_0.LinkedNode(var_8)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    var_4.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_3, var_3)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, var_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_9.checkInfinite()
    var_10 = var_9.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_11 = linked_node_11.checkInfinite()
    var_12 = linked_node_11.checkInfinite()
    var_1.remove(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__len__()
    assert var_5 == 4
    var_6 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_4.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.remove(linked_list_8)
    assert var_11 is False
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 2
    var_12 = linked_list_9.remove(float_0)
    assert var_12 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_11.__len__()
    assert var_15 == 0
    var_16 = linked_list_10.__iter__()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_11.prepend(linked_list_3)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1678():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_3 = linked_list_2.remove(bytes_1)
    assert var_3 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_4.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_2 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_6 = linked_node_4.checkInfinite()
    module_0.LinkedList(*linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1680():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_2.next) == 0
    var_7 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__iter__()
    linked_node_4 = module_0.LinkedNode(var_11)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_0)
    var_12 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1681():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    var_2.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_list_2.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(var_10)
    assert linked_node_6.value == 0
    var_11 = var_9.__repr__()
    assert var_11 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_15 = linked_list_10.__repr__()
    assert var_15 == "link:[]"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    var_11.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    bool_1 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(bool_1)
    assert var_3 is False
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1684():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    linked_node_5 = module_0.LinkedNode(var_9)
    assert linked_node_5.value == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_node_6.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.__len__()
    assert var_18 == 0
    linked_node_9 = module_0.LinkedNode(var_18)
    assert linked_node_9.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_node_10.checkInfinite()
    var_21 = linked_list_13.__len__()
    assert var_21 == 0
    var_22 = linked_list_13.__iter__()
    linked_node_11 = module_0.LinkedNode(var_22)
    assert (
        f"{type(linked_node_11.value).__module__}.{type(linked_node_11.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_23 = linked_node_12.checkInfinite()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, var_3)
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.remove(bool_0)
    assert var_5 is False
    linked_node_3 = module_0.LinkedNode(var_5)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_node_5 = module_0.LinkedNode(var_9)
    assert linked_node_5.value == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_10 = linked_list_4.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_4.__iter__()
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_1)
    assert var_12 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    var_16 = linked_list_7.__iter__()
    var_17 = var_16.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_18 = linked_node_7.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_19 = linked_node_8.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_22 = linked_node_9.checkInfinite()
    var_23 = linked_node_9.checkInfinite()
    var_24 = linked_list_11.__len__()
    assert var_24 == 0
    var_25 = linked_list_11.__len__()
    assert var_25 == 0
    linked_node_10 = module_0.LinkedNode(var_25)
    assert linked_node_10.value == 0
    var_26 = var_24.__repr__()
    assert var_26 == "0"
    var_19.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1686():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__repr__()
    linked_node_2 = module_0.LinkedNode(var_3)
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_3 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_2, bytes_2, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_11 = linked_list_3.__len__()
    assert var_11 == 4
    var_12 = linked_list_3.__repr__()
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1688():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7, linked_list_2)
    assert len(linked_node_4.next) == 0
    var_8 = linked_list_2.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_10.__len__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_5)
    assert len(linked_node_8.next) == 0
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    linked_node_10 = module_0.LinkedNode(var_18)
    assert linked_node_10.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_19 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_12.value) == 0
    var_20 = linked_node_12.checkInfinite()
    var_21 = linked_node_12.checkInfinite()
    var_22 = linked_list_10.__len__()
    assert var_22 == 0
    var_23 = linked_list_10.__iter__()
    var_24 = var_23.__iter__()
    var_1.prepend(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_1.__repr__()
    assert var_8 == "link:[False]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_10.__len__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1690():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    linked_node_2 = module_0.LinkedNode(var_2)
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_3.checkInfinite()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1691():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    var_3.checkInfinite()


def test_case_1692():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_1 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_3 = linked_list_2.prepend(dict_1)
    assert len(linked_list_2) == 1
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    bool_2 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(bool_2)
    assert var_4 is False
    linked_node_3 = module_0.LinkedNode(var_4)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_6.__len__()
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1694():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_11 = linked_list_2.__iter__()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_list_6.__len__()
    assert var_19 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_20 = linked_list_7.remove(bytes_3)
    assert var_20 is False
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1695():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_1.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1697():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_node_6 = module_0.LinkedNode(complex_1)
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.prepend(bytes_1)
    assert len(linked_list_5) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.remove(linked_list_7)
    assert var_11 is False
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_10.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1698():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_6 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_7 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_9 = linked_list_3.remove(float_1)
    assert var_9 is False
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1699():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    var_13 = var_12.__iter__()
    module_0.LinkedList(*var_5)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1701():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, var_2)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_4, linked_list_5, bytes_2, linked_node_4]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 4
    var_8 = linked_list_6.__len__()
    assert var_8 == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_9, linked_list_8)
    assert len(linked_node_6.next) == 0
    var_10 = linked_list_8.__len__()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_8.checkInfinite()


def test_case_1702():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1703():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_3.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_6, linked_list_6, bytes_1, linked_node_6]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 4
    var_11 = linked_list_7.__len__()
    assert var_11 == 4
    var_12 = linked_list_7.__repr__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1704():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(bool_0)
    assert var_5 is False
    linked_node_2 = module_0.LinkedNode(var_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_9 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_12 = linked_list_9.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_9.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_8 = module_0.LinkedNode(var_11)
    assert linked_node_8.value == "link:[]"
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.prepend(bytes_1)
    assert len(linked_list_10) == 1
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_9 = module_0.LinkedNode(list_1)
    var_15 = linked_node_9.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_11.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_12.prepend(var_18)
    assert len(linked_list_12) == 1
    assert len(linked_node_10.value) == 1
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_20 = linked_list_13.__repr__()
    assert var_20 == "link:[]"
    bytes_3 = b"U"
    set_1 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_2 = [set_1, set_1]
    linked_node_11 = module_0.LinkedNode(list_2)
    var_21 = linked_node_11.checkInfinite()
    var_22 = var_20.__repr__()
    assert var_22 == "'link:[]'"
    var_23 = linked_list_13.__len__()
    assert var_23 == 0
    var_14.remove(var_21)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_node_3 = module_0.LinkedNode(var_8)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_10.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_3.__repr__()
    assert var_15 == "link:[]"
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_20 = linked_list_5.__repr__()
    assert var_20 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_0 = [set_0, set_0]
    linked_node_9 = module_0.LinkedNode(list_0)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_20.__repr__()
    assert var_22 == "'link:[]'"
    var_23 = linked_list_5.__len__()
    assert var_23 == 0
    var_24 = linked_list_2.__len__()
    assert var_24 == 0
    var_24.prepend(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    linked_node_4 = module_0.LinkedNode(var_7)
    assert linked_node_4.value == 0
    var_8 = var_6.__repr__()
    assert var_8 == "0"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_9 = linked_list_3.remove(float_0)
    assert var_9 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__iter__()
    var_18 = var_17.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_node_7.checkInfinite()
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    linked_node_8 = module_0.LinkedNode(var_22)
    assert linked_node_8.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_23 = linked_list_10.__repr__()
    assert var_23 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_3 = [set_0, set_0]
    linked_node_9 = module_0.LinkedNode(list_3)
    var_24 = linked_node_9.checkInfinite()
    var_25 = var_23.__repr__()
    assert var_25 == "'link:[]'"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_26 = linked_list_11.__iter__()
    var_11.remove(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__iter__()
    var_1.prepend(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_node_2 = module_0.LinkedNode(var_8)
    assert linked_node_2.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_3.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_4.value) == 1
    var_14 = var_11.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__repr__()
    linked_node_7 = module_0.LinkedNode(var_17)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_19 = linked_list_6.remove(linked_list_6)
    assert var_19 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_20 = linked_list_8.remove(float_0)
    assert var_20 is False
    var_21 = linked_list_8.__repr__()
    assert (
        var_21
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1709():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_1)
    var_3 = linked_node_1.checkInfinite()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_13)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.remove(linked_list_8)
    assert var_14 is False
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_11.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_8.prepend(linked_node_3)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1711():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    str_0 = "q\tM\ng2x(Y@O%I: "
    var_0.remove(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    bool_1 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_1}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__iter__()
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.prepend(bytes_2)
    assert len(linked_list_6) == 1
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_0.prepend(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bool_1 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.remove(bool_1)
    assert var_3 is False
    linked_node_2 = module_0.LinkedNode(var_3)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_1, set_1]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_2.prepend(var_7)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_11 = linked_list_4.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_4.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    var_16 = linked_list_6.__iter__()
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1715():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_node_5 = module_0.LinkedNode(var_8)
    assert linked_node_5.value == 0
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_6.checkInfinite()
    int_0 = 3723
    var_10 = linked_list_0.prepend(int_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_0.value) == 1
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1716():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    str_0 = "T*wU==LR0[uL\r~u2("
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(str_0)
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(float_0)
    assert var_2 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    assert var_8 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    bool_0 = True
    bytes_5 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_5}
    linked_node_8 = module_0.LinkedNode(set_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1718():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__iter__()
    var_2.pop()


def test_case_1719():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_12 = linked_list_1.prepend(bytes_3)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_13 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1721():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.remove(linked_list_2)
    assert var_1 is False
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_4.__len__()
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = -3423
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.remove(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    linked_node_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1724():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.prepend(none_type_0)


def test_case_1725():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(bool_0)
    assert var_3 is False
    linked_node_0 = module_0.LinkedNode(var_3)
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_2, bytes_1, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_5 = linked_list_3.__len__()
    assert var_5 == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_node_5 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1726():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_1)
    assert var_2 is False
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_node_3 = module_0.LinkedNode(complex_1)
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(bool_0)
    assert var_5 is False
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1727():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_4.next) == 0
    var_6 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_18 = var_17.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_19)
    var_2.remove(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1729():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(linked_list_6)
    assert var_12 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_8.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1730():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_5 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_10 = linked_list_4.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_4.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*var_11)
    assert len(linked_list_5) == 96
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_3 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_3)
    list_1 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.prepend(bytes_3)
    assert len(linked_list_6) == 3
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_8.__iter__()
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_5 = b""
    tuple_2 = (dict_0, bytes_5, bool_0)
    linked_node_10 = module_0.LinkedNode(tuple_2, bool_0)
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10.remove(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    var_3.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1733():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_7.prepend(var_9)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[False]"
    bool_0 = True
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.prepend(bool_0)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_1)
    var_16 = linked_node_7.checkInfinite()
    var_17 = var_15.__repr__()
    assert var_17 == "'link:[]'"
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_19 = linked_node_9.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__repr__()
    linked_node_10 = module_0.LinkedNode(var_21)
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    var_0.__len__()


def test_case_1735():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1736():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_1.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_4)
    assert len(linked_list_2) == 96
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_3, bytes_1, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    var_7 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = var_9.__repr__()
    assert var_10 == "\"'link:[]'\""
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_2.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_13 = linked_node_3.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_3.value) == 1
    var_15 = linked_list_6.__repr__()
    assert var_15 == "link:[False]"
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 4
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1737():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    linked_list_2 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_2) == 1
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bool_0 = True
    bytes_3 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_1 = {bool_0, bool_0, bool_0, bytes_3}
    linked_node_5 = module_0.LinkedNode(set_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_6.checkInfinite()
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"U"
    set_2 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_1 = [set_2, set_2]
    linked_node_9 = module_0.LinkedNode(list_1)
    var_10 = linked_node_9.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    bytes_5 = b"U"
    set_3 = {bytes_5, bytes_5, bytes_5, bytes_5}
    list_2 = [set_3, set_3]
    linked_node_10 = module_0.LinkedNode(list_2)
    var_12 = linked_node_10.checkInfinite()
    var_13 = var_11.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = linked_list_4.__len__()
    assert var_14 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_2 = None
    linked_node_11 = module_0.LinkedNode(none_type_2)
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1738():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1740():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.prepend(bytes_0)
    assert len(linked_list_1) == 3
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_9 = linked_list_2.remove(bytes_4)
    assert var_9 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_3 = None
    linked_node_7 = module_0.LinkedNode(none_type_3)
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    bytes_5 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_5)
    var_11 = linked_node_8.checkInfinite()
    var_12 = var_11.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_2.__len__()
    assert var_13 == 0
    var_13.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_7 = linked_list_1.__repr__()
    assert var_7 == "link:[False]"
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_14 = linked_list_4.__iter__()
    var_10.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    int_0 = -602
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(int_0)
    assert len(linked_list_0) == 1
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1743():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_4 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_4) == 1
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.prepend(bytes_2)
    assert len(linked_list_5) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_10 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_12, linked_list_9)
    assert len(linked_node_6.next) == 0
    var_13 = linked_list_9.__iter__()
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1744():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    var_9 = var_7.__repr__()
    assert var_9 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_10 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_11 = linked_list_7.remove(float_1)
    assert var_11 is False
    var_12 = linked_list_7.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_13, var_13)
    linked_node_7 = module_0.LinkedNode(var_14)
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_10.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_list_10.prepend(var_16)
    assert len(linked_list_10) == 1
    assert len(linked_node_11.value) == 1
    var_20 = var_17.__iter__()
    var_18.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1745():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    linked_list_3 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_3) == 1
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1746():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11, var_11)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_13 = linked_list_7.remove(float_0)
    assert var_13 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_15, linked_list_9)
    assert len(linked_node_11.next) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.__repr__()
    assert var_16 == "link:[]"
    var_5.remove(complex_2)


def test_case_1747():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1748():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_2 = linked_list_1.remove(bytes_0)
    assert var_2 is False
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_3.checkInfinite()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    bool_1 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.prepend(bool_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_8.next) == 0
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1749():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_2 = linked_list_3.remove(bytes_1)
    assert var_2 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.prepend(bytes_3)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_13 = linked_list_9.__iter__()
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1750():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_1, bytes_0, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    linked_list_5 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_5) == 1
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_6 = linked_list_6.remove(bool_0)
    assert var_6 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.__repr__()
    assert var_7 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_8 = linked_list_8.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_8.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == "link:[]"
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_9.prepend(var_10)
    assert len(linked_list_9) == 1
    assert len(linked_node_5.value) == 1
    var_14 = var_11.__iter__()
    bool_1 = False
    list_3 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 4
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_15, linked_list_11)
    assert len(linked_node_7.next) == 0
    var_16 = linked_list_11.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.remove(linked_list_12)
    var_18 = linked_list_12.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.__iter__()
    var_19.prepend(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(bool_0)
    assert var_3 is False
    linked_node_2 = module_0.LinkedNode(var_3)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    var_11.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1752():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_5.prepend(var_5)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[False]"
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_10.checkInfinite()
    var_12 = var_11.__repr__()
    complex_4 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_4)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_3.__repr__()
    assert var_13 == "link:[]"
    var_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_1753():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    var_0.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_2 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_5 = module_0.LinkedNode(var_6)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_10)
    var_1.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_2.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__repr__()
    assert var_5 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_6 = linked_list_6.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_6.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_5)
    assert linked_node_5.value == "link:[]"
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_7.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_10 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.prepend(bytes_3)
    assert len(linked_list_10) == 1
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    linked_node_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.remove(bool_0)
    assert var_4 is False
    linked_node_2 = module_0.LinkedNode(var_4)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_1 = True
    linked_node_4 = module_0.LinkedNode(bool_1)
    var_5 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    bool_2 = True
    linked_node_6 = module_0.LinkedNode(bool_2)
    var_9 = linked_node_6.checkInfinite()
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_0)
    var_10 = linked_node_7.checkInfinite()
    var_3.checkInfinite()


def test_case_1757():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_3.checkInfinite()
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1758():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__repr__()
    assert var_5 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    linked_node_4 = module_0.LinkedNode(var_12)
    assert linked_node_4.value == 0
    var_13 = var_11.__repr__()
    assert var_13 == "0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    linked_node_6 = module_0.LinkedNode(var_17)
    assert linked_node_6.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 4
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    dict_0 = {
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
    }
    var_18 = linked_list_12.prepend(dict_0)
    assert len(linked_list_12) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_19 = linked_list_13.prepend(dict_0)
    assert len(linked_list_13) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_node_9 = module_0.LinkedNode(complex_2)
    var_7.remove(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1760():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(linked_node_3)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = linked_list_3.remove(linked_list_3)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_18 = var_17.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_19 = linked_node_8.checkInfinite()
    var_20 = var_19.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_20.__len__()
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_1)
    var_23 = linked_node_11.checkInfinite()
    var_24 = var_23.__repr__()
    var_25 = var_23.__repr__()
    var_26 = var_23.__repr__()
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1761():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    var_0.remove(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.remove(linked_list_6)
    assert var_11 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_6.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.remove(linked_list_10)
    var_18 = var_17.__repr__()
    var_5.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_1 = module_0.LinkedNode(var_4)
    assert linked_node_1.value == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_4)
    assert len(linked_node_3.next) == 0
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(linked_list_5)
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(var_10)
    assert linked_node_6.value == 0
    var_11 = var_9.__repr__()
    assert var_11 == "0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.__repr__()
    assert var_13 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_0)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_13.__repr__()
    assert var_15 == "'link:[]'"
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1766():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_0.__iter__()
    var_8 = linked_list_1.remove(linked_list_1)
    assert var_8 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_13.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_17 = linked_list_6.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_node_7.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.remove(var_17)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_20 = linked_list_8.__repr__()
    assert var_20 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_0)
    var_21 = linked_node_8.checkInfinite()
    var_22 = var_20.__repr__()
    assert var_22 == "'link:[]'"
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_23 = linked_node_10.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_3)
    var_24 = linked_node_11.checkInfinite()
    var_25 = var_24.__repr__()
    var_26 = linked_list_10.__len__()
    assert var_26 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_27 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_8.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1767():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.prepend(var_5)
    assert len(linked_list_4) == 1
    assert len(linked_node_4.value) == 1
    var_9 = var_6.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.remove(linked_list_6)
    assert var_13 is False
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1768():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1769():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_6 = linked_node_4.checkInfinite()
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_7 = linked_list_3.remove(float_1)
    assert var_7 is False
    var_8 = linked_list_3.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_8.remove(bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7, linked_list_5)
    assert len(linked_node_4.next) == 0
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 3
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_node_6.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    var_15 = linked_list_11.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_16 = linked_list_12.__repr__()
    assert var_16 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_2)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_16.__repr__()
    assert var_18 == "'link:[]'"
    linked_list_13 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_13) == 1
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_2, bytes_2]
    linked_list_15 = module_0.LinkedList(*list_3)
    assert len(linked_list_15) == 2
    var_19 = linked_list_15.remove(float_0)
    assert var_19 is False
    var_20 = linked_list_15.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1771():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    var_7 = var_6.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1772():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = var_2.__repr__()
    assert var_4 == "0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.remove(var_7)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_6.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_13 = linked_node_3.checkInfinite()
    var_14 = linked_node_3.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__iter__()
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.prepend(bytes_1)
    assert len(linked_list_9) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_18 = linked_node_4.checkInfinite()
    var_19 = var_18.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_20 = linked_list_7.__iter__()
    var_20.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_6, var_6)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_8 = linked_node_8.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_9.value) == 1
    var_12 = linked_list_3.__repr__()
    assert var_12 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_5.__len__()
    assert var_15 == 0
    var_16 = linked_list_5.__len__()
    assert var_16 == 0
    linked_node_11 = module_0.LinkedNode(var_16)
    assert linked_node_11.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == 0
    var_8 = var_6.__repr__()
    assert var_8 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_0, set_0]
    linked_node_6 = module_0.LinkedNode(list_0)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    linked_list_5 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_5) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_node_8 = module_0.LinkedNode(complex_1)
    list_1 = []
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 0
    var_9.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_4 = module_0.LinkedNode(var_7)
    var_3.prepend(linked_node_1)


def test_case_1776():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_1, set_1]
    linked_node_2 = module_0.LinkedNode(list_1)
    var_10 = linked_node_2.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_node_3.checkInfinite()
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.__iter__()
    var_16 = linked_list_6.remove(linked_list_6)
    assert var_16 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_17 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_17, linked_list_7)
    assert len(linked_node_5.next) == 0
    bool_0 = False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_18 = linked_list_8.remove(bool_0)
    linked_node_6 = module_0.LinkedNode(var_18)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_19 = linked_list_10.__repr__()
    assert var_19 == "link:[]"
    var_20 = linked_node_8.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_21 = linked_list_11.remove(var_19)
    with pytest.raises(Exception):
        linked_list_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1777():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_2.prepend(var_0)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_4 = var_1.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(var_8, linked_node_5)
    var_8.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1778():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_4.__iter__()
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(bool_0)
    assert var_6 is False
    linked_node_4 = module_0.LinkedNode(var_6)
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1779():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_10 = var_7.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_11 = linked_list_4.remove(linked_list_4)
    assert var_11 is False
    list_0 = []
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_7.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    module_0.LinkedList(*linked_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = linked_list_1.__len__()
    assert var_7 == 0
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[]"
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_1)
    assert var_11 is False
    var_12 = linked_list_6.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_12)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__iter__()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_3 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_3)
    list_2 = [str_0, tuple_1]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_16.checkInfinite()


def test_case_1782():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1783():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = linked_node_2.checkInfinite()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    var_9 = var_8.__iter__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_1 = (str_0, bytes_2, list_0)
    list_1 = [tuple_1, list_0, str_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 3
    var_10 = linked_list_5.__repr__()
    assert (
        var_10
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    linked_node_8 = module_0.LinkedNode(var_14)
    assert linked_node_8.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    set_0 = {linked_list_6, linked_list_9}
    var_14.prepend(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__len__()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_1, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_9 = linked_list_4.__len__()
    assert var_9 == 4
    var_10 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_11, var_11)
    linked_node_6 = module_0.LinkedNode(var_12)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1786():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__iter__()
    var_14 = var_13.__iter__()
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_10.prepend(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_4)
    assert len(linked_node_2.next) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_5, bytes_1, linked_node_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    var_6 = linked_list_6.__len__()
    assert var_6 == 4
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_7 = linked_node_4.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(linked_list_7)
    assert var_10 is False
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1788():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    assert var_2 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_7 = linked_list_2.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_2.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_8)
    assert len(linked_list_3) == 96
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1790():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.remove(linked_list_2)
    assert var_0 is False
    var_1 = linked_list_2.__len__()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    linked_node_1 = module_0.LinkedNode(var_6)
    assert linked_node_1.value == 0
    var_7 = var_5.__repr__()
    assert var_7 == "0"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    var_15 = var_12.__repr__()
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1791():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_3.__len__()
    assert var_2 == 0
    var_3 = linked_list_3.__iter__()
    linked_node_3 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    var_5 = linked_list_5.__repr__()
    assert var_5 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_6 = linked_list_6.remove(float_0)
    assert var_6 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_7, var_7)
    linked_node_8 = module_0.LinkedNode(var_8)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_9 = linked_list_8.prepend(bytes_1)
    assert len(linked_list_8) == 3
    var_3.remove(linked_list_7)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_2.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.remove(var_2)
    assert var_5 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[False]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_7 = linked_list_1.__iter__()
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_5.prepend(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(bool_0)
    assert var_4 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_node_4 = module_0.LinkedNode(complex_2)
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(linked_node_6)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_6, linked_list_5)
    assert len(linked_node_8.next) == 0
    var_7 = linked_list_5.__iter__()
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_8 = linked_node_10.checkInfinite()
    var_9 = linked_node_10.checkInfinite()
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    var_11 = linked_list_7.__iter__()
    var_12 = var_11.__iter__()
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_13 = linked_node_11.checkInfinite()
    var_14 = linked_node_11.checkInfinite()
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_16 = linked_list_12.__iter__()
    var_17 = var_12.__iter__()
    var_17.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1795():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_6)
    assert linked_node_2.value == "link:[]"
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_1)
    assert var_9 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_4, linked_list_8, bytes_2, linked_node_4]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 4
    var_12 = linked_list_9.__len__()
    assert var_12 == 4
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_3 = []
    tuple_0 = (str_0, bytes_3, list_3)
    list_4 = [tuple_0, list_3, str_0]
    linked_list_10 = module_0.LinkedList(*list_4)
    assert len(linked_list_10) == 3
    var_13 = linked_list_10.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_9.prepend(list_3)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, linked_list_2)
    assert len(linked_node_3.next) == 0
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(bool_0)
    assert var_8 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.__iter__()
    var_13 = linked_list_4.__len__()
    assert var_13 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_6.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_7.prepend(var_15)
    assert len(linked_list_7) == 1
    assert len(linked_node_7.value) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_19 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_20 = linked_list_8.__repr__()
    assert var_20 == "link:[{link:[{...}]: link:[{...}]}]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_0)
    linked_node_9 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_11 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_21 = linked_list_9.prepend(linked_node_11)
    assert len(linked_list_9) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_4.__iter__()


def test_case_1797():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.prepend(var_0)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_4 = var_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_node_4 = module_0.LinkedNode(var_8)
    assert linked_node_4.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_4, bytes_1, linked_node_5]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_10 = linked_list_5.__len__()
    assert var_10 == 4
    var_11 = linked_list_5.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_1 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_12 = linked_node_6.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_node_9.checkInfinite()
    with pytest.raises(Exception):
        linked_list_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1798():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_2, bytes_0, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    var_5 = linked_list_3.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_7 = var_6.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_2.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(bool_0)
    assert var_10 is False
    linked_node_5 = module_0.LinkedNode(var_10)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1799():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1800():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_2.next) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_7 = var_4.__iter__()
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1801():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_1.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_6.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    var_13 = linked_list_3.__len__()
    assert var_13 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_15 = linked_node_5.checkInfinite()
    var_16 = var_15.__repr__()
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 4
    complex_0 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_17 = linked_list_6.remove(none_type_0)
    assert var_17 is False
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1802():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_1.__repr__()
    assert var_8 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    linked_node_7 = module_0.LinkedNode(var_15, linked_node_6)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    linked_node_9 = module_0.LinkedNode(var_19)
    assert linked_node_9.value == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_11 = module_0.LinkedList(*list_0)
    assert len(linked_list_11) == 2
    var_20 = linked_list_11.remove(float_0)
    assert var_20 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_21 = linked_list_12.__len__()
    assert var_21 == 0
    var_4.prepend(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.remove(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    linked_node_4 = module_0.LinkedNode(var_11)
    assert (
        f"{type(linked_node_4.value).__module__}.{type(linked_node_4.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_8.prepend(var_14)
    assert len(linked_list_8) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(var_15, linked_node_5)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_16, linked_list_9)
    assert len(linked_node_8.next) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__repr__()
    assert var_17 == "link:[]"
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_18 = linked_list_11.remove(float_1)
    assert var_18 is False
    var_19 = linked_list_11.__repr__()
    assert (
        var_19
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_9 = module_0.LinkedNode(var_17)
    assert linked_node_9.value == "link:[]"
    var_19.remove(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    var_2.prepend(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, var_4)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_6 = linked_list_4.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_4.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_5 = module_0.LinkedNode(var_10)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_13 = linked_list_6.remove(float_1)
    assert var_13 is False
    var_14 = linked_list_6.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_12)
    assert linked_node_6.value == "link:[]"
    var_0.prepend(linked_node_5)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_0.prepend(var_2)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_6 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    var_11 = linked_list_2.remove(var_8)
    assert var_11 is False
    var_3.prepend(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = var_8.__iter__()
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_4.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.remove(var_6)
    assert var_8 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_5.__iter__()
    var_6.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.prepend(var_1)
    assert len(linked_list_1) == 1
    assert len(linked_node_2.value) == 1
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1811():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_5, linked_list_3)
    assert len(linked_node_3.next) == 0
    var_6 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    none_type_1 = None
    var_13 = linked_list_6.remove(none_type_1)
    assert var_13 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1813():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_4 = linked_list_3.remove(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.remove(var_8)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_11 = linked_list_9.remove(float_0)
    assert var_11 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.__len__()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_11)
    assert len(linked_node_8.next) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_8.prepend(var_4)
    assert len(linked_list_8) == 1
    var_15.prepend(linked_list_10)


def test_case_1814():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_1 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_1, bytes_0, linked_node_3]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.prepend(bytes_2)
    assert len(linked_list_4) == 1


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    linked_node_2 = module_0.LinkedNode(var_5)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_node_4 = module_0.LinkedNode(var_10)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_11)
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_1)
    assert var_12 is False
    var_13 = linked_list_6.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_13)
    assert len(linked_list_7) == 96
    float_2 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_4, bytes_4]
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 2
    var_14 = linked_list_8.remove(float_2)
    assert var_14 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_11.prepend(var_18)
    assert len(linked_list_11) == 1
    assert len(linked_node_8.value) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_20 = linked_list_12.remove(linked_list_12)
    assert var_20 is False
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_15)
    assert len(linked_node_9.value) == 0
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_node_9.checkInfinite()
    var_23 = linked_list_15.__len__()
    assert var_23 == 0
    var_24 = linked_list_14.__iter__()
    var_18.remove(bytes_3)


def test_case_1816():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.remove(var_3)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_2 = (dict_0, bytes_1, bool_0)
    linked_node_2 = module_0.LinkedNode(tuple_2, bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_3, linked_list_4, bytes_2, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_8 = linked_list_5.__len__()
    assert var_8 == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_10 = linked_list_8.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_8.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_9 = module_0.LinkedList(*var_11)
    assert len(linked_list_9) == 96
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.__repr__()
    assert var_12 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_3 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_3)
    var_13 = linked_node_4.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1817():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.prepend(linked_node_7)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_node_9.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_9.__iter__()
    var_19 = linked_list_10.remove(linked_list_10)
    assert var_19 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19.remove(complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_5.prepend(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.remove(var_8)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_6.__iter__()
    var_12.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1820():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    linked_node_6 = module_0.LinkedNode(var_13)
    assert linked_node_6.value == 0
    var_14 = var_12.__repr__()
    assert var_14 == "0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_15, var_15)
    linked_node_9 = module_0.LinkedNode(var_16)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_node_10.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_11 = module_0.LinkedNode(complex_2)
    var_19 = linked_list_10.__iter__()
    bool_0 = False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_20 = linked_list_11.remove(bool_0)
    assert var_20 is False
    linked_node_12 = module_0.LinkedNode(var_20)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_12 = module_0.LinkedList(*list_0)
    assert len(linked_list_12) == 1
    var_21 = linked_list_12.pop()
    assert var_21 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_12) == 0
    var_22 = var_21.__iter__()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_13.value) == 0
    var_23 = linked_node_13.checkInfinite()
    var_24 = linked_node_13.checkInfinite()
    var_25 = linked_list_14.__len__()
    assert var_25 == 0
    var_26 = linked_list_14.__len__()
    assert var_26 == 0
    linked_node_14 = module_0.LinkedNode(var_26)
    assert linked_node_14.value == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    var_3.remove(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_7.__iter__()
    bool_0 = False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.remove(bool_0)
    assert var_11 is False
    linked_node_7 = module_0.LinkedNode(var_11)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 1
    var_12 = linked_list_9.pop()
    assert var_12 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_9) == 0
    var_13 = var_12.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_list_11.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__iter__()
    var_18 = linked_list_11.remove(linked_list_11)
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.remove(var_3)
    assert var_6 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_1.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    linked_node_4 = module_0.LinkedNode(var_12)
    assert linked_node_4.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    var_15 = linked_node_6.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_8.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_20 = linked_list_10.__repr__()
    assert var_20 == "link:[]"
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_8.value) == 0
    var_23 = linked_node_8.checkInfinite()
    var_24 = linked_node_8.checkInfinite()
    var_25 = linked_list_12.__len__()
    assert var_25 == 0
    var_26 = linked_list_12.__len__()
    assert var_26 == 0
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1823():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    var_0.remove(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_3 = linked_node_5.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_3.prepend(var_3)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_4 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_4)
    list_1 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    float_1 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_5, bytes_5]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_1)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    module_0.LinkedList(*var_7)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_3.prepend(var_8)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    var_12 = var_9.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.remove(linked_list_5)
    assert var_14 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_15 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    var_18 = linked_list_7.prepend(var_16)
    assert len(linked_list_7) == 1
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    var_10.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_5 = linked_list_2.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_list_3.prepend(linked_node_6)
    assert len(linked_list_3) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_9 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_10 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    bool_0 = False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(bool_0)
    assert var_13 is False
    str_1 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_2 = (str_1, bytes_2, list_1)
    list_2 = [tuple_2, list_1, str_1]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 3
    var_14 = linked_list_8.__repr__()
    assert (
        var_14
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_14.prepend(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_4 = linked_list_4.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_4.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_7.__len__()
    assert var_8 == 0
    var_9 = linked_list_7.__iter__()
    linked_node_4 = module_0.LinkedNode(var_9)
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1829():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_10 = var_7.__repr__()
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_11 = linked_node_3.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_14 = linked_list_5.remove(var_12)
    assert var_14 is False
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_5.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_18 = linked_list_6.__iter__()
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    linked_node_4 = module_0.LinkedNode(var_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_5.checkInfinite()
    var_2 = var_1.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_2 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_3 = linked_list_4.remove(linked_list_4)
    assert var_3 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    bool_1 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1833():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_2 = linked_list_4.remove(linked_list_4)
    assert var_2 is False
    var_3 = linked_list_4.__len__()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_4 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_5 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_7.prepend(var_6)
    assert len(linked_list_7) == 1
    assert len(linked_node_4.value) == 1
    var_10 = var_7.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_node_6 = module_0.LinkedNode(complex_2)
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1834():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_6 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.remove(dict_0)
    assert var_8 is True
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    bool_1 = True
    linked_node_3 = module_0.LinkedNode(bool_1)
    var_9 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_11, var_11)
    linked_node_9 = module_0.LinkedNode(var_12)
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = var_5.__iter__()
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1835():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 3
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(var_6)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_0)
    assert var_9 is False
    var_10 = linked_list_6.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1836():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    var_6.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_1 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 3
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    var_11 = linked_list_5.remove(linked_list_5)
    assert var_11 is False
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(bool_0)
    linked_node_2 = module_0.LinkedNode(var_12)
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1838():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1839():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.remove(float_0)
    assert var_2 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(bool_0)
    assert var_5 is False
    linked_node_2 = module_0.LinkedNode(var_5)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_1)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    linked_node_9 = module_0.LinkedNode(none_type_1)
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1840():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_node_4 = module_0.LinkedNode(var_6)
    assert linked_node_4.value == 0
    var_7 = var_5.__repr__()
    assert var_7 == "0"
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.prepend(linked_node_8)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_9 = linked_list_6.remove(bytes_1)
    assert var_9 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_10 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_10)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_11 = linked_node_12.checkInfinite()
    var_12 = linked_node_12.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_8.__iter__()
    var_15 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_13.value) == 0
    var_16 = linked_node_13.checkInfinite()
    var_17 = linked_node_13.checkInfinite()
    var_18 = linked_list_11.__len__()
    assert var_18 == 0
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_14 = module_0.LinkedNode(bytes_2)
    var_20 = linked_node_14.checkInfinite()
    var_21 = var_20.__repr__()
    int_0 = -3856
    dict_0 = {
        linked_node_4: var_17,
        var_15: linked_node_8,
        linked_list_2: linked_node_10,
        var_20: int_0,
    }
    var_17.remove(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5.prepend(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    bool_0 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.prepend(bool_0)
    assert len(linked_list_3) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_6 = linked_list_3.remove(bytes_2)
    assert var_6 is False
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    complex_2 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_2)
    str_1 = "2z8Y!\rS\\wS1L"
    bytes_5 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_2 = (str_1, bytes_5, list_1)
    list_2 = [tuple_2, list_1, str_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 3
    var_13 = linked_list_5.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_6 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_6)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    bytes_7 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_7)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    var_21 = var_19.__len__()
    var_12.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1844():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.remove(var_6)
    var_10 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_11 = linked_node_2.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_13 = linked_node_3.checkInfinite()
    var_14 = linked_node_3.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.remove(var_14)
    var_12.remove(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    linked_node_2 = module_0.LinkedNode(var_4)
    assert linked_node_2.value == 0
    var_5 = var_3.__repr__()
    assert var_5 == "0"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_10.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1846():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_1, bytes_1, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_2 = [bytes_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 1
    list_3 = [linked_node_3, list_2, bytes_2, linked_node_3]
    list_4 = [list_3, list_2, list_2, list_2]
    linked_list_4 = module_0.LinkedList(*list_4)
    assert len(linked_list_4) == 4
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_3, var_3)
    linked_node_6 = module_0.LinkedNode(var_4)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_4.remove(linked_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(linked_node_4)
    assert len(linked_list_2) == 1
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    var_3 = linked_node_0.checkInfinite()
    var_3.prepend(complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    var_1.prepend(linked_list_1)


def test_case_1849():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = var_5.__repr__()
    assert var_6 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    var_11 = var_10.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.remove(linked_list_4)
    assert var_12 is False
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    linked_node_7 = module_0.LinkedNode(var_18)
    assert linked_node_7.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 1
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_19 = linked_list_9.prepend(bytes_1)
    assert len(linked_list_9) == 1
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_list_10.__repr__()
    assert var_22 == "link:[]"
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0


@pytest.mark.xfail(strict=True)
def test_case_1850():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    var_17 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_18 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_19 = linked_list_9.__repr__()
    assert var_19 == "link:[{link:[{...}]: link:[{...}]}]"
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_20 = linked_node_5.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_21 = linked_node_6.checkInfinite()
    var_22 = linked_node_6.checkInfinite()
    var_23 = linked_list_10.prepend(var_21)
    assert len(linked_list_10) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_13 = module_0.LinkedList(*list_0)
    assert len(linked_list_13) == 2
    var_24 = linked_list_13.remove(float_0)
    assert var_24 is False
    var_25 = linked_list_13.__repr__()
    assert (
        var_25
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_26 = linked_list_14.__repr__()
    assert var_26 == "link:[]"
    bytes_3 = b"U"
    set_0 = {bytes_3, bytes_3, bytes_3, bytes_3}
    list_1 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_1)
    var_27 = linked_node_7.checkInfinite()
    var_28 = var_26.__repr__()
    assert var_28 == "'link:[]'"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1851():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_4.value) == 1
    var_6 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 3
    var_11 = linked_list_4.__repr__()
    assert (
        var_11
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_6.__repr__()
    assert var_17 == "link:[]"
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_1 = (dict_0, bytes_2, bool_0)
    linked_node_7 = module_0.LinkedNode(tuple_1, bool_0)
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_18 = linked_list_8.prepend(bytes_3)
    assert len(linked_list_8) == 1
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_4]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 1
    var_19 = linked_list_9.pop()
    assert var_19 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_9) == 0
    var_20 = var_19.__iter__()
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    none_type_0 = None
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_0.prepend(none_type_0)


def test_case_1853():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1854():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    assert var_6 is False
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_3.next) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    linked_node_6 = module_0.LinkedNode(var_11)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_3 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_3)
    list_1 = [str_0, tuple_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_12 = linked_node_9.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_6.remove(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    var_0.prepend(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_4.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    var_5.remove(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__len__()
    assert var_3 == 58
    none_type_0 = None
    str_0 = "K/,eHMOiR"
    dict_0 = {str_0: str_0}
    list_0 = [str_0, dict_0, dict_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 3
    var_4 = linked_list_1.prepend(none_type_0)
    assert len(linked_list_1) == 4
    var_4.__len__()


def test_case_1858():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.__iter__()
    var_2 = var_1.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_2.__repr__()
    assert var_9 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = var_10.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.__iter__()
    with pytest.raises(Exception):
        linked_list_6.pop()


def test_case_1859():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_1 = linked_list_0.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_3 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.remove(dict_0)
    assert var_5 is True
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_6 = linked_list_3.remove(bytes_1)
    assert var_6 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    linked_node_5 = module_0.LinkedNode(var_14)
    assert linked_node_5.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    bytes_3 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_3]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 1
    list_2 = [linked_node_8, list_1, bytes_3, linked_node_8]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_11 = module_0.LinkedList(*list_3)
    assert len(linked_list_11) == 4
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1860():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(list_0)
    assert var_2 is False
    var_2.prepend(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = var_13.__repr__()
    assert var_15 == "\"'link:[]'\""
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_16 = linked_node_4.checkInfinite()
    var_17 = linked_node_4.checkInfinite()
    var_18 = linked_list_8.__len__()
    assert var_18 == 0
    var_19 = linked_list_8.__len__()
    assert var_19 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.remove(linked_list_9)
    assert var_20 is False
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_22 = linked_node_5.checkInfinite()
    var_23 = linked_list_10.__repr__()
    assert var_23 == "link:[]"
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, var_23)
    assert linked_node_6.next == "link:[]"
    var_11.prepend(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_5 = linked_list_3.remove(bytes_0)
    assert var_5 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_12.prepend(linked_list_2)


def test_case_1864():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1865():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, var_5)
    assert linked_node_4.next == "link:[]"
    var_5.prepend(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bool_0 = True
    bool_1 = False
    complex_0 = 48.559153 + 1425.010024j
    list_0 = [bool_1, bool_1, bool_1, complex_0]
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(list_0)
    assert var_0 is False
    var_0.prepend(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_node_5.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_5.prepend(var_11)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    var_15 = var_12.__iter__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_8.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    var_19 = linked_list_6.prepend(var_16)
    assert len(linked_list_6) == 1
    assert len(linked_node_9.value) == 1
    var_7.prepend(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_4 = module_0.LinkedNode(var_5)
    assert linked_node_4.value == 0
    var_6 = var_4.__repr__()
    assert var_6 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_5 = module_0.LinkedNode(var_7)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    var_0.prepend(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_node_5 = module_0.LinkedNode(none_type_0)
    var_0.remove(linked_list_4)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__repr__()
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 1
    list_2 = [linked_node_5, list_1, bytes_2, linked_node_5]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_7 = linked_list_4.remove(bytes_3)
    assert var_7 is False
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_4 = [bytes_4]
    linked_list_5 = module_0.LinkedList(*list_4)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.pop()
    assert var_8 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_9 = var_8.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_5)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    bytes_6 = b"U"
    set_1 = {bytes_6, bytes_6, bytes_6, bytes_6}
    list_5 = [set_1, set_1]
    linked_node_9 = module_0.LinkedNode(list_5)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_12.__repr__()
    assert var_14 == "'link:[]'"
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_0, bytes_1, linked_node_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(var_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(linked_list_4)
    assert var_6 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    linked_list_7 = module_0.LinkedList(*bytes_2)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_5, linked_list_8, bytes_3, linked_node_5]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 4
    var_12 = linked_list_9.__len__()
    assert var_12 == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_13 = linked_list_10.__repr__()
    assert var_13 == "link:[]"
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_4, bytes_4]
    linked_list_11 = module_0.LinkedList(*list_3)
    assert len(linked_list_11) == 2
    var_14 = linked_list_11.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_11.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_13)
    assert linked_node_6.value == "link:[]"
    var_9.prepend(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    var_8 = var_7.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.remove(linked_list_2)
    assert var_9 is False
    var_10 = linked_list_2.__len__()
    assert var_10 == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_11 = linked_list_3.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_13 = linked_list_4.remove(linked_list_4)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_16 = linked_list_5.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_node_4.checkInfinite()
    var_6.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_3 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_2 = module_0.LinkedNode(var_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_10, var_10)
    linked_node_6 = module_0.LinkedNode(var_11)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = var_12.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_list_11.prepend(var_15)
    assert len(linked_list_11) == 1
    assert len(linked_node_10.value) == 1
    var_19 = linked_list_11.__repr__()
    assert var_19 == "link:[False]"
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0)
    linked_node_12 = module_0.LinkedNode(none_type_0)
    var_14.pop()


@pytest.mark.xfail(strict=True)
def test_case_1874():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_6 = module_0.LinkedNode(var_10)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_12, var_12)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_6.__repr__()
    assert var_16 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 2
    var_17 = linked_list_9.remove(float_1)
    assert var_17 is False
    var_18 = linked_list_9.__repr__()
    assert (
        var_18
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1875():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.remove(var_9)
    assert var_12 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_node_5.checkInfinite()
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_node_4 = module_0.LinkedNode(var_4)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_6, var_6)
    linked_node_7 = module_0.LinkedNode(var_7)
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.remove(bool_0)
    assert var_8 is False
    linked_node_8 = module_0.LinkedNode(var_8)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_9 = linked_node_9.checkInfinite()
    var_10 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_9, var_9)
    var_0.remove(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_5 = linked_list_3.remove(none_type_0)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_3.prepend(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    linked_node_2 = module_0.LinkedNode(var_4)
    var_2.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_node_4 = module_0.LinkedNode(var_6)
    assert linked_node_4.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_7 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_5 = module_0.LinkedNode(var_7)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_8.prepend(var_11)
    assert len(linked_list_8) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(var_12, linked_node_7)
    var_6.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1880():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1881():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.remove(var_5)
    assert var_8 is False
    var_9 = linked_list_5.__iter__()
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_2 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_2)
    var_10 = linked_node_3.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_16.__len__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.remove(linked_list_7)
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_21 = linked_node_8.checkInfinite()
    var_22 = linked_list_8.__repr__()
    assert var_22 == "link:[]"
    none_type_2 = None
    linked_node_9 = module_0.LinkedNode(none_type_2, var_22)
    assert linked_node_9.next == "link:[]"
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_23 = linked_list_9.remove(linked_list_9)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    var_15.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.remove(float_1)
    assert var_9 is False
    var_10 = linked_list_5.__iter__()
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1883():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    var_6 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_7 = linked_list_2.remove(linked_list_2)
    var_8 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 2
    assert len(linked_node_1.value) == 2
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1884():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_node_2 = module_0.LinkedNode(var_5)
    assert linked_node_2.value == 0
    var_6 = var_4.__repr__()
    assert var_6 == "0"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_7 = linked_node_3.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_8 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.remove(float_0)
    assert var_9 is False
    var_10 = linked_list_5.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_6.__iter__()
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, linked_list_1)
    assert len(linked_node_3.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    var_10 = var_9.__iter__()
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.remove(bool_0)
    assert var_11 is False
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_6.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_14 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_14.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 3
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = 3196
    module_0.LinkedList(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    object_0 = module_1.object()
    var_9.remove(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.remove(linked_list_1)
    assert var_3 is False
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_5 = linked_node_0.checkInfinite()
    assert var_5 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_2, bytes_0, linked_node_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_6 = linked_list_3.__len__()
    assert var_6 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    var_2.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_1 = None
    var_9 = linked_list_1.remove(none_type_1)
    assert var_9 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2)
    var_10 = linked_list_2.__repr__()
    assert var_10 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_11 = linked_list_3.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_3.__iter__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    var_8 = var_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.prepend(bytes_2)
    assert len(linked_list_5) == 3
    var_6.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1892():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1893():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_0 = module_0.LinkedNode(var_0)
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__repr__()
    assert var_4 == "'link:[]'"
    var_5 = var_4.__repr__()
    assert var_5 == "\"'link:[]'\""
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_7)
    assert len(linked_list_4) == 96
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_2, bytes_2, bytes_2, bytes_2}
    linked_node_3 = module_0.LinkedNode(set_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    assert var_11 is False
    linked_node_6 = module_0.LinkedNode(var_11, linked_list_7)
    assert len(linked_node_6.next) == 0
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_1)
    assert var_13 is False
    var_14 = linked_list_8.__iter__()
    var_11.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1894():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 1
    list_1 = [linked_node_2, list_0, bytes_0, linked_node_2]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_2, bytes_0, bytes_0, bytes_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_5.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_4.prepend(var_3)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_7 = var_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_3, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 3
    var_13 = linked_list_8.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    linked_node_11 = module_0.LinkedNode(var_17)
    assert linked_node_11.value == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_18 = linked_list_11.__repr__()
    assert var_18 == "link:[]"
    bytes_4 = b"U"
    set_1 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_2 = [set_1, set_1]
    linked_node_12 = module_0.LinkedNode(list_2)
    var_19 = linked_node_12.checkInfinite()
    var_20 = var_18.__repr__()
    assert var_20 == "'link:[]'"
    linked_list_12 = module_0.LinkedList(*bytes_4)
    assert len(linked_list_12) == 1
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1896():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_3 = module_0.LinkedNode(var_6)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_2.prepend(var_8)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_12 = linked_list_2.__repr__()
    assert var_12 == "link:[False]"
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1897():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_node_3 = module_0.LinkedNode(var_4)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__iter__()
    bool_0 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(bool_0)
    assert var_7 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_1 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_8 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.prepend(dict_1)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.remove(dict_1)
    assert var_10 is True
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_15 = linked_list_9.remove(float_0)
    assert var_15 is False
    var_16 = linked_list_9.__repr__()
    assert (
        var_16
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_9.prepend(linked_list_5)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = var_1.__iter__()
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_0 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_0 = module_0.LinkedNode(var_0)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_3.__len__()
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(bool_0)
    assert var_2 is False
    linked_node_0 = module_0.LinkedNode(var_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_3 = linked_list_2.remove(none_type_0)
    assert var_3 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1901():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(linked_node_5)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_5 = linked_node_6.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_6, linked_list_3, bytes_0, linked_node_6]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_6 = linked_list_4.__len__()
    assert var_6 == 4
    linked_node_7 = module_0.LinkedNode(bytes_0, linked_node_6)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = var_12.__repr__()
    assert var_13 == "\"'link:[]'\""
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_14 = linked_list_8.remove(float_0)
    assert var_14 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(linked_list_9)
    assert var_15 is False
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_17 = linked_node_9.checkInfinite()
    var_18 = linked_list_10.__repr__()
    assert var_18 == "link:[]"
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0, var_18)
    assert linked_node_10.next == "link:[]"
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_19 = linked_list_11.remove(float_1)
    assert var_19 is False
    var_20 = linked_list_11.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_21 = linked_list_12.__iter__()
    var_10.remove(linked_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_6 = module_0.LinkedNode(var_8)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_3.prepend(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    module_0.LinkedList(*var_11)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_5 = module_0.LinkedNode(var_11)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_13 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_1, bytes_2, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    linked_node_8 = module_0.LinkedNode(var_17)
    assert linked_node_8.value == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_3]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 1
    var_18 = linked_list_8.pop()
    assert var_18 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_8) == 0
    var_19 = var_18.__iter__()
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    module_0.LinkedList(*var_17)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.remove(var_5)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.__len__()
    assert var_12 == 0
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1906():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_1)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_1)
    bool_2 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(bool_2)
    linked_node_1 = module_0.LinkedNode(var_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_6.__len__()
    assert var_6 == 0
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    linked_node_5 = module_0.LinkedNode(var_7)
    assert linked_node_5.value == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_1]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 1
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 1
    list_1 = [linked_node_6, list_0, bytes_1, linked_node_6]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_2, bytes_2]
    linked_list_11 = module_0.LinkedList(*list_3)
    assert len(linked_list_11) == 2
    var_8 = linked_list_11.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_11.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    bool_3 = False
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_10 = linked_list_13.remove(bool_3)
    var_7.checkInfinite()


def test_case_1907():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1908():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1909():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_1)
    assert len(linked_node_3.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = var_10.__repr__()
    assert var_11 == "\"'link:[]'\""
    var_12 = var_10.__repr__()
    assert var_12 == "\"'link:[]'\""
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    var_16 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_17 = linked_list_8.remove(bytes_1)
    assert var_17 is False
    var_12.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_2.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == "link:[]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_14 = linked_list_7.remove(float_1)
    assert var_14 is False
    var_15 = linked_list_7.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_4)
    var_17 = linked_node_8.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    bytes_5 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_5)
    var_20 = linked_node_9.checkInfinite()
    var_21 = var_20.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_list_10.prepend(var_20)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    var_24 = var_21.__iter__()
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1911():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_6)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_9.value) == 0
    var_9 = linked_node_9.checkInfinite()
    var_10 = linked_list_3.__repr__()
    assert var_10 == "link:[]"
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1912():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_3.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_2)
    assert len(linked_node_5.next) == 0
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_7 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_8 = linked_node_6.checkInfinite()
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.remove(var_9)
    assert var_12 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_node_7.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_0)
    var_15 = linked_list_7.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_node_10.checkInfinite()
    var_20 = linked_list_9.__repr__()
    assert var_20 == "link:[]"
    var_21 = linked_list_10.prepend(var_20)
    assert len(linked_list_10) == 1
    assert len(linked_node_10.value) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_11 = module_0.LinkedNode(bytes_1)
    var_22 = linked_node_11.checkInfinite()
    var_23 = var_22.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_2)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_3)
    linked_node_14 = module_0.LinkedNode(complex_3)
    var_7.remove(linked_list_3)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_5 = linked_node_2.checkInfinite()
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    var_2.prepend(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_4.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_1, bytes_1, linked_node_5]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_5 = linked_list_2.__len__()
    assert var_5 == 4
    bool_0 = False
    linked_node_6 = module_0.LinkedNode(bool_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_3.prepend(var_6)
    assert len(linked_list_3) == 1
    assert len(linked_node_8.value) == 1
    var_10 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 2
    var_11 = linked_list_5.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_5.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.remove(linked_list_6)
    assert var_13 is False
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    bool_1 = True
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.prepend(bool_1)
    assert len(linked_list_7) == 1
    var_7.prepend(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_node_3)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_11, linked_list_7)
    assert len(linked_node_7.next) == 0
    var_12 = linked_list_7.__iter__()
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1916():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_6 = linked_list_5.prepend(bytes_1)
    assert len(linked_list_5) == 3
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1917():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(bool_0)
    assert var_1 is False
    linked_node_0 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1918():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    var_1.remove(var_4)


def test_case_1919():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_2 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_6.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    with pytest.raises(Exception):
        linked_list_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1920():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_2.__iter__()
    var_10 = linked_list_3.remove(linked_list_3)
    assert var_10 is False
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_1 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_14 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_15 = linked_list_5.prepend(dict_1)
    assert len(linked_list_5) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_16 = linked_list_6.remove(linked_list_6)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_7, bytes_3, linked_node_8]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_21 = linked_list_8.__len__()
    assert var_21 == 4
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_node_10 = module_0.LinkedNode(complex_3)
    var_14.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1921():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.remove(var_10)
    var_14 = linked_list_5.__iter__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_15 = linked_list_6.remove(float_0)
    assert var_15 is False
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_4.checkInfinite()
    var_17 = var_16.__repr__()
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_4)
    var_18 = linked_node_6.checkInfinite()
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__repr__()
    linked_node_7 = module_0.LinkedNode(var_20)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_22 = linked_node_8.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_23 = linked_node_9.checkInfinite()
    bytes_5 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_3 = [linked_node_9, linked_list_8, bytes_5, linked_node_9]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 4
    var_24 = linked_list_9.__len__()
    assert var_24 == 4
    var_13.prepend(var_21)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_5 = linked_list_2.__repr__()
    assert (
        var_5
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(linked_list_3)
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_node_1.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_node_2 = module_0.LinkedNode(var_11)
    assert linked_node_2.value == 0
    var_8.remove(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1924():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_2.next) == 0
    var_1 = linked_list_1.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_node_4)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_6 = linked_node_9.checkInfinite()
    var_7 = linked_node_9.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_10 = linked_node_10.checkInfinite()
    var_11 = linked_node_10.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_14 = linked_node_11.checkInfinite()
    var_15 = linked_node_11.checkInfinite()
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_18 = linked_list_10.remove(var_15)
    assert var_18 is False
    var_19 = linked_list_10.__iter__()
    bool_0 = False
    linked_node_12 = module_0.LinkedNode(bool_0)
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1925():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_6 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_4.prepend(var_9)
    assert len(linked_list_4) == 1
    assert len(linked_node_2.value) == 1
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 3
    var_11 = linked_list_5.__repr__()
    assert (
        var_11
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_12 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_5.checkInfinite()
    var_16 = var_15.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    module_0.LinkedList(*var_15)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5.prepend(var_5)


def test_case_1927():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.remove(bool_0)
    assert var_4 is False
    linked_node_3 = module_0.LinkedNode(var_4)
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1928():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    var_1.remove(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1930():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_7.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__repr__()
    assert var_10 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    var_11.prepend(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, var_5)
    assert linked_node_2.next == "link:[]"
    var_5.prepend(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_3 = var_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_4 = linked_node_2.checkInfinite()
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1933():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.__repr__()
    assert var_2 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_4.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_2)
    assert linked_node_3.value == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, var_5)
    linked_node_6 = module_0.LinkedNode(var_6)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.remove(linked_list_6)
    assert var_7 is False
    var_8 = var_7.__repr__()
    var_6.prepend(linked_list_2)


def test_case_1934():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1935():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_5 = linked_list_2.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_node_3.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.remove(var_10)
    assert var_12 is False
    float_0 = -2122.54
    linked_node_4 = module_0.LinkedNode(float_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_14 = linked_list_10.remove(float_1)
    assert var_14 is False
    var_15 = linked_list_10.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList(*var_15)
    assert len(linked_list_11) == 96
    bool_0 = True
    linked_node_6 = module_0.LinkedNode(bool_0)
    var_16 = linked_node_6.checkInfinite()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_7.checkInfinite()
    var_18 = var_17.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    dict_0 = {
        linked_list_14: linked_list_14,
        linked_list_14: linked_list_14,
        linked_list_14: linked_list_14,
    }
    var_19 = linked_list_14.prepend(dict_0)
    assert len(linked_list_14) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    var_20 = linked_list_15.prepend(dict_0)
    assert len(linked_list_15) == 1
    var_21 = linked_list_15.remove(dict_0)
    assert var_21 is True
    assert len(linked_list_15) == 0
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1936():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1937():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    var_6 = var_5.__repr__()
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    var_0.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_3 = linked_list_1.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_1.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1940():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_4 = linked_list_2.remove(dict_0)
    assert var_4 is True
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.pop()
    assert var_8 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_node_7 = module_0.LinkedNode(none_type_1)
    bool_0 = True
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    list_3 = [list_2]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 1
    var_10 = linked_node_0.checkInfinite()
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1941():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.prepend(var_2)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    var_6 = var_3.__repr__()
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1942():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_node_5 = module_0.LinkedNode(var_4)
    assert (
        f"{type(linked_node_5.value).__module__}.{type(linked_node_5.value).__qualname__}"
        == "builtins.generator"
    )
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_7.value) == 1
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[False]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.remove(linked_list_4)
    assert var_10 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = var_10.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_12, linked_list_6)
    assert len(linked_node_9.next) == 0
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_13.__repr__()
    assert var_14 == "'link:[]'"
    var_15 = var_14.__repr__()
    assert var_15 == "\"'link:[]'\""
    var_16 = var_14.__repr__()
    assert var_16 == "\"'link:[]'\""
    none_type_1 = None
    linked_node_11 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_1)
    var_17 = linked_node_12.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__repr__()
    linked_node_13 = module_0.LinkedNode(var_19)
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    var_21 = linked_list_8.remove(float_0)
    assert var_21 is False
    complex_3 = 4095.03 - 599.647583j
    linked_node_14 = module_0.LinkedNode(complex_3)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_22 = linked_list_9.__len__()
    assert var_22 == 0
    module_0.LinkedList(*var_12)


def test_case_1943():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(bool_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(var_5)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    with pytest.raises(Exception):
        linked_list_1.pop()


def test_case_1944():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1945():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    var_13 = var_12.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.__len__()
    assert var_15 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_10.remove(linked_list_2)


def test_case_1946():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_4 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_4, bytes_1, bytes_1, bytes_1}
    linked_node_5 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_1, set_1]
    linked_node_7 = module_0.LinkedNode(list_0)
    var_8 = linked_node_7.checkInfinite()
    complex_3 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.remove(linked_list_7)
    assert var_9 is False
    var_10 = var_9.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_9, linked_list_8, bytes_3, linked_node_9]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_12 = linked_list_9.__len__()
    assert var_12 == 4
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_1 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_13 = linked_list_10.prepend(dict_1)
    assert len(linked_list_10) == 1
    complex_4 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_14 = linked_list_11.prepend(dict_1)
    assert len(linked_list_11) == 1
    var_15 = linked_list_11.remove(dict_1)
    assert var_15 is True
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    with pytest.raises(Exception):
        linked_list_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1947():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_5.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_9.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1948():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, var_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_2.__iter__()


def test_case_1949():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__iter__()
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1950():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_3.__len__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    var_6 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_2, bytes_2, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_8 = linked_list_3.__len__()
    assert var_8 == 4
    var_9 = linked_list_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_5.__len__()
    assert var_13 == 0
    linked_node_6 = module_0.LinkedNode(var_13)
    assert linked_node_6.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_node_7)
    complex_3 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_node_11 = module_0.LinkedNode(complex_3)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_16 = linked_node_12.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_13.value) == 0
    var_18 = linked_node_13.checkInfinite()
    var_19 = linked_list_8.prepend(var_16)
    assert len(linked_list_8) == 1
    assert len(linked_node_13.value) == 1
    var_20 = var_17.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_14.value) == 0
    var_21 = linked_node_14.checkInfinite()
    var_22 = linked_node_14.checkInfinite()
    var_23 = linked_list_10.__len__()
    assert var_23 == 0
    var_24 = linked_list_9.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_25 = linked_list_6.prepend(linked_node_2)
    assert len(linked_list_6) == 1
    var_25.prepend(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    module_0.LinkedList(*var_10)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_1.__len__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_7.__repr__()
    assert var_9 == "'link:[]'"
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_13 = linked_node_6.checkInfinite()
    var_14 = linked_list_4.prepend(var_11)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_15 = var_12.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_6.__len__()
    assert var_18 == 0
    var_19 = linked_list_6.__len__()
    assert var_19 == 0
    var_20 = linked_list_6.remove(var_17)
    var_21 = linked_list_6.__iter__()
    var_15.pop()


@pytest.mark.xfail(strict=True)
def test_case_1953():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1954():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_3.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_4)
    assert len(linked_list_4) == 96
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_1.checkInfinite()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1955():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 3
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 1
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_node_3.checkInfinite()
    bool_0 = False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.remove(bool_0)
    assert var_9 is False
    linked_node_4 = module_0.LinkedNode(var_9)
    float_0 = -2122.54
    linked_node_5 = module_0.LinkedNode(float_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_10, var_10)
    linked_node_8 = module_0.LinkedNode(var_11)
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_node_10 = module_0.LinkedNode(complex_2)
    var_7.prepend(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_1, bytes_1, linked_node_2]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_node_3 = module_0.LinkedNode(bytes_1, linked_node_2)
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1957():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_3 = var_2.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    var_8 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1958():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_node_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1960():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.__iter__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_11.__len__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.remove(linked_list_9)
    assert var_20 is False
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1961():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_1, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    var_3 = linked_list_2.__repr__()
    var_4 = linked_list_2.pop()
    assert len(linked_list_2) == 3
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_4.value).__module__}.{type(var_4.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_4.value) == 0
    assert var_4.next is None
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_6 = linked_list_7.remove(linked_list_7)
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_node_7 = module_0.LinkedNode(complex_2)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_8.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_9, linked_list_8, bytes_3, linked_node_9]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 4
    var_12 = linked_list_9.__len__()
    assert var_12 == 4
    linked_node_10 = module_0.LinkedNode(bytes_3, linked_node_9)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_13 = linked_node_11.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_4)
    var_14 = linked_node_12.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = linked_list_11.__len__()
    assert var_16 == 0
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1963():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2, var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.prepend(linked_node_6)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    var_6 = linked_node_7.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    linked_node_8 = module_0.LinkedNode(var_8)
    assert (
        f"{type(linked_node_8.value).__module__}.{type(linked_node_8.value).__qualname__}"
        == "builtins.generator"
    )
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(bool_0)
    assert var_9 is False
    linked_node_9 = module_0.LinkedNode(var_9)
    none_type_0 = None
    linked_node_10 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_11.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_12.value) == 0
    var_14 = linked_node_12.checkInfinite()
    var_15 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_14, var_14)
    linked_node_14 = module_0.LinkedNode(var_15)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_15 = module_0.LinkedNode(bytes_2)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_16 = module_0.LinkedNode(bytes_3)
    complex_3 = 4095.03 - 599.647583j
    linked_node_17 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_16 = linked_list_8.remove(linked_list_8)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.remove(linked_list_5)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    bytes_3 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_3]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 1
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 1
    list_1 = [linked_node_7, list_0, bytes_3, linked_node_7]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 4
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1965():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_2 = linked_list_1.remove(none_type_0)
    assert var_2 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__iter__()
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_8 = linked_list_3.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_3.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 2
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_3.checkInfinite()
    var_11 = var_10.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_12)
    bool_1 = False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.remove(bool_1)
    assert var_13 is False
    float_2 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_4, bytes_4]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 2
    var_14 = linked_list_9.remove(float_2)
    assert var_14 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    var_0.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, var_3)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_5 = module_0.LinkedNode(var_7)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_8, linked_list_6, bytes_3, linked_node_8]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    var_14 = linked_list_7.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_16 = linked_node_10.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_3 = [linked_node_10, linked_list_9, bytes_4, linked_node_10]
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 4
    var_17 = linked_list_10.__len__()
    assert var_17 == 4
    linked_node_11 = module_0.LinkedNode(bytes_4, linked_node_10)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_12.value) == 0
    var_18 = linked_node_12.checkInfinite()
    var_19 = linked_node_12.checkInfinite()
    var_20 = var_19.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_0)
    var_21 = linked_node_13.checkInfinite()
    var_1.pop()


def test_case_1967():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_node_3.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_7.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bool_0 = False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_13 = linked_list_11.remove(bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_14 = linked_list_12.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_node_4.checkInfinite()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_16 = linked_list_13.remove(linked_list_13)
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_2, bytes_2, bytes_2, bytes_2}
    linked_node_3 = module_0.LinkedNode(set_0)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    bytes_4 = b"U"
    set_1 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_2 = [set_1, set_1]
    linked_node_5 = module_0.LinkedNode(list_2)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    linked_list_3 = module_0.LinkedList(*bytes_4)
    assert len(linked_list_3) == 1
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1970():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_3, linked_node_1)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_5 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_5, bytes_1, bytes_1, bytes_1}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_node_7)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_11 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_11, linked_list_8)
    assert len(linked_node_11.next) == 0
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_13 = linked_node_12.checkInfinite()
    var_14 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_13, var_13)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_1)
    linked_node_14 = module_0.LinkedNode(tuple_0, bool_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_15 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_15 = linked_list_10.remove(linked_list_10)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    list_1 = []
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 0
    list_2 = [linked_list_5]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    var_6 = linked_list_6.__len__()
    assert var_6 == 1
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1972():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0.remove(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    var_7 = linked_list_1.__iter__()
    var_8 = linked_list_2.remove(linked_list_2)
    assert var_8 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1974():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1975():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, var_4)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_5, linked_list_2, bytes_1, linked_node_5]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_7 = linked_list_3.__len__()
    assert var_7 == 4
    linked_node_6 = module_0.LinkedNode(bytes_1, linked_node_5)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_8.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_1)
    var_12 = linked_node_10.checkInfinite()
    var_11.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(float_0, bytes_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_2 = module_0.LinkedNode(set_0, set_0)
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1977():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    list_1 = [linked_list_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_3 = linked_list_4.__len__()
    assert var_3 == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_6.__len__()
    assert var_6 == 0
    var_7 = linked_list_6.__len__()
    assert var_7 == 0
    var_8 = linked_list_6.remove(var_5)
    assert var_8 is False
    var_9 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__iter__()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_13.__repr__()
    assert var_14 == "'link:[]'"
    var_15 = var_14.__repr__()
    assert var_15 == "\"'link:[]'\""
    var_16 = var_14.__repr__()
    assert var_16 == "\"'link:[]'\""
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_17 = linked_node_2.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_3.value) == 0
    var_19 = linked_node_3.checkInfinite()
    var_20 = linked_list_10.prepend(var_17)
    assert len(linked_list_10) == 1
    assert len(linked_node_3.value) == 1
    var_21 = var_18.__repr__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_4.value) == 0
    var_22 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_4, linked_list_11, bytes_1, linked_node_4]
    linked_list_12 = module_0.LinkedList(*list_2)
    assert len(linked_list_12) == 4
    var_23 = linked_list_12.__len__()
    assert var_23 == 4
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_24 = linked_node_5.checkInfinite()
    var_25 = var_24.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1978():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__len__()
    assert var_5 == 7
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1979():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(linked_node_4)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    bool_0 = True
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.prepend(bool_0)
    assert len(linked_list_5) == 1
    var_6.remove(linked_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_4, linked_list_3)
    assert len(linked_node_4.next) == 0
    var_5 = linked_list_3.__iter__()
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1981():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.remove(var_2)
    assert var_5 is False
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_7.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_2, bytes_2, linked_node_4]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_11 = linked_list_3.__len__()
    assert var_11 == 4
    var_12 = linked_list_3.__repr__()
    var_13 = linked_list_3.pop()
    assert len(linked_list_3) == 3
    assert (
        f"{type(var_13).__module__}.{type(var_13).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_13.value).__module__}.{type(var_13.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_13.value) == 0
    assert var_13.next is None
    bool_0 = False
    linked_node_5 = module_0.LinkedNode(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_list_5.__len__()
    assert var_16 == 0
    var_17 = linked_list_5.__len__()
    assert var_17 == 0
    linked_node_7 = module_0.LinkedNode(var_17)
    assert linked_node_7.value == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    var_18 = linked_node_9.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_19 = linked_list_7.__iter__()
    var_20 = var_19.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_22 = linked_node_11.checkInfinite()
    var_23 = var_22.__repr__()
    var_24 = linked_list_9.__len__()
    assert var_24 == 0
    bytes_5 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_25 = linked_list_10.prepend(bytes_5)
    assert len(linked_list_10) == 1
    var_2.remove(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_8 = linked_list_2.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_2.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_10 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_12 = linked_list_5.remove(dict_0)
    assert var_12 is True
    assert len(linked_list_5) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(none_type_1)
    var_13 = linked_list_3.__iter__()
    var_13.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    linked_node_3 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_3.next) == 0
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_5.checkInfinite()
    var_7 = var_6.__repr__()
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1986():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    bool_0 = True
    linked_node_9 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_9.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_8.prepend(var_15)
    assert len(linked_list_8) == 1
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1987():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_1, bytes_0, linked_node_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__len__()
    assert var_2 == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_2, linked_list_3, bytes_1, linked_node_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    linked_node_3 = module_0.LinkedNode(bytes_1, linked_node_2)
    var_4.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_3 = var_1.__repr__()
    assert var_3 == "\"'link:[]'\""
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    assert var_6 is False
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_10 = linked_list_4.__iter__()
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_5 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_5, bytes_1, bytes_1, bytes_1}
    linked_node_6 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__iter__()
    var_12 = linked_list_5.__iter__()
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1989():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_4 = linked_node_4.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_node_6 = module_0.LinkedNode(var_9)
    assert linked_node_6.value == 0
    var_10 = var_8.__repr__()
    assert var_10 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_node_7.checkInfinite()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_5.prepend(var_13)
    assert len(linked_list_5) == 1
    assert len(linked_node_9.value) == 1
    var_17 = var_14.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_18 = linked_node_10.checkInfinite()
    var_19 = var_18.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_12 = module_0.LinkedNode(linked_node_10)
    float_0 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_4, bytes_4]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_20 = linked_list_8.remove(float_0)
    assert var_20 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    float_1 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_5, bytes_5]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_21 = linked_list_10.remove(float_1)
    assert var_21 is False
    var_22 = linked_list_10.__repr__()
    assert (
        var_22
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_13.value) == 0
    var_23 = linked_node_13.checkInfinite()
    var_24 = linked_node_13.checkInfinite()
    var_25 = linked_list_11.__repr__()
    assert var_25 == "link:[]"
    var_26 = linked_list_12.prepend(var_25)
    assert len(linked_list_12) == 1
    assert len(linked_node_13.value) == 1
    linked_node_14 = module_0.LinkedNode(linked_list_12, linked_node_13)
    assert len(linked_node_14.value) == 1
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 1
    list_1 = [linked_node_2, list_0, bytes_2, linked_node_2]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_3 = linked_list_6.remove(linked_list_6)
    var_4 = var_3.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_5 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_6 = var_5.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    list_3 = []
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 0
    list_4 = [linked_list_10]
    linked_list_11 = module_0.LinkedList(*list_4)
    assert len(linked_list_11) == 1
    var_10 = linked_list_11.__len__()
    assert var_10 == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_12.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_13.prepend(var_13)
    assert len(linked_list_13) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(var_14, linked_node_5)
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1991():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_4 = module_0.LinkedNode(var_3)
    assert linked_node_4.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    var_5 = var_4.__repr__()
    list_0 = []
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_6.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_6.prepend(var_11)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_6, linked_node_7)
    assert len(linked_node_8.value) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    var_17 = linked_list_9.__iter__()
    var_11.pop()


@pytest.mark.xfail(strict=True)
def test_case_1992():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_5.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_3.prepend(var_9)
    assert len(linked_list_3) == 1
    assert len(linked_node_6.value) == 1
    var_13 = var_10.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    var_17 = linked_list_5.__iter__()
    var_18 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_19 = linked_list_7.remove(bytes_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_list_11.__len__()
    assert var_24 == 0
    var_25 = linked_list_11.__len__()
    assert var_25 == 0
    var_26 = linked_list_11.remove(var_23)
    var_27 = linked_list_11.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_11.value) == 0
    var_28 = linked_node_11.checkInfinite()
    var_29 = linked_node_11.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_12 = module_0.LinkedNode(complex_2)
    var_30 = linked_list_13.__iter__()
    var_29.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1993():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_10.remove(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1995():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_5 = linked_node_4.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9, linked_list_3)
    assert len(linked_node_7.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_8.value) == 0
    var_10 = linked_node_8.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_8, linked_list_4, bytes_2, linked_node_8]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_11 = linked_list_5.__len__()
    assert var_11 == 4
    var_12 = linked_list_0.__len__()
    assert var_12 == 0
    var_12.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1996():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    linked_node_5 = module_0.LinkedNode(float_0, bytes_1)
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_1997():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 3
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_11.__len__()
    assert var_13 == 0
    var_14 = linked_list_11.__iter__()
    var_15 = var_14.__iter__()
    var_8.checkInfinite()


def test_case_1998():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_1 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_0 = module_0.LinkedNode(var_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_10 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_10.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.__iter__()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_11 = module_0.LinkedList(*list_0)
    assert len(linked_list_11) == 1
    var_16 = linked_list_11.pop()
    assert var_16 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_11) == 0
    var_17 = var_16.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    dict_1 = {
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
        linked_list_12: linked_list_12,
    }
    var_18 = linked_list_12.prepend(dict_1)
    assert len(linked_list_12) == 1
    var_19 = linked_list_12.__repr__()
    assert var_19 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    linked_node_7 = module_0.LinkedNode(linked_node_6)
    with pytest.raises(Exception):
        linked_list_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1999():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2000():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    var_2 = linked_node_4.checkInfinite()
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_6.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_7.value) == 1
    var_11 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__len__()
    assert var_15 == 0
    linked_node_9 = module_0.LinkedNode(var_15)
    assert linked_node_9.value == 0
    var_16 = var_14.__repr__()
    assert var_16 == "0"
    var_3.prepend(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    bool_0 = False
    set_0 = {bool_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 4
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2002():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    linked_node_3 = module_0.LinkedNode(var_7)
    assert linked_node_3.value == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    list_1 = []
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 0
    list_2 = [linked_list_6]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 1
    var_8 = linked_list_7.__len__()
    assert var_8 == 1
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_3 = [bytes_1]
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 1
    list_4 = [linked_node_4, list_3, bytes_1, linked_node_4]
    list_5 = [list_4, list_3, list_3, list_3]
    linked_list_9 = module_0.LinkedList(*list_5)
    assert len(linked_list_9) == 4
    bool_0 = False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_9 = linked_list_10.remove(bool_0)
    assert var_9 is False
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_10 = linked_list_11.__len__()
    assert var_10 == 0
    bool_1 = True
    list_6 = [bool_1, bool_1, bool_1, bool_1]
    list_7 = [list_6]
    linked_list_12 = module_0.LinkedList(*list_7)
    assert len(linked_list_12) == 1
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_11 = linked_list_14.__repr__()
    assert var_11 == "link:[]"
    bytes_2 = b"U"
    set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_8 = [set_1, set_1]
    linked_node_5 = module_0.LinkedNode(list_8)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_11.__repr__()
    assert var_13 == "'link:[]'"
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_3.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_5, linked_list_6, bytes_1, linked_node_5]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_11 = linked_list_7.__len__()
    assert var_11 == 4
    linked_node_6 = module_0.LinkedNode(bytes_1, linked_node_5)
    bool_0 = False
    linked_node_7 = module_0.LinkedNode(bool_0)
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1, none_type_1)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_12 = linked_node_9.checkInfinite()
    var_13 = var_12.__repr__()
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    var_14 = linked_node_10.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_7.remove(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    linked_list_4 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__len__()
    assert var_11 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_5, linked_list_8, bytes_1, linked_node_5]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_13 = linked_list_9.__len__()
    assert var_13 == 4
    var_14 = linked_list_9.__repr__()
    var_15 = linked_list_9.pop()
    assert len(linked_list_9) == 3
    assert (
        f"{type(var_15).__module__}.{type(var_15).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_15.value).__module__}.{type(var_15.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_15.value) == 0
    assert var_15.next is None
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_16, var_16)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_18)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_19 = linked_list_12.remove(linked_list_12)
    var_20 = linked_list_12.__len__()
    assert var_20 == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_13.__repr__()
    assert var_22 == "link:[]"
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0, var_22)
    assert linked_node_11.next == "link:[]"
    complex_1 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_1)
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_2)
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    var_23 = linked_list_15.__repr__()
    assert var_23 == "link:[]"
    var_24 = linked_list_15.__iter__()
    var_23.pop()


def test_case_2005():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_2, linked_list_1)
    assert len(linked_node_3.next) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    linked_node_4 = module_0.LinkedNode(float_0, bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_4 = linked_node_7.checkInfinite()
    var_5 = linked_node_7.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.remove(var_5)
    assert var_8 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    var_9 = linked_node_9.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_10 = linked_node_10.checkInfinite()
    var_11 = linked_node_10.checkInfinite()
    var_12 = linked_list_7.__len__()
    assert var_12 == 0
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    var_14 = linked_list_7.remove(var_11)
    var_15 = linked_list_7.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_11.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_12.value) == 0
    var_18 = linked_node_12.checkInfinite()
    var_19 = linked_list_8.prepend(var_16)
    assert len(linked_list_8) == 1
    assert len(linked_node_12.value) == 1
    var_20 = var_17.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_13 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_14 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_15 = module_0.LinkedNode(complex_3)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_21 = linked_list_10.__repr__()
    assert var_21 == "link:[]"
    var_22 = linked_node_15.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_23 = linked_list_11.remove(var_21)
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2006():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    var_6 = linked_list_1.__len__()
    assert var_6 == 0
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_2 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 2
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_6.__iter__()
    var_11 = var_10.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_3.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    var_15 = var_13.__len__()
    bool_1 = False
    linked_node_5 = module_0.LinkedNode(bool_1)
    module_0.LinkedList(*var_15)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2008():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    var_0 = linked_node_4.checkInfinite()
    assert var_0 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_1 = linked_node_5.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_4, var_4)
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2009():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 1
    list_1 = [linked_node_0, list_0, bytes_0, linked_node_0]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 4
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_3 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_3)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_0.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_3.__repr__()
    assert var_9 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_node_6 = module_0.LinkedNode(var_12)
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_3 = [set_0, set_0]
    linked_node_8 = module_0.LinkedNode(list_3)
    var_15 = linked_node_8.checkInfinite()
    var_16 = var_14.__repr__()
    assert var_16 == "'link:[]'"
    var_17 = linked_list_6.__len__()
    assert var_17 == 0
    bool_1 = False
    linked_node_9 = module_0.LinkedNode(bool_1)
    none_type_2 = None
    linked_node_10 = module_0.LinkedNode(none_type_2, none_type_2)
    var_7.remove(var_17)


def test_case_2011():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.prepend(linked_node_5)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_6 = module_0.LinkedNode(var_5)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_1, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 3
    var_7 = linked_list_5.__repr__()
    assert (
        var_7
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_13, linked_list_9)
    assert len(linked_node_10.next) == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    linked_node_11 = module_0.LinkedNode(linked_node_10)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_12 = module_0.LinkedNode(bytes_2)
    var_15 = linked_node_12.checkInfinite()
    var_16 = var_15.__repr__()
    none_type_0 = None
    linked_node_13 = module_0.LinkedNode(none_type_0)
    linked_node_14 = module_0.LinkedNode(none_type_0)
    with pytest.raises(Exception):
        linked_list_6.pop()


def test_case_2012():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__len__()
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_2, bytes_1, bytes_1, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    with pytest.raises(Exception):
        linked_list_1.pop()


def test_case_2013():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    var_8 = linked_list_5.__repr__()
    assert var_8 == "link:[]"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_7.value) == 1
    var_13 = linked_list_6.__repr__()
    assert var_13 == "link:[False]"
    with pytest.raises(Exception):
        linked_list_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2014():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    var_6 = var_5.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    var_7.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2015():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_7, var_7)
    var_5.remove(linked_node_3)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_1)
    assert var_3 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.remove(linked_list_3)
    assert var_4 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_1.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[]"
    bool_0 = True
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.prepend(bool_0)
    assert len(linked_list_4) == 1
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_1)
    linked_node_5 = module_0.LinkedNode(tuple_0, bool_1)
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    linked_node_8 = module_0.LinkedNode(linked_node_7)
    var_11 = linked_node_8.checkInfinite()
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2018():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_4.checkInfinite()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_5.checkInfinite()
    var_4 = var_3.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_7.value) == 0
    var_5 = linked_node_7.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_7, linked_list_4, bytes_1, linked_node_7]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_6 = linked_list_5.__len__()
    assert var_6 == 4
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_4)
    assert len(linked_node_2.next) == 0
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_10.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(linked_list_7)
    assert var_13 is False
    var_14 = var_13.__repr__()
    bool_0 = False
    linked_node_7 = module_0.LinkedNode(bool_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bool_1 = True
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = linked_list_11.prepend(bool_1)
    assert len(linked_list_11) == 1
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_13.__len__()
    assert var_22 == 0
    var_23 = linked_list_12.__iter__()
    var_24 = linked_list_13.remove(linked_list_13)
    var_20.remove(var_11)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_1 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_1)
    assert len(linked_list_3) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    var_5 = linked_list_4.remove(dict_1)
    assert var_5 is True
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == "0"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_13 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_13, linked_list_9)
    assert len(linked_node_8.next) == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_15, linked_list_10)
    assert len(linked_node_11.next) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    dict_2 = {
        linked_list_11: linked_list_11,
        linked_list_11: linked_list_11,
        linked_list_11: linked_list_11,
    }
    var_16 = linked_list_11.prepend(dict_2)
    assert len(linked_list_11) == 1
    var_17 = linked_list_11.__repr__()
    assert var_17 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_12 = module_0.LinkedNode(var_16)
    var_13.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2021():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_4.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2022():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    var_7 = linked_node_0.checkInfinite()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    var_10 = var_9.__iter__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2023():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_0, linked_list_2, bytes_1, linked_node_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_3 = linked_list_3.__len__()
    assert var_3 == 4
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_2)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_7 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_3)
    var_9 = linked_node_3.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_4 = module_0.LinkedNode(var_11)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_1 = 2862.9
    bytes_4 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_4, bytes_4]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_13 = linked_list_6.remove(float_1)
    assert var_13 is False
    var_14 = linked_list_6.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_8.__len__()
    assert var_18 == 0
    var_19 = linked_list_8.remove(var_16)
    assert var_19 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.prepend(linked_node_9)
    assert len(linked_list_9) == 1
    var_2.prepend(bytes_3)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    list_0 = [bool_0, linked_node_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    var_0.__iter__()


def test_case_2025():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2026():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_1.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_5 = linked_list_3.__iter__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == "0"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    var_11 = linked_list_6.__iter__()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_12 = linked_list_7.remove(float_1)
    assert var_12 is False
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_8.__len__()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    float_2 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_14 = linked_list_10.remove(float_2)
    assert var_14 is False
    var_15 = linked_list_10.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_12.__len__()
    assert var_18 == 0
    var_19 = linked_list_11.__iter__()
    var_20 = linked_list_12.remove(linked_list_12)
    assert var_20 is False
    var_1.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_1.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_2.prepend(var_6)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_10 = var_7.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_11 = linked_list_3.remove(float_0)
    assert var_11 is False
    float_1 = 2862.9
    var_3.prepend(float_1)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.prepend(bytes_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.remove(linked_list_3)
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_9 = linked_node_1.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, var_10)
    assert linked_node_2.next == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_6, bytes_1, linked_node_3]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 4
    var_13 = linked_list_7.__len__()
    assert var_13 == 4
    linked_node_4 = module_0.LinkedNode(bytes_1, linked_node_3)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 1
    var_14 = linked_list_8.pop()
    assert var_14 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_8) == 0
    var_15 = var_14.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_16.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_18 = linked_node_7.checkInfinite()
    var_19 = linked_list_10.prepend(var_16)
    assert len(linked_list_10) == 1
    assert len(linked_node_7.value) == 1
    var_20 = linked_list_10.__repr__()
    assert var_20 == "link:[False]"
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_21 = linked_node_9.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    var_24 = var_22.__len__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_25 = linked_list_11.remove(linked_list_11)
    var_6.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    bool_1 = False
    int_0 = -1787
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    var_0.prepend(bool_1)


def test_case_2030():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__len__()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == "0"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_3.__iter__()
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_12 = linked_node_2.checkInfinite()
    var_13 = linked_node_2.checkInfinite()
    var_14 = var_13.__repr__()
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(bool_0)
    linked_node_3 = module_0.LinkedNode(var_15)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_17 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 3
    var_18 = linked_list_9.__repr__()
    assert var_18 == "link:[-731,-731,-731]"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_0)
    var_19 = linked_node_7.checkInfinite()
    var_20 = var_19.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.remove(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2033():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_8.prepend(var_13)
    assert len(linked_list_8) == 1
    assert len(linked_node_3.value) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_4.value) == 0
    var_15 = linked_node_4.checkInfinite()
    var_16 = linked_node_4.checkInfinite()
    var_17 = linked_list_9.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_list_10.prepend(var_17)
    assert len(linked_list_10) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_10, linked_node_4)
    assert len(linked_node_5.value) == 1
    var_19 = linked_list_9.prepend(var_18)
    assert len(linked_list_9) == 1
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_20 = linked_list_11.__repr__()
    assert var_20 == "link:[]"
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 2
    var_21 = linked_list_12.remove(float_1)
    assert var_21 is False
    var_22 = linked_list_12.__repr__()
    assert (
        var_22
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_6 = module_0.LinkedNode(var_20)
    assert linked_node_6.value == "link:[]"
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    dict_0 = {
        linked_list_13: linked_list_13,
        linked_list_13: linked_list_13,
        linked_list_13: linked_list_13,
    }
    var_23 = linked_list_13.prepend(dict_0)
    assert len(linked_list_13) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_24 = linked_list_14.prepend(dict_0)
    assert len(linked_list_14) == 1
    var_25 = linked_list_14.remove(dict_0)
    assert var_25 is True
    assert len(linked_list_14) == 0
    float_2 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_15 = module_0.LinkedList(*list_2)
    assert len(linked_list_15) == 2
    var_26 = linked_list_15.remove(float_2)
    assert var_26 is False
    var_27 = linked_list_15.__repr__()
    assert (
        var_27
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_16 = module_0.LinkedList(*list_2)
    assert len(linked_list_16) == 2
    linked_list_17 = module_0.LinkedList()
    assert len(linked_list_17) == 0
    linked_list_18 = module_0.LinkedList()
    assert len(linked_list_18) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_18)
    assert len(linked_node_8.value) == 0
    var_28 = linked_node_8.checkInfinite()
    var_29 = linked_node_8.checkInfinite()
    var_30 = linked_list_18.__len__()
    assert var_30 == 0
    var_31 = linked_list_18.__iter__()
    var_20.pop()


@pytest.mark.xfail(strict=True)
def test_case_2034():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2035():
    str_0 = "a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    object_0 = module_1.object()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(object_0)
    assert len(linked_list_0) == 1
    var_1 = var_0.__repr__()
    var_1.prepend(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.__repr__()
    assert var_6 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7, var_7)
    var_5.remove(var_6)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.pop()
    assert var_4 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_5 = var_4.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(linked_list_5)
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = var_6.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.remove(linked_list_7)
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_3.checkInfinite()
    var_11 = var_10.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_node_3)
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_node_2 = module_0.LinkedNode(var_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_2 = linked_list_2.remove(bytes_0)
    assert var_2 is False
    none_type_2 = None
    linked_node_4 = module_0.LinkedNode(none_type_2)
    linked_node_5 = module_0.LinkedNode(none_type_2)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_6.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__iter__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2039():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_1, linked_list_3, bytes_0, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 4
    var_4 = linked_list_4.__len__()
    assert var_4 == 4
    var_5 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__iter__()
    var_10 = linked_list_6.remove(linked_list_6)
    assert var_10 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_11 = linked_list_7.prepend(linked_node_6)
    assert len(linked_list_7) == 1
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2040():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_2.prepend(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1.remove(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_9, linked_list_7)
    assert len(linked_node_7.next) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_8.checkInfinite()
    var_11 = var_10.__repr__()
    var_10.remove(linked_list_7)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    list_1 = []
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_7.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__iter__()
    var_11 = var_10.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = var_13.__repr__()
    assert var_15 == "\"'link:[]'\""
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_16 = linked_list_10.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__repr__()
    assert var_17 == "'link:[]'"
    var_18 = var_17.__repr__()
    assert var_18 == "\"'link:[]'\""
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2044():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_2.remove(linked_node_2)
    assert var_5 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_3, bytes_0, linked_node_3]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_7 = linked_list_4.__len__()
    assert var_7 == 4
    var_8 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = var_10.__repr__()
    assert var_11 == "\"'link:[]'\""
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 1
    var_12 = linked_list_6.pop()
    assert var_12 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_6) == 0
    var_13 = var_12.__iter__()
    var_5.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2045():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2046():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__iter__()
    var_5 = var_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = var_7.__repr__()
    assert var_8 == "\"'link:[]'\""
    var_9 = var_7.__repr__()
    assert var_9 == "\"'link:[]'\""
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_1.checkInfinite()
    var_11 = var_10.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_12 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.remove(linked_list_8)
    assert var_14 is False
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_13 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_15 = linked_list_7.remove(dict_0)
    assert var_15 is True
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    var_19 = linked_list_9.__len__()
    assert var_19 == 0
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2048():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[]"
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_node_1.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    var_7 = linked_list_1.__repr__()
    assert var_7 == "link:[False]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.__iter__()
    var_9 = var_8.__repr__()
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_3.remove(linked_node_6)
    assert var_15 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_node_7.checkInfinite()
    var_18 = linked_list_4.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_5.prepend(var_18)
    assert len(linked_list_5) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_5, linked_node_7)
    assert len(linked_node_8.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_node_9.checkInfinite()
    var_22 = linked_list_6.__repr__()
    assert var_22 == "link:[]"
    var_17.prepend(linked_node_4)


def test_case_2049():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_list_1.remove(linked_node_1)
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_3.prepend(var_5)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__iter__()
    var_10 = linked_list_6.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_list_8.prepend(var_16)
    assert len(linked_list_8) == 1
    assert len(linked_node_7.value) == 1
    linked_node_8 = module_0.LinkedNode(linked_list_8, linked_node_7)
    assert len(linked_node_8.value) == 1
    var_18 = linked_list_7.prepend(var_17)
    assert len(linked_list_7) == 1
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_node_10 = module_0.LinkedNode(none_type_1)
    linked_node_11 = module_0.LinkedNode(linked_node_9, linked_node_10)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2051():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_1)
    assert var_2 is False
    linked_node_0 = module_0.LinkedNode(float_1, bytes_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2052():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_0 = (str_0, bytes_2, list_1)
    list_2 = [tuple_0, list_1, str_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 3
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    var_6.remove(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    var_13 = linked_list_8.remove(var_10)
    assert var_13 is False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_15 = linked_node_7.checkInfinite()
    var_16 = var_15.__repr__()
    var_17 = linked_list_10.__len__()
    assert var_17 == 0
    var_11.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bool_0 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(var_2)
    assert var_4 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bool_1 = False
    linked_node_3 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, none_type_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2055():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_3 = module_0.LinkedNode(set_0, set_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__repr__()
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_node_8 = module_0.LinkedNode(linked_node_6, linked_node_7)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_14, var_14)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_16 = linked_node_11.checkInfinite()
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    var_19 = linked_list_8.__iter__()
    var_20 = linked_list_8.__len__()
    assert var_20 == 0
    int_0 = -1121
    var_20.prepend(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    var_1.prepend(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bool_0 = False
    set_0 = {bool_0}
    linked_node_0 = module_0.LinkedNode(set_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    bool_1 = False
    linked_node_1 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_1, set_1]
    linked_node_3 = module_0.LinkedNode(list_1)
    var_1 = linked_node_3.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_5.value) == 1
    var_7 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_8 = linked_node_6.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = var_8.__repr__()
    var_9.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(var_3, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_4 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_1)
    assert var_9 is False
    var_10 = linked_list_6.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_10)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_3.value) == 0
    var_11 = linked_node_3.checkInfinite()
    var_12 = linked_node_3.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    var_15 = linked_list_9.remove(var_12)
    assert var_15 is False
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_1, bytes_2, bool_0)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_5.value) == 0
    var_16 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_16, linked_list_11)
    assert len(linked_node_6.next) == 0
    var_17 = linked_list_11.__len__()
    assert var_17 == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_18 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_10.prepend(var_16)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__iter__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2061():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_2)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    var_8 = var_6.__repr__()
    assert var_8 == "\"'link:[]'\""
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(bool_0)
    assert var_9 is False
    linked_node_5 = module_0.LinkedNode(var_9)
    var_8.remove(linked_list_4)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_node_2 = module_0.LinkedNode(var_1)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_2 = linked_list_1.remove(float_0)
    assert var_2 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_4.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(linked_list_4)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    bool_0 = True
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.prepend(bool_0)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_14 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_15 = linked_list_7.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_2063():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bool_0 = True
    linked_node_2 = module_0.LinkedNode(bool_0)
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    bool_1 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(bool_1)
    assert var_6 is False
    bool_2 = True
    dict_0 = {bool_2: bool_2}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_2)
    linked_node_4 = module_0.LinkedNode(tuple_0, bool_2)
    bool_3 = True
    set_0 = {bool_3, bool_3, bool_3, bool_3}
    linked_node_5 = module_0.LinkedNode(set_0, set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_7 = linked_list_5.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_5.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_5.remove(var_4)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.remove(linked_list_2)
    assert var_2 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__iter__()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_0.__len__()
    assert var_8 == 0
    var_8.remove(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_0 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.prepend(bytes_0)
    assert len(linked_list_7) == 1
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_8.prepend(var_8)
    assert len(linked_list_8) == 1
    assert len(linked_node_7.value) == 1
    var_12 = var_9.__repr__()
    var_12.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2066():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    module_0.LinkedList(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_6)
    assert len(linked_list_3) == 96
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    assert var_7 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    var_12 = linked_list_6.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bool_0 = False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_13 = linked_list_9.remove(bool_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    dict_0 = {
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
        linked_list_10: linked_list_10,
    }
    var_14 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    var_15 = linked_list_10.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_3.value) == 0
    var_16 = linked_node_3.checkInfinite()
    var_17 = linked_node_3.checkInfinite()
    var_18 = linked_list_11.__repr__()
    assert var_18 == "link:[]"
    var_19 = linked_list_12.prepend(var_18)
    assert len(linked_list_12) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(var_19, linked_node_3)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_5.value) == 0
    var_20 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_20, linked_list_13)
    assert len(linked_node_6.next) == 0
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_15)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_node_7.checkInfinite()
    var_23 = linked_list_14.__repr__()
    assert var_23 == "link:[]"
    var_6.prepend(var_15)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_0.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.remove(var_4)
    assert var_7 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_6.__iter__()
    var_1.prepend(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList(*linked_list_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    var_9 = linked_list_4.remove(linked_list_4)
    assert var_9 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_10 = linked_node_2.checkInfinite()
    var_11 = linked_node_2.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__iter__()
    var_14 = var_13.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_15 = linked_list_7.remove(float_0)
    assert var_15 is False
    linked_node_3 = module_0.LinkedNode(float_0, bytes_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_16 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_16, linked_list_8)
    assert len(linked_node_5.next) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_17 = linked_list_10.__repr__()
    assert var_17 == "link:[]"
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 2
    var_18 = linked_list_11.remove(float_1)
    assert var_18 is False
    var_19 = linked_list_11.__repr__()
    assert (
        var_19
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_7 = module_0.LinkedNode(var_17)
    assert linked_node_7.value == "link:[]"
    var_16.remove(linked_list_4)


def test_case_2070():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_4 = linked_list_1.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_1.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_2 = module_0.LinkedNode(var_6)
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_9.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_12 = linked_list_3.remove(linked_list_3)
    assert var_12 is False
    var_13 = var_12.__repr__()
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == 0
    var_8 = var_6.__repr__()
    assert var_8 == "0"
    bool_0 = True
    linked_node_3 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_13 = linked_list_7.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_7.__repr__()
    assert (
        var_14
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_node_8 = module_0.LinkedNode(none_type_0)
    linked_node_9 = module_0.LinkedNode(linked_node_7, linked_node_8)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(linked_list_9)
    assert var_15 is False
    var_7.prepend(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_2, bytes_0, bytes_0, bytes_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_1 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_5.checkInfinite()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_list_2.prepend(var_2)
    assert len(linked_list_2) == 1
    assert len(linked_node_6.value) == 1
    module_0.LinkedList(*linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_node_2.checkInfinite()
    bool_0 = False
    linked_node_3 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, none_type_0)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_5.checkInfinite()
    var_6 = var_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_node_8.checkInfinite()
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.__iter__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2074():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_5.__len__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_8 = linked_list_0.__repr__()
    assert var_8 == "link:[]"
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_11 = linked_list_2.__len__()
    assert var_11 == 1
    var_2.prepend(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(none_type_0)
    assert len(linked_list_0) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2076():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    float_0 = -2122.54
    linked_node_2 = module_0.LinkedNode(float_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_2 = linked_node_3.checkInfinite()
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_4.checkInfinite()
    bool_1 = False
    linked_node_5 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0, none_type_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_7.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(var_4)
    assert var_6 is False
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    linked_node_9 = module_0.LinkedNode(none_type_1)
    bool_2 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_2, bool_2, bool_2, bytes_0}
    linked_node_10 = module_0.LinkedNode(set_0)
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2077():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_1 = -2122.54
    linked_node_5 = module_0.LinkedNode(float_1)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_4 = linked_node_6.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    var_7 = var_5.__len__()
    bool_0 = False
    set_0 = {bool_0}
    linked_node_8 = module_0.LinkedNode(set_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_8 = linked_node_9.checkInfinite()
    var_9 = linked_list_6.__repr__()
    assert var_9 == "link:[]"
    bool_1 = True
    linked_node_10 = module_0.LinkedNode(bool_1)
    var_10 = linked_node_10.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_11 = linked_node_11.checkInfinite()
    var_12 = linked_node_11.checkInfinite()
    var_13 = linked_list_7.prepend(var_11)
    assert len(linked_list_7) == 1
    var_10.remove(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_3, linked_node_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2079():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    float_0 = -2122.54
    linked_node_3 = module_0.LinkedNode(float_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5)
    var_5.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_0, bytes_1, linked_node_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = linked_list_5.__iter__()
    linked_node_6 = module_0.LinkedNode(var_12)
    var_11.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2081():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_2, linked_node_2)
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.remove(linked_list_6)
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_14 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_14, linked_list_8)
    assert len(linked_node_9.next) == 0
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    linked_node_10 = module_0.LinkedNode(linked_node_9)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_11.value) == 0
    var_16 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_16, linked_list_9)
    assert len(linked_node_12.next) == 0
    var_15.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2082():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    module_0.LinkedList(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_2.prepend(var_3)
    assert len(linked_list_2) == 1
    assert len(linked_node_2.value) == 1
    var_7 = var_4.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_8 = linked_list_3.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_3.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_node_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    complex_2 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_2)
    none_type_0 = None
    var_12 = linked_list_6.remove(none_type_0)
    assert var_12 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1)
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    var_10.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2084():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    var_2 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_5, linked_list_5)
    assert len(linked_node_5.next) == 0
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_0.remove(linked_node_3)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2086():
    float_0 = 2862.9
    int_0 = -860
    float_1 = -524.0
    list_0 = [float_1, float_1, float_1, float_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.prepend(int_0)
    assert len(linked_list_0) == 5
    var_0.prepend(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_node_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2088():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.remove(var_2)
    var_6 = linked_list_2.__iter__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_7 = linked_list_3.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_3.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_9 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_2 = module_0.LinkedNode(var_9)
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_3 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_3, bytes_2, bytes_2, bytes_2}
    linked_node_4 = module_0.LinkedNode(set_0)
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2089():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_1.prepend(var_4)
    assert len(linked_list_1) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_5, bytes_0, linked_node_4]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_12 = linked_list_6.__len__()
    assert var_12 == 4
    var_13 = linked_list_6.__repr__()
    var_14 = linked_list_6.pop()
    assert len(linked_list_6) == 3
    assert (
        f"{type(var_14).__module__}.{type(var_14).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_14.value).__module__}.{type(var_14.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_14.value) == 0
    assert var_14.next is None
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_15 = linked_node_5.checkInfinite()
    var_16 = linked_node_5.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__iter__()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_20 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    none_type_0 = None
    linked_node_6 = module_0.LinkedNode(none_type_0)
    var_21 = linked_list_10.__repr__()
    assert var_21 == "link:[]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_22 = linked_list_11.__repr__()
    assert var_22 == "link:[]"
    var_23 = var_22.__len__()
    assert var_23 == 7
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_24 = linked_list_12.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__repr__()
    var_3.remove(var_26)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = 'V?"'
    bytes_0 = b"\xfa\xce\xdek\xc1\x1f\xddb\xbe"
    tuple_1 = (tuple_0, bool_0, str_0, bytes_0)
    set_0 = {tuple_0, tuple_1, tuple_0}
    tuple_2 = (tuple_1, set_0, bool_0, set_0)
    str_1 = "k#/tX4I{A;Df[|"
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(str_1)
    assert var_0 is False
    var_0.remove(tuple_2)


def test_case_2091():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_0 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_5 = linked_list_5.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_5.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_6.prepend(var_7)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    var_11 = var_8.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    with pytest.raises(Exception):
        linked_list_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2092():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    bool_0 = False
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_1 = linked_list_2.remove(none_type_0)
    assert var_1 is False
    bool_1 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.prepend(bool_1)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[False,False,False,False]"
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 3
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[-731,-731,-731]"
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_7 = linked_list_5.__iter__()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_8.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_3 = []
    tuple_0 = (str_0, bytes_2, list_3)
    list_4 = [tuple_0, list_3, str_0]
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 3
    var_12 = linked_list_8.__repr__()
    assert (
        var_12
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_10.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bytes_1)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_3, var_3)
    linked_node_4 = module_0.LinkedNode(var_4)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_2 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_2, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 3
    var_7 = linked_list_4.__repr__()
    assert (
        var_7
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2095():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList(*linked_list_0)
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(var_3, linked_list_3)
    assert len(linked_node_1.next) == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_1 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__len__()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_7)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    var_11 = linked_list_9.__repr__()
    assert var_11 == "link:[]"
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__len__()
    assert var_13 == 7
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*var_1)
    assert len(linked_list_1) == 96
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2097():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_3 = linked_list_0.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_1 = module_0.LinkedNode(list_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_3.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_4.checkInfinite()
    var_11 = var_10.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_12 = linked_node_6.checkInfinite()
    linked_node_7 = module_0.LinkedNode(var_12, linked_list_5)
    assert len(linked_node_7.next) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_13, linked_list_6)
    assert len(linked_node_9.next) == 0
    var_14 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_15 = linked_node_10.checkInfinite()
    var_16 = linked_node_10.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__iter__()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    var_20 = linked_list_0.__repr__()
    assert var_20 == "link:[]"
    var_20.pop()


@pytest.mark.xfail(strict=True)
def test_case_2099():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    str_1 = "2z8Y!\rS\\wS1L"
    bytes_1 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_2 = (str_1, bytes_1, list_1)
    list_2 = [tuple_2, list_1, str_1]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 3
    var_0 = linked_list_1.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    bool_0 = False
    set_0 = {bool_0}
    linked_node_3 = module_0.LinkedNode(set_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_1.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2102():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    linked_node_1 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_1.next) == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.prepend(bytes_0)
    assert len(linked_list_4) == 3
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__iter__()
    bool_0 = False
    set_0 = {bool_0}
    linked_node_2 = module_0.LinkedNode(set_0)
    var_11 = var_5.__iter__()
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2103():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_node_3.checkInfinite()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_8 = linked_list_7.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_4.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.remove(var_8)
    assert var_10 is False
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_9 = module_0.LinkedList(*list_0)
    assert len(linked_list_9) == 2
    var_11 = linked_list_9.prepend(bytes_0)
    assert len(linked_list_9) == 3
    var_12 = linked_list_4.remove(var_10)
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_2104():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_node_3.checkInfinite()
    none_type_1 = None
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(none_type_1)
    assert var_5 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_4 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_4, bytes_0, bytes_0, bytes_0}
    linked_node_5 = module_0.LinkedNode(set_0)
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2105():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(linked_list_2)
    assert var_5 is False
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    none_type_0 = None
    list_2 = [none_type_0]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList(*linked_list_4)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_3.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_15 = linked_list_6.remove(linked_list_6)
    var_16 = linked_list_6.__len__()
    assert var_16 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_17 = linked_node_4.checkInfinite()
    var_18 = linked_list_7.__repr__()
    assert var_18 == "link:[]"
    none_type_2 = None
    linked_node_5 = module_0.LinkedNode(none_type_2, var_18)
    assert linked_node_5.next == "link:[]"
    none_type_3 = None
    linked_node_6 = module_0.LinkedNode(none_type_3)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_19 = linked_node_7.checkInfinite()
    var_20 = var_19.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_20.__len__()
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    linked_node_9 = module_0.LinkedNode(linked_node_8)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_23 = linked_list_8.remove(none_type_4)
    complex_0 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_24 = linked_list_9.remove(linked_list_9)
    var_25 = var_24.__repr__()
    var_15.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__repr__()
    assert var_1 == "'link:[]'"
    var_2 = var_1.__repr__()
    assert var_2 == "\"'link:[]'\""
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2107():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    bool_1 = True
    linked_node_2 = module_0.LinkedNode(bool_1)
    var_2 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = var_7.__repr__()
    assert var_8 == "\"'link:[]'\""
    var_9 = var_7.__repr__()
    assert var_9 == "\"'link:[]'\""
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    none_type_0 = None
    var_10 = linked_list_4.remove(none_type_0)
    assert var_10 is False
    complex_2 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_node_6 = module_0.LinkedNode(complex_2)
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2108():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(var_5, linked_node_0)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_6 = linked_list_3.__repr__()
    assert (
        var_6
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_9 = linked_node_6.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_6.value) == 1
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[False]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_6.__len__()
    assert var_14 == 0
    var_15 = linked_list_6.__iter__()
    var_16 = var_15.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_17 = linked_node_8.checkInfinite()
    var_18 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_19 = linked_list_9.__repr__()
    assert var_19 == "link:[]"
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_20 = linked_list_10.remove(float_0)
    assert var_20 is False
    var_21 = linked_list_10.__repr__()
    assert (
        var_21
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_9 = module_0.LinkedNode(var_19)
    assert linked_node_9.value == "link:[]"
    var_2.pop()


def test_case_2109():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_9 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_11 = linked_list_5.pop()
    assert var_11 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_12 = var_11.__iter__()
    with pytest.raises(Exception):
        linked_list_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2110():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_2 = None
    linked_node_2 = module_0.LinkedNode(none_type_2)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()
    linked_node_4 = module_0.LinkedNode(var_4)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_6 = linked_list_2.prepend(bytes_1)
    assert len(linked_list_2) == 3
    var_7 = var_6.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_8.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2111():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_5 = module_0.LinkedNode(set_0, set_0)
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    bool_2 = True
    linked_node_6 = module_0.LinkedNode(bool_2)
    var_5 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_6 = linked_node_7.checkInfinite()
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_2112():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_1.checkInfinite()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_node_2.checkInfinite()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_4.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_node_5 = module_0.LinkedNode(var_8)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_list_5.__len__()
    assert var_12 == 0
    var_13 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_14 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_16 = linked_list_9.remove(dict_0)
    assert var_16 is True
    assert len(linked_list_9) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_17 = linked_node_10.checkInfinite()
    var_18 = linked_node_10.checkInfinite()
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    var_20 = linked_list_10.__iter__()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_21 = linked_list_13.__iter__()
    var_22 = linked_list_13.__iter__()
    var_8.remove(var_22)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_0.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_2.__len__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_2.remove(var_7)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2116():
    none_type_0 = None
    bytes_0 = b"\xb7\xbe\xbb\x14\xf9\xa6\xa5\x04"
    str_0 = "i?bd$f+"
    list_0 = [str_0, str_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 4
    var_1 = var_0.__repr__()
    var_1.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_0 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_0)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    var_9 = linked_list_2.__len__()
    assert var_9 == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_10 = linked_node_5.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[]"
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.remove(none_type_2)
    assert var_12 is False
    bool_0 = False
    linked_node_7 = module_0.LinkedNode(bool_0)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_0 = (str_0, bytes_3, list_1)
    list_2 = [tuple_0, list_1, str_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 3
    var_13 = linked_list_5.__repr__()
    assert (
        var_13
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_10.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2118():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__iter__()
    var_5 = linked_list_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_3.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(var_8)
    assert var_10 is False
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_2119():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_2.__iter__()
    var_6 = var_5.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__len__()
    assert var_10 == 7
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bool_0 = False
    linked_node_4 = module_0.LinkedNode(bool_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_6.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_12)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_node_5.checkInfinite()
    var_15 = linked_list_9.__len__()
    assert var_15 == 0
    var_16 = linked_list_9.__len__()
    assert var_16 == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_6.value) == 0
    var_17 = linked_node_6.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_6, linked_list_11, bytes_1, linked_node_6]
    linked_list_12 = module_0.LinkedList(*list_1)
    assert len(linked_list_12) == 4
    var_18 = linked_list_12.__len__()
    assert var_18 == 4
    linked_node_7 = module_0.LinkedNode(bytes_1, linked_node_6)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_19 = linked_list_13.remove(linked_list_13)
    assert var_19 is False
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_8.value) == 0
    var_20 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_20, linked_list_14)
    assert len(linked_node_9.next) == 0
    module_0.LinkedList(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    var_4.__iter__()


def test_case_2121():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    int_1 = -731
    list_1 = [int_1, int_1, int_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[-731,-731,-731]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList(*var_6)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0
    bool_0 = False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(bool_0)
    assert var_9 is False
    linked_node_3 = module_0.LinkedNode(var_9)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_10, linked_list_8)
    assert len(linked_node_5.next) == 0
    var_11 = linked_list_8.__len__()
    assert var_11 == 0
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_12 = linked_node_8.checkInfinite()
    linked_node_9 = module_0.LinkedNode(var_12, linked_list_10)
    assert len(linked_node_9.next) == 0
    var_13 = linked_list_10.__iter__()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    with pytest.raises(Exception):
        linked_list_11.pop()


@pytest.mark.xfail(strict=True)
def test_case_2122():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_5)
    assert len(linked_node_3.next) == 0
    var_7 = linked_list_5.__iter__()
    float_0 = -2122.54
    linked_node_4 = module_0.LinkedNode(float_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_8, linked_list_7)
    assert len(linked_node_6.next) == 0
    var_9 = linked_list_7.__len__()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    var_14 = linked_node_8.checkInfinite()
    var_15 = linked_list_10.__len__()
    assert var_15 == 0
    var_16 = linked_list_10.__len__()
    assert var_16 == 0
    var_17 = linked_list_10.remove(var_14)
    module_0.LinkedList(*var_9)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2125():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_1)
    assert len(linked_list_0) == 3
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_2 = linked_node_3.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_2.__len__()
    assert var_4 == 0
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2126():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_0.remove(linked_node_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    var_3 = var_2.__repr__()
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_3.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__repr__()
    linked_node_4 = module_0.LinkedNode(var_6)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_8 = linked_list_2.remove(linked_list_2)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 3
    var_11 = linked_list_3.__repr__()
    assert var_11 == "link:[-731,-731,-731]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    linked_list_5 = module_0.LinkedList(*var_12)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    var_17 = linked_list_7.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__len__()
    assert var_18 == 0
    linked_node_7 = module_0.LinkedNode(var_18)
    assert linked_node_7.value == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_19 = linked_node_8.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_20 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_20, linked_list_10)
    assert len(linked_node_10.next) == 0
    var_21 = linked_list_10.__len__()
    assert var_21 == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_2)
    var_18.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2128():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(linked_list_4)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_list_6.__len__()
    assert var_12 == 0
    var_13 = linked_list_6.__len__()
    assert var_13 == 0
    linked_node_5 = module_0.LinkedNode(var_13)
    assert linked_node_5.value == 0
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2129():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    linked_node_2 = module_0.LinkedNode(bytes_1, linked_node_1)
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2130():
    object_0 = module_1.object()
    str_0 = "e9~Kb6*}~`o%5R):"
    none_type_0 = None
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1, none_type_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is True
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    assert var_1 == "True"
    var_2 = var_1.__iter__()
    var_2.prepend(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    linked_node_4 = module_0.LinkedNode(var_8)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2132():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_8, linked_list_5)
    assert len(linked_node_3.next) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_7 = module_0.LinkedList(*list_0)
    assert len(linked_list_7) == 2
    var_9 = linked_list_7.remove(float_0)
    assert var_9 is False
    var_10 = linked_list_7.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 2
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_4.checkInfinite()
    var_12 = var_11.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_9.prepend(var_11)
    assert len(linked_list_9) == 1
    assert len(linked_node_5.value) == 1
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[False]"
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_16.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_18 = linked_list_11.remove(linked_list_11)
    assert var_18 is False
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_19 = linked_list_12.__repr__()
    assert var_19 == "link:[]"
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_13 = module_0.LinkedList(*list_1)
    assert len(linked_list_13) == 2
    var_20 = linked_list_13.remove(float_1)
    assert var_20 is False
    var_21 = linked_list_13.__repr__()
    assert (
        var_21
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_8 = module_0.LinkedNode(var_19)
    assert linked_node_8.value == "link:[]"
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    dict_0 = {
        linked_list_14: linked_list_14,
        linked_list_14: linked_list_14,
        linked_list_14: linked_list_14,
    }
    var_22 = linked_list_14.prepend(dict_0)
    assert len(linked_list_14) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    var_23 = linked_list_15.prepend(dict_0)
    assert len(linked_list_15) == 1
    var_21.remove(var_3)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    assert len(linked_node_2.value) == 1
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.pop()
    assert var_0 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_0) == 0
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(float_0, bytes_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    assert var_3 is False
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_4.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.prepend(linked_node_6)
    assert len(linked_list_5) == 1
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 3
    var_8 = linked_list_6.__repr__()
    assert var_8 == "link:[-731,-731,-731]"
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_1 = -3330
    tuple_0 = (int_1, int_1)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_1, bytes_2)
    list_3 = [str_0, tuple_1]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 2
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    dict_0 = {
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
        linked_list_8: linked_list_8,
    }
    var_9 = linked_list_8.prepend(dict_0)
    assert len(linked_list_8) == 1
    var_10 = linked_list_8.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_7 = module_0.LinkedNode(var_9)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_8.value) == 0
    var_11 = linked_node_8.checkInfinite()
    var_12 = linked_node_8.checkInfinite()
    var_13 = linked_list_10.__len__()
    assert var_13 == 0
    var_14 = linked_list_10.__len__()
    assert var_14 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_15 = linked_node_9.checkInfinite()
    var_16 = var_6.__iter__()
    var_16.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_0.remove(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_8 = linked_node_2.checkInfinite()
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_11 = linked_list_3.__len__()
    assert var_11 == 0
    linked_node_3 = module_0.LinkedNode(var_11)
    assert linked_node_3.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_12 = linked_list_4.__iter__()
    var_13 = var_12.__repr__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_0 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_14 = linked_node_4.checkInfinite()
    var_15 = linked_node_4.checkInfinite()
    var_16 = var_15.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.__repr__()
    assert var_17 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_1)
    var_18 = linked_node_5.checkInfinite()
    var_19 = var_17.__repr__()
    assert var_19 == "'link:[]'"
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[False]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2138():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == "0"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_6, linked_list_1)
    assert len(linked_node_6.next) == 0
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_7 = module_0.LinkedNode(set_0, set_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_7 = linked_list_2.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_8 = var_7.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    assert var_9 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = var_9.__repr__()
    var_4.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2139():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    linked_node_2 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_2.next) == 0
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_3 = var_2.__iter__()
    list_1 = []
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 0
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_4 = module_0.LinkedNode(set_0, set_0)
    list_2 = [bool_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    var_4 = linked_list_5.remove(set_0)
    assert var_4 is False
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_1 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_1)
    list_3 = [str_0, tuple_1]
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 2
    var_5 = linked_list_6.prepend(bytes_1)
    assert len(linked_list_6) == 3
    var_6 = var_5.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_7 = linked_node_5.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    var_9 = var_3.__iter__()
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2140():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2141():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_4.__repr__()
    assert var_10 == "link:[]"
    var_11 = linked_list_5.prepend(var_10)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_12 = linked_node_4.checkInfinite()
    var_13 = var_12.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_14 = linked_list_6.remove(float_0)
    assert var_14 is False
    var_15 = linked_list_6.__repr__()
    assert (
        var_15
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__repr__()
    assert var_17 == "'link:[]'"
    var_18 = var_17.__repr__()
    assert var_18 == "\"'link:[]'\""
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_19 = linked_list_8.remove(float_1)
    assert var_19 is False
    linked_node_5 = module_0.LinkedNode(float_1, bytes_2)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_20 = linked_node_6.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_node_7.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_23 = linked_list_10.prepend(var_22)
    assert len(linked_list_10) == 1
    assert len(linked_node_7.value) == 1
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_2142():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_9.__len__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_12 = linked_list_5.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_5.__iter__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_2 = b""
    tuple_0 = (dict_0, bytes_2, bool_0)
    linked_node_6 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_14 = linked_list_6.remove(bytes_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_8.value) == 0
    var_15 = linked_node_8.checkInfinite()
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_8.__len__()
    assert var_17 == 0
    var_18 = linked_list_7.__iter__()
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_4 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_1 = []
    tuple_1 = (str_0, bytes_4, list_1)
    list_2 = [tuple_1, list_1, str_0]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 3
    var_19 = linked_list_9.__repr__()
    assert (
        var_19
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_5 = b"\x87\x82\x9a#\xdbB\x0f"
    list_3 = [bytes_5]
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 1
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 1
    list_4 = [linked_node_9, list_3, bytes_5, linked_node_9]
    list_5 = [list_4, list_3, list_3, list_3]
    linked_list_11 = module_0.LinkedList(*list_5)
    assert len(linked_list_11) == 4
    bytes_6 = b""
    var_9.remove(bytes_6)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_list_1.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_2)
    linked_node_3 = module_0.LinkedNode(complex_2)
    complex_3 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_4)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(linked_node_5)
    assert len(linked_list_2) == 1
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2144():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_10 = linked_list_4.prepend(linked_node_8)
    assert len(linked_list_4) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    complex_4 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_list_6.__iter__()
    var_6.remove(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    bytes_1 = b"U"
    set_1 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_1, set_1]
    linked_node_1 = module_0.LinkedNode(list_1)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_3.__repr__()
    assert var_5 == "'link:[]'"
    linked_list_2 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__len__()
    assert var_9 == 0
    var_10 = linked_list_4.remove(var_7)
    assert var_10 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__repr__()
    assert var_11 == "link:[]"
    var_12 = linked_node_3.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_node_4.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_1)
    var_15 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_16 = linked_node_6.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_6, linked_list_8, bytes_2, linked_node_6]
    linked_list_9 = module_0.LinkedList(*list_2)
    assert len(linked_list_9) == 4
    var_17 = linked_list_9.__len__()
    assert var_17 == 4
    var_18 = linked_list_9.__repr__()
    list_3 = []
    linked_list_10 = module_0.LinkedList(*list_3)
    assert len(linked_list_10) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_3, bytes_3]
    linked_list_11 = module_0.LinkedList(*list_4)
    assert len(linked_list_11) == 2
    var_19 = linked_list_11.remove(float_0)
    assert var_19 is False
    var_20 = linked_list_11.__repr__()
    assert (
        var_20
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_7.value) == 0
    var_21 = linked_node_7.checkInfinite()
    var_22 = linked_node_7.checkInfinite()
    var_23 = linked_list_13.__len__()
    assert var_23 == 0
    var_24 = linked_list_13.__len__()
    assert var_24 == 0
    var_13.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2146():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    var_2 = linked_list_2.__iter__()
    bool_1 = False
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.remove(bool_1)
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(var_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    module_0.LinkedList(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_0 = module_0.LinkedNode(bytes_0, bytes_0)
    set_0 = {linked_node_0, bytes_0, bytes_0, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__iter__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2148():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    var_3 = linked_list_1.pop()
    assert len(linked_list_1) == 3
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_3.value).__module__}.{type(var_3.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_3.value) == 0
    assert var_3.next is None
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_0)
    linked_node_1 = module_0.LinkedNode(tuple_0, bool_0)
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_2)
    linked_node_3 = module_0.LinkedNode(linked_node_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(linked_list_2)
    assert var_4 is False
    float_0 = -2122.54
    linked_node_4 = module_0.LinkedNode(float_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__repr__()
    linked_node_7 = module_0.LinkedNode(var_7)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_9 = linked_list_3.remove(linked_list_3)
    var_10 = linked_list_3.__len__()
    assert var_10 == 0
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2149():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, var_3)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_1)
    module_0.LinkedList(*var_4)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    bool_1 = False
    linked_node_1 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    list_1 = []
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__len__()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = var_2.__repr__()
    assert var_3 == "\"'link:[]'\""
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    var_4 = linked_node_3.checkInfinite()
    assert var_4 is False
    var_1.remove(linked_list_0)


def test_case_2151():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_4 = module_0.LinkedNode(none_type_1)
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    with pytest.raises(Exception):
        linked_list_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2152():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    bytes_1 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.prepend(bytes_1)
    assert len(linked_list_4) == 1
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 2
    var_5 = linked_list_6.remove(float_1)
    assert var_5 is False
    var_6 = linked_list_6.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_3)
    var_7 = linked_node_1.checkInfinite()
    assert var_7 is False
    var_8 = var_7.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    var_10 = linked_list_8.prepend(var_7)
    assert len(linked_list_8) == 1
    assert len(linked_node_2.value) == 1
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[False]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_3.value) == 0
    var_12 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_12, linked_list_10)
    assert len(linked_node_4.next) == 0
    var_13 = linked_list_10.__len__()
    assert var_13 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_5.value) == 0
    var_14 = linked_node_5.checkInfinite()
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_6.value) == 0
    var_15 = linked_node_6.checkInfinite()
    var_16 = linked_node_6.checkInfinite()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_17 = linked_list_12.prepend(var_16)
    assert len(linked_list_12) == 1
    assert len(linked_node_6.value) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_14.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2153():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    complex_0 = -367.4 - 1678j
    linked_node_0 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, var_1)
    linked_node_3 = module_0.LinkedNode(var_2)
    bool_1 = True
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    list_2 = [list_1]
    linked_list_2 = module_0.LinkedList(*list_2)
    assert len(linked_list_2) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == "0"
    var_5 = var_4.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_6 = linked_node_6.checkInfinite()
    var_7 = linked_node_6.checkInfinite()
    var_8 = linked_list_4.__iter__()
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_3 = [str_0, tuple_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.prepend(bytes_0)
    assert len(linked_list_5) == 3
    var_10 = var_9.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_4)
    assert len(linked_list_6) == 2
    var_11 = linked_list_6.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_6.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.__iter__()
    var_14 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_node_7.checkInfinite()
    var_17 = linked_list_9.__len__()
    assert var_17 == 0
    var_18 = linked_list_9.__len__()
    assert var_18 == 0
    linked_node_8 = module_0.LinkedNode(var_18)
    assert linked_node_8.value == 0
    var_19 = linked_list_9.__repr__()
    assert var_19 == "link:[]"
    var_16.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_2 = linked_node_2.checkInfinite()
    var_3 = var_2.__repr__()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_7 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_8 = linked_list_4.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_4.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_6.prepend(var_12)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    var_8.prepend(linked_node_2)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.remove(linked_list_2)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    var_4 = var_3.__repr__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_9 = linked_node_2.checkInfinite()
    assert var_9 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_2, linked_list_6, bytes_0, linked_node_2]
    linked_list_7 = module_0.LinkedList(*list_2)
    assert len(linked_list_7) == 4
    var_10 = linked_list_7.__len__()
    assert var_10 == 4
    linked_node_3 = module_0.LinkedNode(bytes_0, linked_node_2)
    var_5.remove(list_2)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    var_3 = linked_list_0.__len__()
    assert var_3 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_4 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_node_3.checkInfinite()
    var_1.checkInfinite()


def test_case_2158():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(var_4)
    assert var_6 is False
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.remove(linked_list_4)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_list_5.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_6.prepend(var_13)
    assert len(linked_list_6) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(linked_list_6, linked_node_5)
    assert len(linked_node_6.value) == 1
    var_15 = linked_list_5.prepend(var_14)
    assert len(linked_list_5) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = var_16.__repr__()
    assert var_17 == "0"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_18 = linked_node_7.checkInfinite()
    var_19 = var_18.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_4)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_2 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_2)
    list_0 = [str_0, tuple_1]
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 2
    var_20 = linked_list_10.prepend(bytes_2)
    assert len(linked_list_10) == 3
    none_type_0 = None
    linked_node_11 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_12 = module_0.LinkedNode(bytes_3)
    var_21 = linked_node_12.checkInfinite()
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__repr__()
    with pytest.raises(Exception):
        linked_list_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2159():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = var_2.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_3.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.remove(var_4)
    assert var_6 is False
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_4.checkInfinite()
    var_8 = var_7.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_4.prepend(var_7)
    assert len(linked_list_4) == 1
    assert len(linked_node_5.value) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_4)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == "0"
    var_13 = var_12.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    dict_0 = {
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
        linked_list_6: linked_list_6,
    }
    var_14 = linked_list_6.prepend(dict_0)
    assert len(linked_list_6) == 1
    complex_5 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_5)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_15 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_16 = linked_list_7.remove(dict_0)
    assert var_16 is True
    assert len(linked_list_7) == 0
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    var_20 = var_18.__len__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_11.value) == 0
    var_21 = linked_node_11.checkInfinite()
    var_22 = linked_node_11.checkInfinite()
    var_23 = linked_list_9.__repr__()
    assert var_23 == "link:[]"
    var_24 = linked_list_10.prepend(var_23)
    assert len(linked_list_10) == 1
    assert len(linked_node_11.value) == 1
    linked_node_12 = module_0.LinkedNode(var_24, linked_node_11)
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_3 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_3, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_11 = module_0.LinkedList(*list_1)
    assert len(linked_list_11) == 3
    var_25 = linked_list_11.__repr__()
    assert (
        var_25
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_5.remove(var_7)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = linked_list_0.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.pop()
    assert var_2 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_1) == 0
    var_3 = var_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(linked_node_3)
    assert len(linked_list_2) == 1
    tuple_0 = ()
    linked_node_4 = module_0.LinkedNode(tuple_0)
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.__repr__()
    assert var_5 == "link:[]"
    var_6 = linked_node_5.checkInfinite()
    assert var_6 is False
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2161():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2162():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_1 = module_0.LinkedNode(var_3)
    assert linked_node_1.value == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_7 = linked_list_6.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_6.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_3 = module_0.LinkedNode(var_6)
    assert linked_node_3.value == "link:[]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_2 = [linked_node_4, linked_list_7, bytes_1, linked_node_4]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 4
    var_10 = linked_list_8.__len__()
    assert var_10 == 4
    var_11 = linked_list_8.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_12 = linked_list_9.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = var_13.__repr__()
    assert var_15 == "\"'link:[]'\""
    var_15.checkInfinite()


def test_case_2163():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_2, linked_list_2, bytes_0, linked_node_2]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 4
    var_5 = linked_list_3.__len__()
    assert var_5 == 4
    linked_node_3 = module_0.LinkedNode(bytes_0, linked_node_2)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = linked_list_5.remove(var_7)
    var_11 = linked_list_5.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_12 = linked_node_5.checkInfinite()
    var_13 = var_12.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_6.value) == 0
    var_14 = linked_node_6.checkInfinite()
    var_15 = linked_list_6.prepend(var_12)
    assert len(linked_list_6) == 1
    assert len(linked_node_6.value) == 1
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_16 = linked_list_7.remove(float_0)
    assert var_16 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_list_9.__iter__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_list_10.__iter__()
    bool_0 = True
    linked_node_10 = module_0.LinkedNode(bool_0)
    var_22 = linked_node_10.checkInfinite()
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_11.value) == 0
    var_23 = linked_node_11.checkInfinite()
    var_24 = linked_node_11.checkInfinite()
    var_25 = linked_list_11.prepend(var_23)
    assert len(linked_list_11) == 1
    none_type_1 = None
    linked_node_12 = module_0.LinkedNode(none_type_1)
    linked_node_13 = module_0.LinkedNode(none_type_1)
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_13 = module_0.LinkedList(*list_2)
    assert len(linked_list_13) == 2
    var_26 = linked_list_13.remove(float_1)
    assert var_26 is False
    linked_node_14 = module_0.LinkedNode(float_1, bytes_3)
    with pytest.raises(Exception):
        linked_list_8.pop()


def test_case_2164():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.remove(bool_0)
    assert var_5 is False
    linked_node_1 = module_0.LinkedNode(var_5)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, linked_list_3)
    assert len(linked_node_3.next) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_7 = linked_node_5.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_node_7 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.prepend(linked_node_9)
    assert len(linked_list_6) == 1
    with pytest.raises(Exception):
        linked_list_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2166():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_6 = linked_list_2.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_2.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*var_7)
    assert len(linked_list_3) == 96
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_0.checkInfinite()
    assert var_9 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(var_8)
    assert var_10 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_1.value) == 0
    var_11 = linked_node_1.checkInfinite()
    var_12 = linked_node_1.checkInfinite()
    var_13 = linked_list_7.__len__()
    assert var_13 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    var_15 = var_14.__repr__()
    assert var_15 == "'link:[]'"
    var_16 = var_15.__repr__()
    assert var_16 == "\"'link:[]'\""
    var_8.remove(linked_list_2)


def test_case_2167():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_2 = linked_list_0.__len__()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == "0"
    var_4 = var_3.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__iter__()
    var_6 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_2.__repr__()
    assert var_8 == "link:[]"
    bool_0 = False
    set_0 = {bool_0}
    linked_node_4 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_6.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_7 = module_0.LinkedNode(var_11)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_8.value) == 0
    var_13 = linked_node_8.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_8, linked_list_3, bytes_2, linked_node_8]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_14 = linked_list_4.__len__()
    assert var_14 == 4
    var_15 = linked_list_4.__repr__()
    float_0 = -2122.54
    linked_node_9 = module_0.LinkedNode(float_0)
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_16 = linked_list_5.__repr__()
    assert var_16 == "link:[]"
    var_17 = linked_node_10.checkInfinite()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    with pytest.raises(Exception):
        linked_list_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2168():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    var_6 = linked_list_2.__len__()
    assert var_6 == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 3
    var_7 = linked_list_3.__repr__()
    assert var_7 == "link:[-731,-731,-731]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    linked_list_5 = module_0.LinkedList(*var_8)
    assert (
        f"{type(linked_list_5).__module__}.{type(linked_list_5).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_5) == 0
    module_0.LinkedList(*var_4)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 4
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    var_5 = var_4.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    bool_1 = False
    linked_node_3 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, none_type_0)
    list_1 = []
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_2 = [set_0, set_0]
    linked_node_5 = module_0.LinkedNode(list_2)
    var_11 = linked_node_5.checkInfinite()
    var_12 = var_10.__repr__()
    assert var_12 == "'link:[]'"
    linked_list_8 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_13 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.prepend(dict_0)
    assert len(linked_list_10) == 1
    var_15 = linked_list_10.remove(dict_0)
    assert var_15 is True
    assert len(linked_list_10) == 0
    int_0 = 720
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_16 = linked_list_11.remove(int_0)
    assert var_16 is False
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.remove(linked_list_12)
    var_18 = linked_list_12.__len__()
    assert var_18 == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_7.value) == 0
    var_19 = linked_node_7.checkInfinite()
    var_20 = linked_list_13.__repr__()
    assert var_20 == "link:[]"
    none_type_1 = None
    linked_node_8 = module_0.LinkedNode(none_type_1, var_20)
    assert linked_node_8.next == "link:[]"
    bool_2 = True
    linked_node_9 = module_0.LinkedNode(bool_2)
    var_21 = linked_node_9.checkInfinite()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_15)
    assert len(linked_node_10.value) == 0
    var_22 = linked_node_10.checkInfinite()
    var_23 = linked_node_10.checkInfinite()
    var_24 = linked_list_14.prepend(var_22)
    assert len(linked_list_14) == 1
    var_22.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = 1142
    list_0 = [int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.__len__()
    assert var_0 == 2
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2171():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.remove(var_5)
    assert var_8 is False
    var_9 = linked_list_3.__iter__()
    var_8.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2172():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    linked_node_1 = module_0.LinkedNode(bytes_0, linked_node_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_node_3 = module_0.LinkedNode(var_5)
    assert linked_node_3.value == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_7 = var_6.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_2)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_node_7.checkInfinite()
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_3)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    bytes_4 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_4)
    bool_0 = False
    linked_node_11 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_12 = module_0.LinkedNode(none_type_0, none_type_0)
    list_2 = []
    linked_list_11 = module_0.LinkedList(*list_2)
    assert len(linked_list_11) == 0
    var_15 = linked_list_11.__len__()
    assert var_15 == 0
    var_5.prepend(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    int_0 = 720
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(int_0)
    assert var_0 is False
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2174():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_3.checkInfinite()
    var_4 = var_3.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    var_8 = linked_list_5.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    bool_0 = False
    linked_node_6 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0, none_type_0)
    list_0 = []
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    var_1.prepend(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.prepend(linked_node_4)
    assert len(linked_list_3) == 1
    bytes_0 = b"\x87\x82\x9a#\xdbB\x0f"
    list_0 = [bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 1
    list_1 = [linked_node_5, list_0, bytes_0, linked_node_5]
    list_2 = [list_1, list_0, list_0, list_0]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    var_5 = linked_node_6.checkInfinite()
    var_6 = linked_list_6.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_list_7.prepend(var_6)
    assert len(linked_list_7) == 1
    assert len(linked_node_6.value) == 1
    linked_node_7 = module_0.LinkedNode(linked_list_7, linked_node_6)
    assert len(linked_node_7.value) == 1
    bool_0 = True
    list_3 = [bool_0, bool_0, bool_0, bool_0]
    list_4 = [list_3]
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 1
    var_8 = linked_list_8.__repr__()
    assert var_8 == "link:[[True, True, True, True]]"
    bool_1 = False
    list_5 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_9 = module_0.LinkedList(*list_5)
    assert len(linked_list_9) == 4
    var_9 = linked_list_9.__iter__()
    var_9.remove(linked_node_3)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(linked_list_1)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2177():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2178():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    var_1.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    var_3 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_5 = linked_node_3.checkInfinite()
    var_6 = var_4.__repr__()
    assert var_6 == "'link:[]'"
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_2]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 1
    list_2 = [linked_node_4, list_1, bytes_2, linked_node_4]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_3.prepend(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_1 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_1)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = var_1.__repr__()
    assert var_3 == "'link:[]'"
    module_0.LinkedList(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_2, var_2)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_list_4.prepend(var_8)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_2]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.pop()
    assert var_10 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_11 = var_10.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_14 = linked_list_7.remove(var_12)
    assert var_14 is False
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_15 = linked_list_8.__repr__()
    assert var_15 == "link:[]"
    var_16 = var_15.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_5.value) == 0
    var_17 = linked_node_5.checkInfinite()
    var_18 = linked_node_5.checkInfinite()
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    var_19 = linked_list_10.__iter__()
    var_1.remove(linked_list_10)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_1 = linked_list_1.remove(bytes_0)
    none_type_1 = None
    linked_node_1 = module_0.LinkedNode(none_type_1)
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    var_0.prepend(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)
    list_0 = [bool_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.remove(set_0)
    assert var_0 is False
    var_0.prepend(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_1]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 1
    var_9 = linked_list_8.pop()
    assert var_9 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_8) == 0
    var_10 = var_9.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.__iter__()
    var_12 = var_11.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_13 = linked_list_10.__repr__()
    assert var_13 == "link:[]"
    var_14 = var_13.__repr__()
    assert var_14 == "'link:[]'"
    var_15 = var_14.__repr__()
    assert var_15 == "\"'link:[]'\""
    var_16 = var_14.__repr__()
    assert var_16 == "\"'link:[]'\""
    bytes_2 = b"\x87\x82\x9a#\xdbB\x0f"
    list_3 = [bytes_2]
    linked_list_11 = module_0.LinkedList(*list_3)
    assert len(linked_list_11) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_4.value) == 1
    list_4 = [linked_node_4, list_3, bytes_2, linked_node_4]
    list_5 = [list_4, list_3, list_3, list_3]
    linked_list_12 = module_0.LinkedList(*list_5)
    assert len(linked_list_12) == 4
    var_5.remove(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.prepend(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_2.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    float_0 = -2122.54
    linked_node_3 = module_0.LinkedNode(float_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.__repr__()
    assert var_2 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_2 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_2)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_2.__repr__()
    assert var_4 == "'link:[]'"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_5.prepend(var_7)
    assert len(linked_list_5) == 1
    assert len(linked_node_5.value) == 1
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    bool_1 = False
    linked_node_7 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0, none_type_0)
    list_3 = []
    linked_list_6 = module_0.LinkedList(*list_3)
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    bool_2 = False
    set_1 = {bool_2}
    linked_node_9 = module_0.LinkedNode(set_1)
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_node_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2189():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 1
    list_2 = [linked_node_1, list_1, bytes_1, linked_node_1]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_3 = module_0.LinkedList(*list_3)
    assert len(linked_list_3) == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_2 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_2 = linked_list_5.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_4 = linked_list_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    var_5 = linked_list_7.__repr__()
    assert var_5 == "link:[]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_6 = linked_list_8.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__len__()
    assert var_7 == 7
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    assert var_8 is False
    linked_node_6 = module_0.LinkedNode(var_8, linked_list_9)
    assert len(linked_node_6.next) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_7.value) == 0
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_node_7.checkInfinite()
    var_11 = linked_list_12.__len__()
    assert var_11 == 0
    var_12 = linked_list_12.__len__()
    assert var_12 == 0
    var_13 = linked_list_12.remove(var_10)
    assert var_13 is False
    var_14 = linked_list_12.__iter__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    complex_3 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_3)
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_15 = linked_list_13.remove(linked_list_13)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_14)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_4 = [linked_node_10, linked_list_14, bytes_3, linked_node_10]
    linked_list_15 = module_0.LinkedList(*list_4)
    assert len(linked_list_15) == 4
    var_20 = linked_list_15.__len__()
    assert var_20 == 4
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_11 = module_0.LinkedNode(bytes_4)
    var_21 = linked_node_11.checkInfinite()
    var_22 = var_21.__repr__()
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_16)
    assert len(linked_node_12.value) == 0
    var_23 = linked_node_12.checkInfinite()
    var_24 = linked_list_16.prepend(var_21)
    assert len(linked_list_16) == 1
    assert len(linked_node_12.value) == 1
    var_25 = linked_list_16.__repr__()
    assert var_25 == "link:[False]"
    linked_list_17 = module_0.LinkedList()
    assert len(linked_list_17) == 0
    linked_node_13 = module_0.LinkedNode(linked_list_17)
    assert len(linked_node_13.value) == 0
    var_26 = linked_node_13.checkInfinite()
    linked_node_14 = module_0.LinkedNode(var_26)
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_2190():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    list_1 = [linked_list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__len__()
    assert var_0 == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_1, var_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_5 = linked_list_5.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__len__()
    assert var_6 == 7
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 3
    var_7 = linked_list_6.__repr__()
    assert var_7 == "link:[-731,-731,-731]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_node_4 = module_0.LinkedNode(linked_node_3)
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_8 = linked_list_8.__repr__()
    assert var_8 == "link:[]"
    var_9 = linked_node_5.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_10 = linked_list_9.__iter__()
    var_11 = var_10.__repr__()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = linked_list_10.__repr__()
    assert var_12 == "link:[]"
    var_13 = var_12.__repr__()
    assert var_13 == "'link:[]'"
    var_14 = var_13.__repr__()
    assert var_14 == "\"'link:[]'\""
    var_15 = var_13.__repr__()
    assert var_15 == "\"'link:[]'\""
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_16 = linked_list_11.remove(bytes_1)
    assert var_16 is False
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.__repr__()
    assert var_17 == "link:[]"
    var_18 = var_17.__repr__()
    assert var_18 == "'link:[]'"
    var_19 = var_18.__repr__()
    assert var_19 == "\"'link:[]'\""
    list_3 = []
    linked_list_13 = module_0.LinkedList(*list_3)
    assert len(linked_list_13) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_2, bytes_2]
    linked_list_14 = module_0.LinkedList(*list_4)
    assert len(linked_list_14) == 2
    var_20 = linked_list_14.remove(float_0)
    assert var_20 is False
    var_21 = linked_list_14.__repr__()
    assert (
        var_21
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_18.remove(linked_list_14)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(bool_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_3.checkInfinite()
    assert var_1 is False
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_3 = linked_node_4.checkInfinite()
    var_4 = linked_list_2.prepend(var_1)
    assert len(linked_list_2) == 1
    assert len(linked_node_4.value) == 1
    var_5 = var_2.__repr__()
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_6 = linked_list_3.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_3.__repr__()
    assert (
        var_7
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_7)
    assert len(linked_list_4) == 96
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2192():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    list_1 = [linked_list_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.__len__()
    assert var_4 == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.remove(linked_list_4)
    assert var_5 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_node_4 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.prepend(linked_node_6)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_10)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_node_7.checkInfinite()
    var_14 = linked_list_9.__repr__()
    assert var_14 == "link:[]"
    complex_3 = 4095.03 - 599.647583j
    linked_node_8 = module_0.LinkedNode(complex_3)
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_9 = module_0.LinkedNode(list_2)
    var_15 = linked_node_9.checkInfinite()
    var_6.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    bool_1 = True
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    list_2 = [list_1]
    linked_list_1 = module_0.LinkedList(*list_2)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__iter__()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_4.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_11 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_12 = linked_node_5.checkInfinite()
    var_13 = linked_node_5.checkInfinite()
    var_14 = linked_list_6.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_5.value) == 1
    linked_node_6 = module_0.LinkedNode(linked_list_7, linked_node_5)
    assert len(linked_node_6.value) == 1
    var_16 = linked_list_6.prepend(var_15)
    assert len(linked_list_6) == 1
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2194():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_2, linked_node_3)
    assert len(linked_node_4.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__repr__()
    assert (
        var_8
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_5 = module_0.LinkedNode(var_6)
    assert linked_node_5.value == "link:[]"
    var_4.remove(linked_list_4)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_0 = linked_list_1.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_1.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_2, var_2)
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[-731,-731,-731]"
    var_5 = linked_list_3.prepend(linked_list_3)
    assert len(linked_list_3) == 4
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_7)
    assert len(linked_node_5.next) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_node_8 = module_0.LinkedNode(none_type_0)
    none_type_1 = None
    list_2 = [none_type_1]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList(*linked_list_8)
    assert (
        f"{type(linked_list_9).__module__}.{type(linked_list_9).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_9) == 1
    var_11 = linked_list_9.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    module_1.object(**var_1)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_1.prepend(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(none_type_0)
    assert len(linked_list_0) == 1
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2198():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_6 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    var_9 = linked_list_3.__len__()
    assert var_9 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_10 = linked_node_3.checkInfinite()
    linked_node_4 = module_0.LinkedNode(var_10, linked_list_4)
    assert len(linked_node_4.next) == 0
    var_11 = linked_list_4.__iter__()
    var_2.remove(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_4 = linked_list_0.prepend(var_3)
    assert len(linked_list_0) == 1
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_4.__iter__()
    var_9 = var_8.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_10 = linked_list_5.remove(linked_list_5)
    assert var_10 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_2 = []
    tuple_0 = (str_0, bytes_0, list_2)
    list_3 = [tuple_0, list_2, str_0]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 3
    var_11 = linked_list_7.__repr__()
    assert (
        var_11
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_10.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2200():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2201():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_2.__len__()
    int_0 = 720
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.remove(int_0)
    assert var_5 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == "0"
    bytes_1 = b"\x87\x82\x9a#\xdbB\x0f"
    list_1 = [bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    linked_node_5 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_5.value) == 1
    list_2 = [linked_node_5, list_1, bytes_1, linked_node_5]
    list_3 = [list_2, list_1, list_1, list_1]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 4
    float_0 = -2122.54
    linked_node_6 = module_0.LinkedNode(float_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_node_7.checkInfinite()
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    linked_node_8 = module_0.LinkedNode(var_11)
    assert linked_node_8.value == 0
    var_12 = var_10.__repr__()
    assert var_12 == "0"
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2202():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_node_1 = module_0.LinkedNode(linked_list_1, linked_node_0)
    assert len(linked_node_1.value) == 1
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2203():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(linked_list_1)
    assert var_0 is False
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 0
    list_1 = [linked_list_2]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 1
    var_2 = linked_list_3.__len__()
    assert var_2 == 1
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__iter__()
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_0]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    var_8 = linked_list_6.pop()
    assert var_8 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_6) == 0
    var_9 = var_8.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2204():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.prepend(bytes_0)
    assert len(linked_list_3) == 3
    var_5 = var_4.__repr__()
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(bool_0)
    assert var_6 is False
    linked_node_4 = module_0.LinkedNode(var_6)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_7 = linked_node_5.checkInfinite()
    linked_node_6 = module_0.LinkedNode(var_7, linked_list_5)
    assert len(linked_node_6.next) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_1 = None
    linked_node_7 = module_0.LinkedNode(none_type_1)
    linked_node_8 = module_0.LinkedNode(none_type_1)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_0)
    assert var_8 is False
    linked_node_9 = module_0.LinkedNode(float_0, bytes_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_9 = linked_list_8.__repr__()
    assert var_9 == "link:[]"
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_2 = [set_0, set_0]
    linked_node_10 = module_0.LinkedNode(list_2)
    var_10 = linked_node_10.checkInfinite()
    var_11 = var_9.__repr__()
    assert var_11 == "'link:[]'"
    var_12 = linked_list_8.__len__()
    assert var_12 == 0
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_3 = [bytes_3, bytes_3]
    linked_list_9 = module_0.LinkedList(*list_3)
    assert len(linked_list_9) == 2
    var_13 = linked_list_9.remove(float_1)
    assert var_13 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_11 = module_0.LinkedNode(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_14 = linked_list_10.__len__()
    assert var_14 == 0
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_2205():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.prepend(var_4)
    assert len(linked_list_2) == 1
    assert len(linked_node_1.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_0 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_6 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_8 = linked_list_5.remove(dict_0)
    assert var_8 is True
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_7.__len__()
    assert var_11 == 0
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 3
    var_12 = linked_list_8.__repr__()
    assert (
        var_12
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2206():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_node_1 = module_0.LinkedNode(var_0, var_0)
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(linked_list_2)
    assert var_3 is False
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.pop()
    assert var_4 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_5 = var_4.__iter__()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_4.prepend(var_6)
    assert len(linked_list_4) == 1
    assert len(linked_node_3.value) == 1
    var_10 = var_7.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_11 = linked_node_4.checkInfinite()
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_list_5.__iter__()
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_6.checkInfinite()
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__repr__()
    linked_node_7 = module_0.LinkedNode(var_16)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_18 = linked_node_8.checkInfinite()
    var_19 = linked_node_8.checkInfinite()
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    var_21 = linked_list_7.__len__()
    assert var_21 == 0
    linked_node_9 = module_0.LinkedNode(var_21)
    assert linked_node_9.value == 0
    var_22 = var_20.__repr__()
    assert var_22 == "0"
    var_8.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2207():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_0)
    var_3 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, var_4)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    var_8 = linked_list_5.__len__()
    assert var_8 == 0
    var_9 = linked_list_4.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_10 = linked_list_8.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_list_1.__len__()
    assert var_4 == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_1.remove(var_3)
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, var_7)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_13 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = var_13.__repr__()
    bool_0 = False
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.remove(bool_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_16 = linked_node_6.checkInfinite()
    var_17 = var_16.__repr__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    bool_1 = False
    linked_node_8 = module_0.LinkedNode(bool_1)
    none_type_1 = None
    linked_node_9 = module_0.LinkedNode(none_type_1, none_type_1)
    list_0 = []
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 0
    var_20 = linked_list_10.__len__()
    assert var_20 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_21 = linked_node_10.checkInfinite()
    var_22 = linked_list_11.remove(linked_node_10)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_13)
    assert len(linked_node_11.value) == 0
    var_23 = linked_node_11.checkInfinite()
    var_24 = linked_node_11.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_12 = module_0.LinkedNode(complex_0)
    var_25 = linked_list_13.__iter__()
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    var_6.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, bool_0)
    linked_node_0 = module_0.LinkedNode(tuple_0, bool_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_node_2 = module_0.LinkedNode(var_3)
    assert linked_node_2.value == 0
    var_4 = linked_list_1.__repr__()
    assert var_4 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_8 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_5, bytes_1, linked_node_4]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 4
    var_9 = linked_list_6.__len__()
    assert var_9 == 4
    linked_node_5 = module_0.LinkedNode(bytes_1, linked_node_4)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = linked_node_6.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_0)
    var_12 = linked_list_8.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    complex_1 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_1)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_10.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_11.prepend(var_15)
    assert len(linked_list_11) == 1
    assert len(linked_node_9.value) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    var_17 = linked_list_12.__repr__()
    assert var_17 == "link:[]"
    var_18 = linked_node_10.checkInfinite()
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_19 = linked_list_13.remove(var_17)
    assert var_19 is False
    linked_list_14 = module_0.LinkedList()
    assert len(linked_list_14) == 0
    linked_list_15 = module_0.LinkedList()
    assert len(linked_list_15) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_15)
    assert len(linked_node_11.value) == 0
    var_20 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_20, linked_list_15)
    assert len(linked_node_12.next) == 0
    var_21 = linked_list_15.__len__()
    assert var_21 == 0
    linked_node_13 = module_0.LinkedNode(linked_node_12)
    linked_list_16 = module_0.LinkedList()
    assert len(linked_list_16) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_16)
    assert len(linked_node_14.value) == 0
    var_22 = linked_node_14.checkInfinite()
    var_23 = linked_node_14.checkInfinite()
    var_24 = var_23.__repr__()
    linked_node_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2210():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"1~~\x99(\x8e\x0ey/\xdf\xd7\xcd\xa2q\x0e"
    float_0 = 1864.27
    list_0 = [bytes_0, float_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    str_0 = ";.q8yO,\n`Db<@A|xjR"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_0 = linked_list_2.__len__()
    assert var_0 == 0
    var_0.prepend(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_4.checkInfinite()
    var_4 = var_3.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_6 = module_0.LinkedNode(none_type_1)
    var_4.remove(bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.remove(var_5)
    assert var_8 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.__repr__()
    assert var_9 == "link:[]"
    var_10 = var_9.__repr__()
    assert var_10 == "'link:[]'"
    var_11 = var_10.__repr__()
    assert var_11 == "\"'link:[]'\""
    var_12 = var_10.__repr__()
    assert var_12 == "\"'link:[]'\""
    var_5.remove(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(none_type_0)
    linked_node_4 = module_0.LinkedNode(none_type_0)
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(bool_0)
    assert var_1 is False
    linked_node_5 = module_0.LinkedNode(var_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    var_1.prepend(var_0)


def test_case_2214():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = var_0.__repr__()
    assert var_2 == "'link:[]'"
    linked_list_1 = module_0.LinkedList(*bytes_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__iter__()
    var_4 = var_3.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    var_6 = var_5.__repr__()
    assert var_6 == "'link:[]'"
    var_7 = var_6.__repr__()
    assert var_7 == "\"'link:[]'\""
    var_8 = var_6.__repr__()
    assert var_8 == "\"'link:[]'\""
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_1.value) == 0
    var_9 = linked_node_1.checkInfinite()
    var_10 = linked_node_1.checkInfinite()
    var_11 = linked_list_4.__repr__()
    assert var_11 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_2.value) == 0
    var_12 = linked_node_2.checkInfinite()
    var_13 = linked_node_2.checkInfinite()
    var_14 = linked_list_7.__len__()
    assert var_14 == 0
    var_15 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_16 = linked_node_3.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_4.value) == 0
    var_17 = linked_node_4.checkInfinite()
    var_18 = linked_node_4.checkInfinite()
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_19 = linked_list_11.__len__()
    assert var_19 == 0
    var_20 = var_19.__repr__()
    assert var_20 == "0"
    var_21 = var_20.__iter__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_3)
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_list_13 = module_0.LinkedList()
    assert len(linked_list_13) == 0
    var_22 = linked_list_13.__len__()
    assert var_22 == 0
    var_23 = var_22.__repr__()
    assert var_23 == "0"
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_14 = module_0.LinkedList(*list_2)
    assert len(linked_list_14) == 1
    with pytest.raises(Exception):
        linked_list_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    complex_0 = 725.10478 - 867.266j
    bool_1 = False
    float_0 = -1404.996616
    list_0 = [float_0, float_0, float_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.prepend(bool_1)
    assert len(linked_list_0) == 4
    var_0.remove(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    list_0 = []
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 0
    bool_0 = False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.remove(bool_0)
    assert var_0 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_1 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    var_8 = linked_list_4.__len__()
    assert var_8 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_node_3 = module_0.LinkedNode(linked_node_1, linked_node_2)
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_2217():
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert (
        var_0
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_4 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_6 = linked_list_3.remove(dict_0)
    assert var_6 is True
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_0)
    assert var_7 is False
    var_8 = linked_list_4.__iter__()
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2218():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_1 = linked_node_1.checkInfinite()
    var_2 = var_1.__repr__()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_3.next) == 0
    var_5 = linked_list_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_6 = linked_list_3.__repr__()
    assert var_6 == "link:[]"
    var_7 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_8 = linked_node_5.checkInfinite()
    var_9 = linked_node_5.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_node_6 = module_0.LinkedNode(var_11)
    assert linked_node_6.value == 0
    var_12 = var_10.__repr__()
    assert var_12 == "0"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__repr__()
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_17 = linked_node_9.checkInfinite()
    var_18 = var_17.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_10, linked_list_7, bytes_3, linked_node_10]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 4
    var_20 = linked_list_8.__len__()
    assert var_20 == 4
    linked_node_11 = module_0.LinkedNode(bytes_3, linked_node_10)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_12.value) == 0
    var_21 = linked_node_12.checkInfinite()
    linked_node_13 = module_0.LinkedNode(var_21)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_22 = linked_list_10.__repr__()
    assert var_22 == "link:[]"
    bytes_4 = b"U"
    set_0 = {bytes_4, bytes_4, bytes_4, bytes_4}
    list_1 = [set_0, set_0]
    linked_node_14 = module_0.LinkedNode(list_1)
    var_23 = linked_node_14.checkInfinite()
    var_24 = var_22.__repr__()
    assert var_24 == "'link:[]'"
    var_25 = linked_list_10.__len__()
    assert var_25 == 0
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    var_26 = linked_list_11.remove(linked_list_11)
    assert var_26 is False
    var_4.remove(var_17)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2220():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 3
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[-731,-731,-731]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.__iter__()
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    list_1 = [none_type_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    module_0.LinkedList(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    linked_node_2 = module_0.LinkedNode(var_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__len__()
    assert var_4 == 0
    bool_0 = True
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.prepend(bool_0)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_6 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_7 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_8 = var_2.__iter__()
    var_8.pop()


def test_case_2222():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_0)
    assert len(linked_node_2.next) == 0
    bool_0 = True
    bytes_1 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_0, bool_0, bool_0, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_2)
    linked_node_5 = module_0.LinkedNode(linked_node_4)
    var_5 = linked_node_5.checkInfinite()
    bytes_3 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.prepend(bytes_3)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_6.value) == 0
    var_7 = linked_node_6.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_4)
    var_8 = linked_node_7.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    float_0 = 2862.9
    bytes_5 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_5, bytes_5]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_11 = linked_list_5.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_5.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*var_12)
    assert len(linked_list_6) == 96
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2224():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_2.checkInfinite()
    var_4 = var_3.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_0.__repr__()
    assert var_5 == "link:[{link:[{...}]: link:[{...}]}]"
    var_5.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2225():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__len__()
    assert var_2 == 1
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2226():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_4 = linked_list_2.remove(dict_0)
    assert var_4 is True
    assert len(linked_list_2) == 0
    module_0.LinkedList(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_node_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    module_0.LinkedList(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2229():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_1.__len__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_6 = linked_list_1.remove(var_4)
    assert var_6 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_1]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    var_7 = linked_list_3.pop()
    assert var_7 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_3) == 0
    var_8 = var_7.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_5, bytes_2, linked_node_4]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 4
    var_11 = linked_list_6.__len__()
    assert var_11 == 4
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[]"
    float_0 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_0)
    assert var_13 is False
    var_14 = linked_list_8.__iter__()
    var_0.prepend(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    list_0 = []
    var_1.remove(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0)
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_1 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_2, linked_list_2)
    assert len(linked_node_5.next) == 0
    var_3 = linked_list_2.__len__()
    assert var_3 == 0
    linked_node_6 = module_0.LinkedNode(linked_node_5)
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 3
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[-731,-731,-731]"
    var_5 = linked_list_3.prepend(linked_list_3)
    assert len(linked_list_3) == 4
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_8.checkInfinite()
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    float_0 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_10 = linked_list_5.remove(float_0)
    assert var_10 is False
    var_11 = linked_list_5.__repr__()
    assert (
        var_11
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bool_0 = False
    linked_node_9 = module_0.LinkedNode(bool_0)
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1, none_type_1)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_3 = b""
    tuple_0 = (dict_0, bytes_3, bool_1)
    linked_node_11 = module_0.LinkedNode(tuple_0, bool_1)
    var_1.remove(linked_node_9)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[[True, True, True, True]]"
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2233():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    linked_node_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__repr__()
    assert (
        var_1
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_2 = linked_node_2.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_2.value) == 1
    linked_node_3 = module_0.LinkedNode(linked_list_3, linked_node_2)
    assert len(linked_node_3.value) == 1
    var_6 = linked_list_2.prepend(var_5)
    assert len(linked_list_2) == 1
    bool_1 = False
    set_0 = {bool_1}
    linked_node_4 = module_0.LinkedNode(set_0)
    bool_2 = False
    linked_node_5 = module_0.LinkedNode(bool_2)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_7 = linked_list_4.remove(float_1)
    assert var_7 is False
    var_8 = linked_list_4.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__len__()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == "0"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_list_6.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    bool_3 = True
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    list_3 = [list_2]
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 1
    tuple_0 = (var_12, var_11, list_2)
    linked_node_6 = module_0.LinkedNode(tuple_0)
    var_8.remove(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 0
    list_1 = [linked_list_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    var_2 = linked_list_2.__len__()
    assert var_2 == 1
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_0, bytes_0]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_4 = linked_list_3.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_3.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_4 = module_0.LinkedList(*var_5)
    assert len(linked_list_4) == 96
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_0.checkInfinite()
    assert var_6 is False
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    int_0 = -731
    list_3 = [int_0, int_0, int_0]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 3
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[-731,-731,-731]"
    var_10 = linked_list_5.prepend(linked_list_5)
    assert len(linked_list_5) == 4
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_11 = linked_node_3.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_7.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_list_8.prepend(var_14)
    assert len(linked_list_8) == 1
    assert len(linked_node_4.value) == 1
    linked_node_5 = module_0.LinkedNode(var_15, linked_node_4)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.__repr__()
    assert var_16 == "link:[]"
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    linked_node_7 = module_0.LinkedNode(none_type_2)
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(bool_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(var_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 3
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[-731,-731,-731]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    linked_list_4 = module_0.LinkedList(*var_4)
    assert (
        f"{type(linked_list_4).__module__}.{type(linked_list_4).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_4) == 0
    bool_1 = True
    bytes_0 = b"\xb7\x88\xaf\xf6:\x1b\x8f\xa0"
    set_0 = {bool_1, bool_1, bool_1, bytes_0}
    linked_node_1 = module_0.LinkedNode(set_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_7 = linked_node_2.checkInfinite()
    assert var_7 is False
    var_8 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_7, var_7)
    linked_node_4 = module_0.LinkedNode(var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.remove(linked_list_7)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    none_type_0 = None
    linked_node_8 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_9.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    var_16 = linked_list_8.__repr__()
    assert var_16 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_17 = linked_list_9.__repr__()
    assert var_17 == "link:[]"
    var_14.remove(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[-731,-731,-731]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    linked_list_2 = module_0.LinkedList(*var_1)
    assert (
        f"{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_0.value) == 0
    var_4 = linked_node_0.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_0.checkInfinite()
    var_6 = linked_list_4.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_7.__repr__()
    assert var_10 == "link:[]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    bool_1 = True
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    list_2 = [list_1]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 1
    var_11 = linked_list_10.__repr__()
    assert var_11 == "link:[[True, True, True, True]]"
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_list_12 = module_0.LinkedList()
    assert len(linked_list_12) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_12)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_12, linked_list_12)
    assert len(linked_node_5.next) == 0
    var_13 = linked_list_12.__len__()
    assert var_13 == 0
    int_1 = -731
    list_3 = [int_1, int_1, int_1]
    linked_list_13 = module_0.LinkedList(*list_3)
    assert len(linked_list_13) == 3
    var_14 = linked_list_13.__repr__()
    assert var_14 == "link:[-731,-731,-731]"
    var_15 = linked_list_13.prepend(linked_list_13)
    assert len(linked_list_13) == 4
    var_5.prepend(linked_list_10)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_2.value) == 0
    var_1 = linked_node_2.checkInfinite()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_1.prepend(var_3)
    assert len(linked_list_1) == 1
    assert len(linked_node_3.value) == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == "0"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 2
    int_0 = -731
    list_2 = [int_0, int_0, int_0]
    linked_list_8 = module_0.LinkedList(*list_2)
    assert len(linked_list_8) == 3
    var_10 = linked_list_8.__repr__()
    assert var_10 == "link:[-731,-731,-731]"
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    linked_list_10 = module_0.LinkedList(*var_11)
    assert (
        f"{type(linked_list_10).__module__}.{type(linked_list_10).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_10) == 0
    var_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    linked_node_0 = module_0.LinkedNode(set_0, set_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(var_3, linked_node_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__repr__()
    assert var_5 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_6, var_6)
    linked_node_6 = module_0.LinkedNode(var_7)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_7.value) == 0
    var_8 = linked_node_7.checkInfinite()
    var_9 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_8, var_8)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_10.value) == 0
    var_11 = linked_node_10.checkInfinite()
    var_12 = linked_node_10.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_13 = linked_list_7.prepend(var_12)
    assert len(linked_list_7) == 1
    assert len(linked_node_10.value) == 1
    var_13.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2241():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.remove(var_0)
    assert var_2 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    list_0 = []
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 2
    var_3 = linked_list_4.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_4.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_2 = [bytes_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 1
    var_5 = linked_list_5.pop()
    assert var_5 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_5) == 0
    var_6 = var_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    bytes_2 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_2)
    bool_0 = False
    linked_node_4 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0, none_type_0)
    list_3 = []
    linked_list_7 = module_0.LinkedList(*list_3)
    assert len(linked_list_7) == 0
    var_7 = linked_list_7.__len__()
    assert var_7 == 0
    var_8 = linked_node_5.checkInfinite()
    var_8.prepend(linked_node_2)


def test_case_2242():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_4, linked_list_2)
    assert len(linked_node_2.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_list_4.remove(linked_node_3)
    assert var_6 is False
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2243():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.remove(dict_0)
    assert var_2 is True
    assert len(linked_list_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 4
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_3 = linked_list_3.remove(float_0)
    assert var_3 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__len__()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    assert var_5 is False
    linked_node_4 = module_0.LinkedNode(var_5, linked_list_5)
    assert len(linked_node_4.next) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    linked_node_7 = module_0.LinkedNode(none_type_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_6 = linked_node_8.checkInfinite()
    var_7 = linked_node_8.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_8 = linked_node_9.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_9 = linked_list_9.remove(linked_list_9)
    assert var_9 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_10 = var_9.__repr__()
    var_8.remove(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.__iter__()
    linked_node_2 = module_0.LinkedNode(var_4)
    assert (
        f"{type(linked_node_2.value).__module__}.{type(linked_node_2.value).__qualname__}"
        == "builtins.generator"
    )
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5 = linked_list_2.__repr__()
    assert var_5 == "link:[]"
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_3 = module_0.LinkedNode(list_0)
    var_6 = linked_node_3.checkInfinite()
    var_7 = var_5.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = linked_list_2.__len__()
    assert var_8 == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_9 = linked_node_4.checkInfinite()
    linked_node_5 = module_0.LinkedNode(var_9, linked_list_4)
    assert len(linked_node_5.next) == 0
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_11 = linked_list_5.remove(linked_list_5)
    assert var_11 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_node_7, linked_list_7)
    assert len(linked_node_8.next) == 0
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_9 = module_0.LinkedNode(bytes_1)
    complex_2 = 4095.03 - 599.647583j
    linked_node_10 = module_0.LinkedNode(complex_2)
    linked_node_11 = module_0.LinkedNode(complex_2)
    complex_3 = 4095.03 - 599.647583j
    linked_node_12 = module_0.LinkedNode(complex_3)
    complex_4 = -367.4 - 1678j
    linked_node_13 = module_0.LinkedNode(complex_4)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_12 = linked_list_8.prepend(linked_node_13)
    assert len(linked_list_8) == 1
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_14 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_14.value) == 0
    var_13 = linked_node_14.checkInfinite()
    var_14 = linked_node_14.checkInfinite()
    linked_node_15 = module_0.LinkedNode(var_13, var_13)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bool_0 = True
    linked_node_0 = module_0.LinkedNode(bool_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_1)
    assert len(linked_list_0) == 1
    str_0 = "2z8Y!\rS\\wS1L"
    bytes_0 = b"\xe9F\x1a\xd6\xde\x92S\x8b"
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    list_1 = [tuple_0, list_0, str_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 3
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == "link:[2z8Y!\rS\\wS1L,[],('2z8Y!\\rS\\\\wS1L', b'\\xe9F\\x1a\\xd6\\xde\\x92S\\x8b', [])]"
    )
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_0)
    assert var_5 is False
    linked_node_2 = module_0.LinkedNode(float_0, bytes_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_3 = [bytes_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_4) == 0
    var_7 = var_6.__iter__()
    var_4.remove(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_7 = linked_list_4.__repr__()
    assert var_7 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_8 = linked_list_5.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_5.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_2 = module_0.LinkedNode(var_7)
    assert linked_node_2.value == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_10 = linked_list_6.__len__()
    assert var_10 == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    dict_0 = {
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
        linked_list_7: linked_list_7,
    }
    var_11 = linked_list_7.prepend(dict_0)
    assert len(linked_list_7) == 1
    var_12 = linked_list_7.__repr__()
    assert var_12 == "link:[{link:[{...}]: link:[{...}]}]"
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2247():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.remove(linked_list_1)
    assert var_1 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == "0"
    var_6 = var_5.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_7 = linked_node_4.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_4, linked_list_4, bytes_0, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_8 = linked_list_5.__len__()
    assert var_8 == 4
    var_9 = linked_list_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_10 = linked_node_5.checkInfinite()
    var_11 = var_10.__repr__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_node_5)
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 3
    var_12 = linked_list_8.__repr__()
    assert var_12 == "link:[-731,-731,-731]"
    var_13 = linked_list_8.prepend(linked_list_8)
    assert len(linked_list_8) == 4
    bool_0 = True
    linked_node_8 = module_0.LinkedNode(bool_0)
    var_14 = linked_node_8.checkInfinite()
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_2248():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2249():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_2 = linked_list_2.remove(float_0)
    assert var_2 is False
    var_3 = linked_list_2.__repr__()
    assert (
        var_3
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2250():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_1 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_1, linked_list_1)
    assert len(linked_node_2.next) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_list_3.__len__()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == "0"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_5.checkInfinite()
    var_5 = var_4.__repr__()
    bool_0 = False
    linked_node_6 = module_0.LinkedNode(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.__repr__()
    assert var_6 == "link:[]"
    bytes_1 = b"U"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    list_0 = [set_0, set_0]
    linked_node_7 = module_0.LinkedNode(list_0)
    var_7 = linked_node_7.checkInfinite()
    var_8 = var_6.__repr__()
    assert var_8 == "'link:[]'"
    linked_list_6 = module_0.LinkedList(*bytes_1)
    assert len(linked_list_6) == 1
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_9 = linked_list_7.__iter__()
    var_10 = linked_list_7.__iter__()
    complex_2 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_2)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_11 = linked_node_9.checkInfinite()
    var_12 = linked_node_9.checkInfinite()
    var_13 = linked_list_9.__len__()
    assert var_13 == 0
    var_14 = linked_list_9.__len__()
    assert var_14 == 0
    linked_node_10 = module_0.LinkedNode(var_14)
    assert linked_node_10.value == 0
    var_15 = var_13.__repr__()
    assert var_15 == "0"
    var_14.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2251():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    var_2 = var_1.__iter__()
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_3 = linked_node_4.checkInfinite()
    assert var_3 is False
    var_4 = var_3.__repr__()
    complex_3 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2252():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_2 = linked_list_1.remove(bytes_0)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(float_0, bytes_1)
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_3 = module_0.LinkedList(*list_2)
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[[True, True, True, True]]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_2.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_node_3.checkInfinite()
    var_9 = linked_list_5.__repr__()
    assert var_9 == "link:[]"
    var_10 = linked_list_6.prepend(var_9)
    assert len(linked_list_6) == 1
    assert len(linked_node_3.value) == 1
    linked_node_4 = module_0.LinkedNode(linked_list_6, linked_node_3)
    assert len(linked_node_4.value) == 1
    var_11 = linked_list_6.__iter__()
    var_11.prepend(var_5)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.__len__()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    var_3 = linked_list_1.__repr__()
    assert var_3 == "link:[]"
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, var_3)
    assert linked_node_1.next == "link:[]"
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_node_4 = module_0.LinkedNode(linked_node_2, linked_node_3)
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    var_5 = linked_list_2.__repr__()
    assert (
        var_5
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 2
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_6 = linked_node_5.checkInfinite()
    var_7 = linked_node_5.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    none_type_2 = None
    linked_node_6 = module_0.LinkedNode(none_type_2)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_1)
    var_9 = linked_node_7.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__repr__()
    linked_node_8 = module_0.LinkedNode(var_11)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_13 = linked_node_9.checkInfinite()
    var_14 = linked_node_9.checkInfinite()
    var_15 = linked_list_8.__len__()
    assert var_15 == 0
    var_16 = linked_list_8.__len__()
    assert var_16 == 0
    none_type_3 = None
    list_1 = [none_type_3]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 1
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_2, bytes_2]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_17 = linked_list_10.remove(float_1)
    assert var_17 is False
    var_18 = linked_list_10.__repr__()
    assert (
        var_18
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_10.value) == 0
    var_19 = linked_node_10.checkInfinite()
    linked_node_11 = module_0.LinkedNode(var_19)
    float_2 = -2122.54
    linked_node_12 = module_0.LinkedNode(float_2)
    linked_node_13 = module_0.LinkedNode(linked_node_11)
    none_type_4 = None
    list_3 = [none_type_4]
    linked_list_12 = module_0.LinkedList(*list_3)
    assert len(linked_list_12) == 1
    linked_list_13 = module_0.LinkedList(*linked_list_12)
    assert (
        f"{type(linked_list_13).__module__}.{type(linked_list_13).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_13) == 1
    var_20 = linked_list_13.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__repr__()
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2254():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    var_2 = linked_node_0.checkInfinite()
    var_3 = linked_list_3.__len__()
    assert var_3 == 0
    var_4 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_5 = linked_list_6.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_6.__repr__()
    assert (
        var_6
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList(*var_6)
    assert len(linked_list_7) == 96
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_1.value) == 0
    var_7 = linked_node_1.checkInfinite()
    var_8 = linked_node_1.checkInfinite()
    var_9 = linked_list_9.__len__()
    assert var_9 == 0
    var_10 = linked_list_9.__len__()
    assert var_10 == 0
    var_11 = linked_list_9.remove(var_8)
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_10 = module_0.LinkedList(*list_1)
    assert len(linked_list_10) == 2
    var_12 = linked_list_10.remove(float_1)
    assert var_12 is False
    var_13 = linked_list_10.pop()
    assert var_13 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_10) == 1
    var_14 = var_13.__len__()
    var_15 = linked_list_10.__len__()
    assert var_15 == 1
    var_16 = linked_list_0.__iter__()
    var_16.prepend(var_13)


def test_case_2255():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    linked_node_1 = module_0.LinkedNode(var_3)
    assert (
        f"{type(linked_node_1.value).__module__}.{type(linked_node_1.value).__qualname__}"
        == "builtins.generator"
    )
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_4 = linked_list_2.remove(float_0)
    assert var_4 is False
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_5 = linked_node_2.checkInfinite()
    var_6 = var_5.__repr__()
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2256():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_0 = module_0.LinkedNode(bytes_1)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    assert var_2 is False
    var_3 = linked_node_1.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    dict_0 = {
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
        linked_list_3: linked_list_3,
    }
    var_4 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_list_4.prepend(dict_0)
    assert len(linked_list_4) == 1
    none_type_0 = None
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_list_5.remove(none_type_0)
    assert var_6 is False
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_7 = linked_list_6.__iter__()
    var_8 = linked_list_6.__iter__()
    var_9 = linked_list_0.remove(linked_list_4)
    assert var_9 is False
    var_9.remove(var_7)


def test_case_2257():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.prepend(linked_node_3)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_4 = linked_node_4.checkInfinite()
    assert var_4 is False
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_2.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_0)
    var_8 = linked_node_6.checkInfinite()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__repr__()
    linked_node_7 = module_0.LinkedNode(var_10)
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_12 = linked_list_6.remove(float_0)
    assert var_12 is False
    var_13 = linked_list_6.__repr__()
    assert (
        var_13
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_14 = var_13.__iter__()
    with pytest.raises(Exception):
        linked_list_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_1)
    var_3 = linked_node_1.checkInfinite()
    var_4 = var_3.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_3 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_3, bytes_2, bytes_2, bytes_2}
    linked_node_4 = module_0.LinkedNode(set_0)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_6.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_7.value) == 0
    var_7 = linked_node_7.checkInfinite()
    var_8 = linked_list_1.prepend(var_5)
    assert len(linked_list_1) == 1
    assert len(linked_node_7.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_8.value) == 0
    var_9 = linked_node_8.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    bytes_4 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_9 = module_0.LinkedNode(bytes_4)
    var_10 = linked_node_9.checkInfinite()
    var_11 = var_10.__repr__()
    var_12 = linked_list_3.__len__()
    assert var_12 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_10 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_10.value) == 0
    var_13 = linked_node_10.checkInfinite()
    var_14 = linked_node_10.checkInfinite()
    var_15 = linked_list_4.__repr__()
    assert var_15 == "link:[]"
    var_16 = linked_list_5.prepend(var_15)
    assert len(linked_list_5) == 1
    assert len(linked_node_10.value) == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_11.value) == 0
    var_17 = linked_node_11.checkInfinite()
    var_18 = linked_node_11.checkInfinite()
    var_19 = linked_list_7.__len__()
    assert var_19 == 0
    var_20 = linked_list_7.__len__()
    assert var_20 == 0
    var_21 = linked_list_7.remove(var_18)
    assert var_21 is False
    float_0 = -2122.54
    linked_node_12 = module_0.LinkedNode(float_0)
    var_10.prepend(linked_list_3)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.__repr__()
    assert var_3 == "link:[]"
    var_4 = var_3.__iter__()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    bool_1 = True
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.prepend(bool_1)
    assert len(linked_list_3) == 1
    complex_3 = 4095.03 - 599.647583j
    linked_node_6 = module_0.LinkedNode(complex_3)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.remove(linked_list_4)
    assert var_6 is False
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    complex_4 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_4)
    complex_5 = -367.4 - 1678j
    linked_node_8 = module_0.LinkedNode(complex_5)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_node_8, linked_list_7)
    assert len(linked_node_9.next) == 0
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 1
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_0 = linked_node_1.checkInfinite()
    assert var_0 is False
    var_0.remove(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(linked_list_2)
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_node_1.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_9 = linked_list_4.remove(linked_list_4)
    var_10 = var_9.__repr__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 2
    var_11 = linked_list_5.remove(float_0)
    assert var_11 is False
    var_12 = linked_list_5.__repr__()
    assert (
        var_12
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_1 = [bytes_1]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 1
    var_13 = linked_list_7.pop()
    assert var_13 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_7) == 0
    var_14 = var_13.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_3.value) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[]"
    var_0.prepend(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_1 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.remove(dict_0)
    assert var_3 is True
    assert len(linked_list_2) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_2.checkInfinite()
    var_5 = var_4.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_3.prepend(var_4)
    assert len(linked_list_3) == 1
    assert len(linked_node_3.value) == 1
    var_8 = linked_list_3.__repr__()
    assert var_8 == "link:[False]"
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 1
    complex_2 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_3)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_9 = linked_list_5.__iter__()
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_4 = linked_list_0.remove(linked_list_0)
    assert var_4 is False
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = linked_list_0.__repr__()
    assert var_7 == "link:[]"
    int_0 = -731
    list_0 = [int_0, int_0, int_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 3
    var_8 = linked_list_1.__repr__()
    assert var_8 == "link:[-731,-731,-731]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_9 = linked_list_2.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    linked_list_3 = module_0.LinkedList(*var_9)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_12 = linked_node_2.checkInfinite()
    var_13 = linked_node_2.checkInfinite()
    var_14 = linked_list_5.__len__()
    assert var_14 == 0
    var_15 = linked_list_5.__iter__()
    var_16 = var_15.__iter__()
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2264():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_5 = linked_list_2.remove(float_0)
    assert var_5 is False
    var_6 = linked_list_2.pop()
    assert var_6 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_2) == 1
    var_7 = var_6.__len__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_8 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_8)
    float_1 = -2122.54
    linked_node_3 = module_0.LinkedNode(float_1)
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    none_type_0 = None
    linked_node_5 = module_0.LinkedNode(none_type_0)
    linked_node_6 = module_0.LinkedNode(none_type_0)
    list_1 = []
    linked_list_4 = module_0.LinkedList(*list_1)
    assert len(linked_list_4) == 0
    float_2 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_1, bytes_1]
    linked_list_5 = module_0.LinkedList(*list_2)
    assert len(linked_list_5) == 2
    var_9 = linked_list_5.remove(float_2)
    assert var_9 is False
    var_10 = linked_list_5.__repr__()
    assert (
        var_10
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_4.prepend(list_2)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_5.value) == 0
    var_4 = linked_node_5.checkInfinite()
    var_5 = linked_node_5.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_5.__len__()
    assert var_7 == 0
    linked_node_6 = module_0.LinkedNode(var_7)
    assert linked_node_6.value == 0
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_8 = linked_list_6.remove(float_0)
    assert var_8 is False
    var_9 = linked_list_6.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_10 = linked_node_7.checkInfinite()
    linked_node_8 = module_0.LinkedNode(var_10, linked_list_7)
    assert len(linked_node_8.next) == 0
    none_type_0 = None
    linked_node_9 = module_0.LinkedNode(none_type_0)
    linked_node_10 = module_0.LinkedNode(none_type_0)
    linked_node_11 = module_0.LinkedNode(none_type_0)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_12 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_12.value) == 0
    var_11 = linked_node_12.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_12, linked_list_8, bytes_2, linked_node_12]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_12 = linked_list_9.__len__()
    assert var_12 == 4
    linked_node_13 = module_0.LinkedNode(bytes_2, linked_node_12)
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_2 = [bytes_3, bytes_3]
    linked_list_10 = module_0.LinkedList(*list_2)
    assert len(linked_list_10) == 2
    var_13 = linked_list_10.remove(float_1)
    assert var_13 is False
    linked_node_14 = module_0.LinkedNode(float_1, bytes_3)
    var_0.remove(linked_list_10)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_1)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_1.__len__()
    assert var_1 == 0
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_2 = linked_node_3.checkInfinite()
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_list_3.__len__()
    assert var_4 == 0
    var_5 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__iter__()
    var_7 = var_6.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_8 = linked_list_5.__iter__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.__len__()
    assert var_9 == 0
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    bool_0 = True
    linked_node_5 = module_0.LinkedNode(bool_0)
    var_10 = linked_node_5.checkInfinite()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_8.prepend(var_11)
    assert len(linked_list_8) == 1
    list_0 = []
    linked_list_10 = module_0.LinkedList(*list_0)
    assert len(linked_list_10) == 0
    var_3.prepend(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_node_2 = module_0.LinkedNode(linked_node_0, linked_node_1)
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_3 = module_0.LinkedNode(bytes_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_1, bytes_1]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_2 = module_0.LinkedList(*var_2)
    assert len(linked_list_2) == 96
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_3 = linked_list_3.remove(bytes_2)
    assert var_3 is False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_6.value) == 0
    var_4 = linked_node_6.checkInfinite()
    assert var_4 is False
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_3)
    var_5 = linked_node_7.checkInfinite()
    var_6 = var_5.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_8.value) == 0
    var_7 = linked_node_8.checkInfinite()
    var_8 = linked_list_6.prepend(var_5)
    assert len(linked_list_6) == 1
    assert len(linked_node_8.value) == 1
    var_9 = var_6.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_9.value) == 0
    var_10 = linked_node_9.checkInfinite()
    linked_node_10 = module_0.LinkedNode(var_10, linked_list_7)
    assert len(linked_node_10.next) == 0
    var_11 = linked_list_7.__iter__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_11.value) == 0
    var_12 = linked_node_11.checkInfinite()
    bytes_4 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_11, linked_list_8, bytes_4, linked_node_11]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_13 = linked_list_9.__len__()
    assert var_13 == 4
    var_14 = linked_list_9.__repr__()
    var_11.prepend(linked_list_9)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bool_0 = True
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(list_0)
    assert var_0 is False
    var_0.remove(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    var_4 = var_1.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_2.value) == 0
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_list_2.__len__()
    assert var_7 == 0
    var_8 = linked_list_2.__iter__()
    linked_node_3 = module_0.LinkedNode(var_8)
    assert (
        f"{type(linked_node_3.value).__module__}.{type(linked_node_3.value).__qualname__}"
        == "builtins.generator"
    )
    complex_0 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_0)
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_3 = module_0.LinkedList(*list_0)
    assert len(linked_list_3) == 1
    linked_list_4 = module_0.LinkedList(*linked_list_3)
    assert (
        f"{type(linked_list_4).__module__}.{type(linked_list_4).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_4) == 1
    var_9 = linked_list_4.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    var_11.pop()


@pytest.mark.xfail(strict=True)
def test_case_2270():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2271():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    var_1 = linked_list_0.__iter__()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_1 = module_0.LinkedList(*list_1)
    assert len(linked_list_1) == 1
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[[True, True, True, True]]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_2.value) == 0
    var_3 = linked_node_2.checkInfinite()
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__iter__()
    var_7 = var_6.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_4 = module_0.LinkedNode(bytes_0)
    var_9 = linked_node_4.checkInfinite()
    var_10 = var_9.__repr__()
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2272():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    complex_1 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_3 = module_0.LinkedNode(complex_2)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2273():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__repr__()
    assert var_1 == "link:[{link:[{...}]: link:[{...}]}]"
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2274():
    object_0 = module_1.object()
    float_0 = 1013.191
    list_0 = [object_0, object_0, float_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 3
    var_0 = linked_list_0.pop()
    assert var_0 == pytest.approx(1013.191, abs=0.01, rel=0.01)
    assert len(linked_list_0) == 2
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_list_0.prepend(var_0)
    assert len(linked_list_0) == 1
    assert len(linked_node_1.value) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.__repr__()
    assert var_4 == "link:[]"
    var_5 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_node_4.checkInfinite()
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_5 = module_0.LinkedNode(bytes_1)
    var_8 = linked_node_5.checkInfinite()
    var_9 = var_8.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_6.value) == 0
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_9.__len__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_12 = linked_list_6.__repr__()
    assert var_12 == "link:[]"
    none_type_0 = None
    linked_node_7 = module_0.LinkedNode(none_type_0)
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_8 = module_0.LinkedNode(bytes_2)
    var_13 = linked_node_8.checkInfinite()
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_14.__len__()
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_17 = linked_list_7.remove(linked_list_7)
    assert var_17 is False
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = linked_list_7.__repr__()
    assert var_20 == "link:[]"
    bytes_3 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_10 = module_0.LinkedNode(bytes_3)
    bool_0 = False
    linked_node_11 = module_0.LinkedNode(bool_0)
    none_type_1 = None
    linked_node_12 = module_0.LinkedNode(none_type_1, none_type_1)
    list_0 = []
    linked_list_8 = module_0.LinkedList(*list_0)
    assert len(linked_list_8) == 0
    var_21 = linked_list_8.__len__()
    assert var_21 == 0
    var_22 = linked_node_5.checkInfinite()
    var_22.pop()


@pytest.mark.xfail(strict=True)
def test_case_2276():
    int_0 = 1211
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.remove(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.remove(bool_0)
    assert var_4 is False
    bool_1 = False
    linked_node_1 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_node_3.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_0)
    var_8 = linked_list_5.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_0)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_0)
    assert var_9 is False
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    bytes_2 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_7 = module_0.LinkedNode(bytes_2, bytes_2)
    set_0 = {linked_node_7, bytes_2, bytes_2, bytes_2}
    linked_node_8 = module_0.LinkedNode(set_0)
    float_1 = 2862.9
    bytes_3 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_3, bytes_3]
    linked_list_8 = module_0.LinkedList(*list_1)
    assert len(linked_list_8) == 2
    var_13 = linked_list_8.remove(float_1)
    assert var_13 is False
    var_14 = linked_list_8.pop()
    assert var_14 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_8) == 1
    var_15 = var_14.__len__()
    var_16 = linked_list_8.__len__()
    assert var_16 == 1
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2278():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__len__()
    assert var_3 == 7
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_1, linked_list_3, bytes_0, linked_node_1]
    linked_list_4 = module_0.LinkedList(*list_0)
    assert len(linked_list_4) == 4
    var_5 = linked_list_4.__len__()
    assert var_5 == 4
    var_6 = linked_list_4.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_7 = linked_node_2.checkInfinite()
    var_8 = var_7.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    int_0 = -731
    list_1 = [int_0, int_0, int_0]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 3
    var_9 = linked_list_7.__repr__()
    assert var_9 == "link:[-731,-731,-731]"
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_9.__len__()
    assert var_12 == 0
    var_8.prepend(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = var_1.__len__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_4 = linked_list_1.__iter__()
    bool_1 = False
    linked_node_2 = module_0.LinkedNode(bool_1)
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0, none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_4.value) == 0
    var_5 = linked_node_4.checkInfinite()
    var_6 = linked_node_4.checkInfinite()
    var_7 = linked_list_3.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__len__()
    assert var_8 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_7 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_9 = linked_list_6.remove(linked_list_6)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    bool_2 = False
    set_0 = {bool_2}
    linked_node_8 = module_0.LinkedNode(set_0)
    complex_2 = 4095.03 - 599.647583j
    linked_node_9 = module_0.LinkedNode(complex_2)
    complex_3 = -367.4 - 1678j
    linked_node_10 = module_0.LinkedNode(complex_3)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_2.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2280():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_node_1 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_2.value) == 0
    var_0 = linked_node_2.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_2.checkInfinite()
    var_2 = linked_list_1.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_3.value) == 0
    var_3 = linked_node_3.checkInfinite()
    var_4 = linked_node_3.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_node_4 = module_0.LinkedNode(var_6)
    assert linked_node_4.value == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_0 = module_0.LinkedNode(list_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(bytes_0)
    bool_0 = False
    linked_node_2 = module_0.LinkedNode(bool_0)
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    bytes_1 = b""
    tuple_0 = (dict_0, bytes_1, bool_1)
    linked_node_3 = module_0.LinkedNode(tuple_0, bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_1 = linked_list_0.remove(none_type_0)
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_4.value) == 0
    var_2 = linked_node_4.checkInfinite()
    var_3 = linked_node_4.checkInfinite()
    none_type_1 = None
    list_1 = [none_type_1]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_4 = linked_list_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_2.__repr__()
    var_7.remove(var_5)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    bool_0 = False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.remove(bool_0)
    linked_node_0 = module_0.LinkedNode(var_3)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_node_1.checkInfinite()
    assert var_4 is False
    var_5 = linked_list_3.__iter__()
    var_3.prepend(linked_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    var_3 = linked_list_1.prepend(var_2)
    assert len(linked_list_1) == 1
    assert len(linked_node_0.value) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    linked_node_2 = module_0.LinkedNode(linked_node_1)
    var_4 = linked_node_2.checkInfinite()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_4.__len__()
    assert var_7 == 0
    var_8 = linked_list_3.__iter__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    bool_0 = True
    linked_node_4 = module_0.LinkedNode(bool_0)
    var_9 = linked_node_4.checkInfinite()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_5.value) == 0
    var_10 = linked_node_5.checkInfinite()
    var_11 = linked_node_5.checkInfinite()
    var_12 = linked_list_7.prepend(var_10)
    assert len(linked_list_7) == 1
    bool_1 = True
    linked_node_6 = module_0.LinkedNode(bool_1)
    var_13 = linked_node_6.checkInfinite()
    float_0 = -2122.54
    linked_node_7 = module_0.LinkedNode(float_0)
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_8 = module_0.LinkedNode(bytes_1)
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2284():
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList(*linked_list_0)
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_1) == 1
    var_0 = linked_list_1.__iter__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_3 = linked_node_0.checkInfinite()
    assert var_3 is False
    linked_node_1 = module_0.LinkedNode(var_3, linked_list_2)
    assert len(linked_node_1.next) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_2.value) == 0
    var_4 = linked_node_2.checkInfinite()
    var_5 = linked_node_2.checkInfinite()
    var_6 = linked_list_5.__len__()
    assert var_6 == 0
    var_7 = linked_list_4.__iter__()
    var_8 = linked_list_5.remove(linked_list_5)
    assert var_8 is False
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_0, bytes_0]
    linked_list_6 = module_0.LinkedList(*list_1)
    assert len(linked_list_6) == 2
    var_9 = linked_list_6.remove(float_0)
    assert var_9 is False
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_10 = linked_list_7.__len__()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_11 = linked_list_8.__repr__()
    assert var_11 == "link:[]"
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    dict_0 = {
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
        linked_list_9: linked_list_9,
    }
    var_14 = linked_list_9.prepend(dict_0)
    assert len(linked_list_9) == 1
    var_15 = linked_list_9.__repr__()
    assert var_15 == "link:[{link:[{...}]: link:[{...}]}]"
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2285():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__iter__()
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.__repr__()
    assert var_2 == "link:[]"
    var_3 = var_2.__repr__()
    assert var_3 == "'link:[]'"
    var_4 = var_3.__repr__()
    assert var_4 == "\"'link:[]'\""
    var_5 = var_3.__repr__()
    assert var_5 == "\"'link:[]'\""
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    list_0 = [bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.pop()
    assert var_6 == b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    assert len(linked_list_2) == 0
    var_7 = var_6.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_0.value) == 0
    var_8 = linked_node_0.checkInfinite()
    assert var_8 is False
    var_9 = linked_node_0.checkInfinite()
    var_10 = linked_list_4.__len__()
    assert var_10 == 0
    var_11 = linked_list_4.__len__()
    assert var_11 == 0
    var_12 = linked_list_4.remove(var_9)
    assert var_12 is False
    var_13 = linked_list_4.__iter__()
    float_0 = -2122.54
    linked_node_1 = module_0.LinkedNode(float_0)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_14 = linked_node_2.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_16 = linked_node_3.checkInfinite()
    var_17 = linked_list_5.prepend(var_14)
    assert len(linked_list_5) == 1
    assert len(linked_node_3.value) == 1
    var_18 = var_15.__iter__()
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2286():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(linked_list_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = var_0.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_3 = linked_list_3.prepend(dict_0)
    assert len(linked_list_3) == 1
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2287():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_0.__iter__()
    var_4 = linked_list_1.remove(linked_list_1)
    assert var_4 is False
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_2.__repr__()
    assert var_7 == "link:[]"
    var_8 = linked_list_3.prepend(var_7)
    assert len(linked_list_3) == 1
    assert len(linked_node_1.value) == 1
    linked_node_2 = module_0.LinkedNode(linked_list_3, linked_node_1)
    assert len(linked_node_2.value) == 1
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_4, bytes_0, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_10 = linked_list_5.__len__()
    assert var_10 == 4
    var_11 = linked_list_5.__repr__()
    var_12 = linked_list_5.pop()
    assert len(linked_list_5) == 3
    assert (
        f"{type(var_12).__module__}.{type(var_12).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_12.value).__module__}.{type(var_12.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_12.value) == 0
    assert var_12.next is None
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    list_2 = [list_1]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    linked_node_4 = module_0.LinkedNode(bytes_1)
    var_4.pop()


def test_case_2288():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bool_0 = True
    linked_node_1 = module_0.LinkedNode(bool_0)
    var_1 = linked_node_1.checkInfinite()
    with pytest.raises(Exception):
        linked_list_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2289():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    bytes_0 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_1 = module_0.LinkedNode(bytes_0)
    var_4 = linked_node_1.checkInfinite()
    var_5 = var_4.__repr__()
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_2 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_2, bytes_1, bytes_1, bytes_1}
    linked_node_3 = module_0.LinkedNode(set_0)
    int_0 = 720
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_6 = linked_list_2.remove(int_0)
    assert var_6 is False
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2290():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    dict_0 = {
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
        linked_list_0: linked_list_0,
    }
    var_0 = linked_list_0.prepend(dict_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    linked_node_1 = module_0.LinkedNode(linked_node_0)
    var_1 = linked_node_1.checkInfinite()
    assert var_1 is False
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_2 = linked_node_2.checkInfinite()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    dict_1 = {
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
        linked_list_4: linked_list_4,
    }
    var_3 = linked_list_4.prepend(dict_1)
    assert len(linked_list_4) == 1
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[{link:[{...}]: link:[{...}]}]"
    linked_node_3 = module_0.LinkedNode(var_3)
    var_1.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2291():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.remove(none_type_0)
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_1 = var_0.__repr__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_2 = linked_node_0.checkInfinite()
    assert var_2 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_0, linked_list_1, bytes_1, linked_node_0]
    linked_list_2 = module_0.LinkedList(*list_1)
    assert len(linked_list_2) == 4
    var_3 = linked_list_2.__len__()
    assert var_3 == 4
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_node_1.checkInfinite()
    list_2 = []
    linked_list_4 = module_0.LinkedList(*list_2)
    assert len(linked_list_4) == 0
    list_3 = [linked_list_4]
    linked_list_5 = module_0.LinkedList(*list_3)
    assert len(linked_list_5) == 1
    var_5 = linked_list_5.__len__()
    assert var_5 == 1
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_2 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_2.value) == 0
    var_6 = linked_node_2.checkInfinite()
    var_7 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(var_6, var_6)
    linked_node_4 = module_0.LinkedNode(var_7)
    float_0 = -1821.1908
    linked_node_5 = module_0.LinkedNode(float_0, float_0)
    float_1 = 2862.9
    bytes_2 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_4 = [bytes_2, bytes_2]
    linked_list_7 = module_0.LinkedList(*list_4)
    assert len(linked_list_7) == 2
    var_8 = linked_list_7.remove(float_1)
    assert var_8 is False
    var_9 = linked_list_7.__repr__()
    assert (
        var_9
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_list_8 = module_0.LinkedList(*list_4)
    assert len(linked_list_8) == 2
    bytes_3 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_3)
    var_10 = linked_node_6.checkInfinite()
    var_11 = var_10.__repr__()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_7.value) == 0
    var_12 = linked_node_7.checkInfinite()
    var_13 = linked_list_9.prepend(var_10)
    assert len(linked_list_9) == 1
    assert len(linked_node_7.value) == 1
    var_14 = var_11.__iter__()
    var_15 = linked_list_0.__iter__()
    var_15.prepend(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    linked_list_0 = module_0.LinkedList(*list_1)
    assert len(linked_list_0) == 1
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[[True, True, True, True]]"
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_0.value) == 0
    var_1 = linked_node_0.checkInfinite()
    assert var_1 is False
    linked_node_1 = module_0.LinkedNode(var_1, linked_list_2)
    assert len(linked_node_1.next) == 0
    var_2 = linked_list_2.__len__()
    assert var_2 == 0
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    none_type_0 = None
    linked_node_3 = module_0.LinkedNode(none_type_0)
    var_3 = linked_list_3.__repr__()
    assert var_3 == "link:[]"
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_4 = linked_list_4.__repr__()
    assert var_4 == "link:[]"
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2294():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    linked_node_0 = module_0.LinkedNode(float_0, bytes_0)
    bool_0 = False
    linked_node_1 = module_0.LinkedNode(bool_0)
    complex_0 = 4095.03 - 599.647583j
    linked_node_2 = module_0.LinkedNode(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_1 = linked_list_1.__repr__()
    assert var_1 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.__iter__()
    var_3 = var_2.__repr__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__repr__()
    assert var_4 == "link:[]"
    var_5 = var_4.__repr__()
    assert var_5 == "'link:[]'"
    var_6 = var_5.__repr__()
    assert var_6 == "\"'link:[]'\""
    var_7 = var_5.__repr__()
    assert var_7 == "\"'link:[]'\""
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_5)
    assert len(linked_node_3.value) == 0
    var_8 = linked_node_3.checkInfinite()
    assert var_8 is False
    var_9 = linked_node_3.checkInfinite()
    var_10 = linked_list_5.__len__()
    assert var_10 == 0
    var_11 = linked_list_5.__len__()
    assert var_11 == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_4.value) == 0
    var_12 = linked_node_4.checkInfinite()
    var_13 = linked_node_4.checkInfinite()
    var_14 = linked_list_8.__len__()
    assert var_14 == 0
    var_15 = linked_list_8.__iter__()
    var_3.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2295():
    bytes_0 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_0 = module_0.LinkedNode(bytes_0)
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = var_0.__repr__()
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    none_type_0 = None
    list_0 = [none_type_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 1
    linked_list_3 = module_0.LinkedList(*linked_list_2)
    assert (
        f"{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(linked_list_3) == 1
    var_3 = linked_list_3.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    var_6 = linked_node_2.checkInfinite()
    var_7 = var_6.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_node_4 = module_0.LinkedNode(linked_node_2)
    var_7.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2296():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_0, linked_list_0, bytes_0, linked_node_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 4
    var_1 = linked_list_1.__len__()
    assert var_1 == 4
    var_2 = linked_list_1.__repr__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    linked_node_2 = module_0.LinkedNode(var_3, linked_list_2)
    assert len(linked_node_2.next) == 0
    var_4 = linked_list_2.__iter__()
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_5 = linked_list_3.remove(linked_list_3)
    assert var_5 is False
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_7 = linked_node_3.checkInfinite()
    var_8 = linked_list_4.__repr__()
    assert var_8 == "link:[]"
    none_type_0 = None
    linked_node_4 = module_0.LinkedNode(none_type_0, var_8)
    assert linked_node_4.next == "link:[]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    dict_0 = {
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
        linked_list_5: linked_list_5,
    }
    var_9 = linked_list_5.prepend(dict_0)
    assert len(linked_list_5) == 1
    var_10 = linked_list_5.__repr__()
    assert var_10 == "link:[{link:[{...}]: link:[{...}]}]"
    none_type_1 = None
    linked_node_5 = module_0.LinkedNode(none_type_1)
    bytes_1 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_6 = module_0.LinkedNode(bytes_1)
    var_11 = linked_node_6.checkInfinite()
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_7 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_7.value) == 0
    var_14 = linked_node_7.checkInfinite()
    var_15 = linked_node_7.checkInfinite()
    var_16 = linked_list_7.__len__()
    assert var_16 == 0
    var_17 = linked_list_7.__iter__()
    linked_node_8 = module_0.LinkedNode(var_17)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_9.value) == 0
    var_18 = linked_node_9.checkInfinite()
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_9, linked_list_8, bytes_2, linked_node_9]
    linked_list_9 = module_0.LinkedList(*list_1)
    assert len(linked_list_9) == 4
    var_19 = linked_list_9.__len__()
    assert var_19 == 4
    var_19.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2297():
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.remove(float_0)
    assert var_0 is False
    var_1 = linked_list_0.__iter__()
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_2 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_3 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_4 = linked_list_2.remove(dict_0)
    assert var_4 is True
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_5 = linked_node_1.checkInfinite()
    assert var_5 is False
    var_6 = linked_node_1.checkInfinite()
    var_7 = linked_list_3.__iter__()
    bytes_1 = b"HP|K\xc7yxK\xbb$\x9a"
    linked_node_2 = module_0.LinkedNode(bytes_1)
    complex_1 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(linked_list_4)
    assert var_8 is False
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    bytes_2 = b"U"
    set_0 = {bytes_2, bytes_2, bytes_2, bytes_2}
    list_1 = [set_0, set_0]
    linked_node_4 = module_0.LinkedNode(list_1)
    var_12 = linked_node_4.checkInfinite()
    var_6.prepend(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bool_0 = False
    linked_node_0 = module_0.LinkedNode(bool_0)
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0, none_type_0)
    none_type_1 = None
    linked_node_2 = module_0.LinkedNode(none_type_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_3.value) == 0
    var_0 = linked_node_3.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_3.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__len__()
    assert var_3 == 0
    var_4 = linked_list_1.remove(var_1)
    assert var_4 is False
    var_5 = linked_list_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_6 = linked_list_2.remove(float_0)
    assert var_6 is False
    var_7 = linked_list_2.pop()
    assert var_7 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_2) == 1
    var_8 = var_7.__len__()
    var_9 = linked_list_2.__len__()
    assert var_9 == 1
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    var_11 = linked_node_4.checkInfinite()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_12 = linked_list_5.__repr__()
    assert var_12 == "link:[]"
    var_13 = linked_node_5.checkInfinite()
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2299():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2300():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_1.__len__()
    assert var_2 == 0
    var_3 = linked_list_1.__iter__()
    var_4 = var_3.__iter__()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    dict_0 = {
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
        linked_list_2: linked_list_2,
    }
    var_5 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_6 = linked_list_2.__repr__()
    assert var_6 == "link:[{link:[{...}]: link:[{...}]}]"
    var_7 = var_5.__repr__()
    none_type_0 = None
    linked_node_1 = module_0.LinkedNode(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_8 = linked_node_1.checkInfinite()
    bytes_0 = b"U"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    linked_node_2 = module_0.LinkedNode(list_0)
    var_9 = linked_node_2.checkInfinite()
    linked_node_3 = module_0.LinkedNode(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_4, bytes_1, linked_node_4]
    linked_list_5 = module_0.LinkedList(*list_1)
    assert len(linked_list_5) == 4
    var_11 = linked_list_5.__len__()
    assert var_11 == 4
    var_12 = linked_list_5.__repr__()
    complex_0 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_6 = module_0.LinkedNode(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_13 = linked_list_6.__iter__()
    bytes_2 = b"5\xf8\xd2\xaca\xef\xdf\xea\xf5G"
    linked_node_7 = module_0.LinkedNode(bytes_2)
    var_14 = linked_node_7.checkInfinite()
    var_15 = var_14.__repr__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_8 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_8.value) == 0
    var_16 = linked_node_8.checkInfinite()
    var_17 = linked_list_7.prepend(var_14)
    assert len(linked_list_7) == 1
    assert len(linked_node_8.value) == 1
    var_18 = var_15.__repr__()
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    linked_node_9 = module_0.LinkedNode(linked_list_9)
    assert len(linked_node_9.value) == 0
    var_19 = linked_node_9.checkInfinite()
    var_20 = linked_node_9.checkInfinite()
    var_21 = linked_list_9.__len__()
    assert var_21 == 0
    var_22 = linked_list_8.__iter__()
    var_23 = linked_list_9.remove(linked_list_9)
    assert var_23 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    none_type_1 = None
    linked_node_10 = module_0.LinkedNode(none_type_1)
    bytes_3 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_24 = linked_list_10.remove(bytes_3)
    linked_list_11 = module_0.LinkedList()
    assert len(linked_list_11) == 0
    linked_node_11 = module_0.LinkedNode(linked_list_11)
    assert len(linked_node_11.value) == 0
    var_25 = linked_node_11.checkInfinite()
    var_26 = linked_node_11.checkInfinite()
    linked_node_12 = module_0.LinkedNode(var_25, var_25)
    var_20.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2301():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__repr__()
    assert var_0 == "link:[]"
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    linked_node_0 = module_0.LinkedNode(var_0)
    assert linked_node_0.value == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_2)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    assert var_3 is False
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_1, linked_list_2, bytes_1, linked_node_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    var_4 = linked_list_3.__len__()
    assert var_4 == 4
    var_5 = linked_list_3.__repr__()
    bool_0 = True
    list_2 = [bool_0, bool_0, bool_0, bool_0]
    list_3 = [list_2]
    linked_list_4 = module_0.LinkedList(*list_3)
    assert len(linked_list_4) == 1
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[[True, True, True, True]]"
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_7 = linked_list_5.__repr__()
    assert var_7 == "link:[]"
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    int_0 = -731
    list_4 = [int_0, int_0, int_0]
    linked_list_6 = module_0.LinkedList(*list_4)
    assert len(linked_list_6) == 3
    var_10 = linked_list_6.__repr__()
    assert var_10 == "link:[-731,-731,-731]"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_2302():
    complex_0 = 4095.03 - 599.647583j
    linked_node_0 = module_0.LinkedNode(complex_0)
    complex_1 = -367.4 - 1678j
    linked_node_1 = module_0.LinkedNode(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_0 = linked_list_1.__repr__()
    assert var_0 == "link:[]"
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_2 = module_0.LinkedList(*list_0)
    assert len(linked_list_2) == 2
    var_3 = linked_list_2.remove(float_0)
    assert var_3 is False
    var_4 = linked_list_2.__repr__()
    assert (
        var_4
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    float_1 = 2862.9
    bytes_1 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_1 = [bytes_1, bytes_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 2
    var_5 = linked_list_3.remove(float_1)
    assert var_5 is False
    var_6 = linked_list_3.pop()
    assert var_6 == b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    assert len(linked_list_3) == 1
    var_7 = var_6.__len__()
    bool_0 = False
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_8 = linked_list_4.remove(bool_0)
    assert var_8 is False
    linked_node_2 = module_0.LinkedNode(var_8)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_3.value) == 0
    var_9 = linked_node_3.checkInfinite()
    assert var_9 is False
    var_10 = linked_node_3.checkInfinite()
    complex_2 = -367.4 - 1678j
    linked_node_4 = module_0.LinkedNode(complex_2)
    var_11 = linked_list_6.__iter__()
    bytes_2 = b"E\xdd2\xd1\x1c\x9ac\xa3)D~-\xf9\xf7>\xa0"
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    var_12 = linked_list_7.prepend(bytes_2)
    assert len(linked_list_7) == 1
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2303():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_2 = linked_node_1.checkInfinite()
    var_3 = linked_node_1.checkInfinite()
    complex_0 = -367.4 - 1678j
    linked_node_2 = module_0.LinkedNode(complex_0)
    var_4 = linked_list_3.__iter__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    linked_node_3 = module_0.LinkedNode(linked_list_4)
    assert len(linked_node_3.value) == 0
    var_5 = linked_node_3.checkInfinite()
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_0 = [linked_node_3, linked_list_4, bytes_0, linked_node_3]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    var_6 = linked_list_5.__len__()
    assert var_6 == 4
    var_7 = linked_list_5.__repr__()
    complex_1 = 4095.03 - 599.647583j
    linked_node_4 = module_0.LinkedNode(complex_1)
    complex_2 = -367.4 - 1678j
    linked_node_5 = module_0.LinkedNode(complex_2)
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    var_8 = linked_list_6.__len__()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == "0"
    var_10 = var_9.__iter__()
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    linked_node_6 = module_0.LinkedNode(linked_list_8)
    assert len(linked_node_6.value) == 0
    var_11 = linked_node_6.checkInfinite()
    var_12 = linked_node_6.checkInfinite()
    var_13 = linked_list_7.__repr__()
    assert var_13 == "link:[]"
    var_14 = linked_list_8.prepend(var_13)
    assert len(linked_list_8) == 1
    assert len(linked_node_6.value) == 1
    var_14.remove(linked_list_7)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_1)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    var_1 = linked_node_0.checkInfinite()
    var_2 = linked_list_0.__repr__()
    assert var_2 == "link:[]"
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    linked_node_1 = module_0.LinkedNode(linked_list_3)
    assert len(linked_node_1.value) == 0
    var_3 = linked_node_1.checkInfinite()
    var_4 = linked_node_1.checkInfinite()
    var_5 = linked_list_3.__len__()
    assert var_5 == 0
    var_6 = linked_list_3.__len__()
    assert var_6 == 0
    var_7 = linked_list_3.remove(var_4)
    assert var_7 is False
    var_8 = linked_list_3.__iter__()
    var_4.prepend(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    linked_node_0 = module_0.LinkedNode(none_type_0)
    bytes_0 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    var_0 = linked_list_0.remove(bytes_0)
    assert var_0 is False
    bytes_1 = b"T\x1bg\xd27\xd3\\\x13"
    linked_node_1 = module_0.LinkedNode(bytes_1, bytes_1)
    set_0 = {linked_node_1, bytes_1, bytes_1, bytes_1}
    linked_node_2 = module_0.LinkedNode(set_0)
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    dict_0 = {
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
        linked_list_1: linked_list_1,
    }
    var_1 = linked_list_1.prepend(dict_0)
    assert len(linked_list_1) == 1
    complex_0 = 4095.03 - 599.647583j
    linked_node_3 = module_0.LinkedNode(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_2 = linked_list_2.prepend(dict_0)
    assert len(linked_list_2) == 1
    var_3 = linked_list_2.remove(dict_0)
    assert var_3 is True
    assert len(linked_list_2) == 0
    linked_list_3 = module_0.LinkedList()
    assert len(linked_list_3) == 0
    var_4 = linked_list_3.__iter__()
    var_5 = var_4.__repr__()
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_6 = linked_list_4.__repr__()
    assert var_6 == "link:[]"
    var_7 = var_6.__repr__()
    assert var_7 == "'link:[]'"
    var_8 = var_7.__repr__()
    assert var_8 == "\"'link:[]'\""
    var_9 = var_7.__repr__()
    assert var_9 == "\"'link:[]'\""
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    linked_list_5 = module_0.LinkedList(*list_0)
    assert len(linked_list_5) == 4
    linked_list_6 = module_0.LinkedList()
    assert len(linked_list_6) == 0
    linked_node_4 = module_0.LinkedNode(linked_list_6)
    assert len(linked_node_4.value) == 0
    var_10 = linked_node_4.checkInfinite()
    assert var_10 is False
    bytes_2 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_1 = [linked_node_4, linked_list_6, bytes_2, linked_node_4]
    linked_list_7 = module_0.LinkedList(*list_1)
    assert len(linked_list_7) == 4
    var_11 = linked_list_7.__len__()
    assert var_11 == 4
    var_12 = linked_list_7.__repr__()
    var_13 = linked_list_7.pop()
    assert len(linked_list_7) == 3
    assert (
        f"{type(var_13).__module__}.{type(var_13).__qualname__}"
        == "linkedList2.LinkedNode"
    )
    assert (
        f"{type(var_13.value).__module__}.{type(var_13.value).__qualname__}"
        == "linkedList2.LinkedList"
    )
    assert len(var_13.value) == 0
    assert var_13.next is None
    complex_1 = 4095.03 - 599.647583j
    linked_node_5 = module_0.LinkedNode(complex_1)
    linked_list_8 = module_0.LinkedList()
    assert len(linked_list_8) == 0
    var_14 = linked_list_8.__repr__()
    assert var_14 == "link:[]"
    var_15 = linked_node_5.checkInfinite()
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_16 = linked_list_9.remove(var_14)
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12.prepend(linked_list_5)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = "Vyx0]D=6H1fKTpZ"
    int_0 = -3330
    tuple_0 = (int_0, int_0)
    bytes_0 = b"z\xe1\xb7"
    tuple_1 = (tuple_0, int_0, bytes_0)
    list_0 = [str_0, tuple_1]
    linked_list_0 = module_0.LinkedList(*list_0)
    assert len(linked_list_0) == 2
    var_0 = linked_list_0.prepend(bytes_0)
    assert len(linked_list_0) == 3
    var_0.checkInfinite()


@pytest.mark.xfail(strict=True)
def test_case_2307():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    linked_node_0 = module_0.LinkedNode(linked_list_0)
    assert len(linked_node_0.value) == 0
    var_0 = linked_node_0.checkInfinite()
    assert var_0 is False
    linked_node_1 = module_0.LinkedNode(var_0, linked_list_0)
    assert len(linked_node_1.next) == 0
    float_0 = 2862.9
    bytes_0 = b"&Z\xac\x82WC\xc4\x88'\\m\x0c\xaf\xccJ\xda"
    list_0 = [bytes_0, bytes_0]
    linked_list_1 = module_0.LinkedList(*list_0)
    assert len(linked_list_1) == 2
    var_1 = linked_list_1.remove(float_0)
    assert var_1 is False
    var_2 = linked_list_1.__repr__()
    assert (
        var_2
        == 'link:[b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda",b"&Z\\xac\\x82WC\\xc4\\x88\'\\\\m\\x0c\\xaf\\xccJ\\xda"]'
    )
    var_3 = var_2.__iter__()
    bool_0 = True
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_4 = linked_list_2.prepend(bool_0)
    assert len(linked_list_2) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    linked_list_3 = module_0.LinkedList(*list_1)
    assert len(linked_list_3) == 4
    none_type_0 = None
    linked_node_2 = module_0.LinkedNode(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert len(linked_list_4) == 0
    var_5 = linked_node_2.checkInfinite()
    none_type_1 = None
    linked_node_3 = module_0.LinkedNode(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert len(linked_list_5) == 0
    var_6 = linked_node_3.checkInfinite()
    var_7 = linked_list_5.__iter__()
    bool_2 = True
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    linked_node_4 = module_0.LinkedNode(set_0, set_0)
    list_2 = [bool_2]
    linked_list_6 = module_0.LinkedList(*list_2)
    assert len(linked_list_6) == 1
    var_8 = linked_list_6.remove(set_0)
    assert var_8 is False
    linked_list_7 = module_0.LinkedList()
    assert len(linked_list_7) == 0
    linked_node_5 = module_0.LinkedNode(linked_list_7)
    assert len(linked_node_5.value) == 0
    var_9 = linked_node_5.checkInfinite()
    bytes_1 = b"\xed?\x8c\x12?\xc7\xb0\xda\x12\xe8\x05\xd8\x94"
    list_3 = [linked_node_5, linked_list_7, bytes_1, linked_node_5]
    linked_list_8 = module_0.LinkedList(*list_3)
    assert len(linked_list_8) == 4
    var_10 = linked_list_8.__len__()
    assert var_10 == 4
    linked_list_9 = module_0.LinkedList()
    assert len(linked_list_9) == 0
    var_11 = linked_list_9.remove(linked_list_9)
    assert var_11 is False
    linked_list_10 = module_0.LinkedList()
    assert len(linked_list_10) == 0
    var_12 = var_11.__repr__()
    var_1.checkInfinite()
